
UART_NEXTION_POC_NUCLEO-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f7c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  08008298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000024  080082bc  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000084  0800831c  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  240000e4  0800837c  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003a4  0800837c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020112  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ec6  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002361  00000000  00000000  0003501b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f0  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032387  00000000  00000000  00038a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001274f  00000000  00000000  0006adc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001456ee  00000000  00000000  0007d516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035b8  00000000  00000000  001c2c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  001c61bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000e4 	.word	0x240000e4
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008230 	.word	0x08008230

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000e8 	.word	0x240000e8
 8000308:	08008230 	.word	0x08008230

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fe13 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8d1 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa2b 	bl	8000a80 <MX_GPIO_Init>
  MX_ETH_Init();
 800062a:	f000 f93d 	bl	80008a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800062e:	f000 f9d3 	bl	80009d8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000632:	f000 fa1d 	bl	8000a70 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000636:	f000 f983 	bl	8000940 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4 ,rx_data ,rx_data_size/2);
 800063a:	2201      	movs	r2, #1
 800063c:	4957      	ldr	r1, [pc, #348]	; (800079c <main+0x184>)
 800063e:	4858      	ldr	r0, [pc, #352]	; (80007a0 <main+0x188>)
 8000640:	f005 f966 	bl	8005910 <HAL_UART_Receive_IT>
  rx_ind = 0;
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <main+0x18c>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
  rx_data_flag=0;
 800064a:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <main+0x190>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
  stop_ind = 0;
 8000650:	4b56      	ldr	r3, [pc, #344]	; (80007ac <main+0x194>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

	// GUST TEST THE strstr func
	//////////////////////////////////////////////////////////////////
	uint8_t arr1[5]={3,4,6,6,8};
 8000656:	4a56      	ldr	r2, [pc, #344]	; (80007b0 <main+0x198>)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	3304      	adds	r3, #4
 8000662:	7019      	strb	r1, [r3, #0]
	uint8_t arr2[2]={6,6};
 8000664:	f240 6306 	movw	r3, #1542	; 0x606
 8000668:	803b      	strh	r3, [r7, #0]
	int i=0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]


	if( strstr(arr1,arr2) ) //if(rx_ind==20)
 800066e:	463a      	mov	r2, r7
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f007 fda1 	bl	80081bc <strstr>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <main+0x70>
	{
	  HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fe72 	bl	800136c <HAL_Delay>
	}
	//////////////////////////////////////////////////////////////////
	//HAL_Delay(1000);

	if(rx_data_flag == 1)
 8000688:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <main+0x190>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1e2      	bne.n	8000656 <main+0x3e>
	{
		data[0] = 't'; //t //116
 8000690:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x19c>)
 8000692:	2274      	movs	r2, #116	; 0x74
 8000694:	701a      	strb	r2, [r3, #0]
		data[1] = '3'; //3 //51
 8000696:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <main+0x19c>)
 8000698:	2233      	movs	r2, #51	; 0x33
 800069a:	705a      	strb	r2, [r3, #1]
		data[2] = '.'; //. //46
 800069c:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <main+0x19c>)
 800069e:	222e      	movs	r2, #46	; 0x2e
 80006a0:	709a      	strb	r2, [r3, #2]
		data[3] = 't'; //t //116
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <main+0x19c>)
 80006a4:	2274      	movs	r2, #116	; 0x74
 80006a6:	70da      	strb	r2, [r3, #3]
		data[4] = 'x'; //x //120
 80006a8:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <main+0x19c>)
 80006aa:	2278      	movs	r2, #120	; 0x78
 80006ac:	711a      	strb	r2, [r3, #4]
		data[5] = 't'; //t //116
 80006ae:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <main+0x19c>)
 80006b0:	2274      	movs	r2, #116	; 0x74
 80006b2:	715a      	strb	r2, [r3, #5]
		data[6] = '='; //= //61
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <main+0x19c>)
 80006b6:	223d      	movs	r2, #61	; 0x3d
 80006b8:	719a      	strb	r2, [r3, #6]
		data[7] = '"'; //= //61
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <main+0x19c>)
 80006bc:	2222      	movs	r2, #34	; 0x22
 80006be:	71da      	strb	r2, [r3, #7]
		i=0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
		start_ind = strstr(rx_buffer,stream_start);
 80006c4:	493c      	ldr	r1, [pc, #240]	; (80007b8 <main+0x1a0>)
 80006c6:	483d      	ldr	r0, [pc, #244]	; (80007bc <main+0x1a4>)
 80006c8:	f007 fd78 	bl	80081bc <strstr>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a3c      	ldr	r2, [pc, #240]	; (80007c0 <main+0x1a8>)
 80006d0:	6013      	str	r3, [r2, #0]
		start_ind = start_ind +5+1; // +5 for the STARTT string and +1 for the next value
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <main+0x1a8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3306      	adds	r3, #6
 80006d8:	4a39      	ldr	r2, [pc, #228]	; (80007c0 <main+0x1a8>)
 80006da:	6013      	str	r3, [r2, #0]
		while(start_ind<stop_ind)
 80006dc:	e00e      	b.n	80006fc <main+0xe4>
		{
			data[8+i]=*start_ind;
 80006de:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <main+0x1a8>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3308      	adds	r3, #8
 80006e6:	7811      	ldrb	r1, [r2, #0]
 80006e8:	4a32      	ldr	r2, [pc, #200]	; (80007b4 <main+0x19c>)
 80006ea:	54d1      	strb	r1, [r2, r3]
			start_ind++;
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <main+0x1a8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a33      	ldr	r2, [pc, #204]	; (80007c0 <main+0x1a8>)
 80006f4:	6013      	str	r3, [r2, #0]
			i++;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
		while(start_ind<stop_ind)
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <main+0x1a8>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <main+0x194>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d3ea      	bcc.n	80006de <main+0xc6>
		}
		uint8_t s = *start_ind;
 8000708:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <main+0x1a8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	72bb      	strb	r3, [r7, #10]
		/*for(i=0; i<strlen(rx_buffer)-(7+5);i++)
		{
			data[8+i]=rx_buffer[i];
			//data1[i]=rx_buffer[5+i];
		}*/
		data[8+i]='"';
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3308      	adds	r3, #8
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <main+0x19c>)
 8000716:	2122      	movs	r1, #34	; 0x22
 8000718:	54d1      	strb	r1, [r2, r3]

		//HAL_Delay(1000);
		HAL_UART_Transmit(&huart4 ,data ,strlen(data),1000);
 800071a:	4826      	ldr	r0, [pc, #152]	; (80007b4 <main+0x19c>)
 800071c:	f7ff fdf6 	bl	800030c <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	4922      	ldr	r1, [pc, #136]	; (80007b4 <main+0x19c>)
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <main+0x188>)
 800072c:	f005 f862 	bl	80057f4 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart4 ,cmd_end ,strlen(cmd_end),1000);
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <main+0x1ac>)
 8000732:	f7ff fdeb 	bl	800030c <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	4921      	ldr	r1, [pc, #132]	; (80007c4 <main+0x1ac>)
 8000740:	4817      	ldr	r0, [pc, #92]	; (80007a0 <main+0x188>)
 8000742:	f005 f857 	bl	80057f4 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart4 ,data1 ,strlen(data1),1000);


		rx_data_flag=0;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <main+0x190>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
		rx_ind = 0;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x18c>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]

		uint8_t index=0;
 8000752:	2300      	movs	r3, #0
 8000754:	72fb      	strb	r3, [r7, #11]
		uint8_t len = strlen(data);
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <main+0x19c>)
 8000758:	f7ff fdd8 	bl	800030c <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	727b      	strb	r3, [r7, #9]
		for(index=0; index<len;index++)
 8000760:	2300      	movs	r3, #0
 8000762:	72fb      	strb	r3, [r7, #11]
 8000764:	e006      	b.n	8000774 <main+0x15c>
		{
			data[index]=0;
 8000766:	7afb      	ldrb	r3, [r7, #11]
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <main+0x19c>)
 800076a:	2100      	movs	r1, #0
 800076c:	54d1      	strb	r1, [r2, r3]
		for(index=0; index<len;index++)
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	3301      	adds	r3, #1
 8000772:	72fb      	strb	r3, [r7, #11]
 8000774:	7afa      	ldrb	r2, [r7, #11]
 8000776:	7a7b      	ldrb	r3, [r7, #9]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3f4      	bcc.n	8000766 <main+0x14e>
		}


		for(index=0; index<len;index++)
 800077c:	2300      	movs	r3, #0
 800077e:	72fb      	strb	r3, [r7, #11]
 8000780:	e006      	b.n	8000790 <main+0x178>
		{
			rx_buffer[index]=0;
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <main+0x1a4>)
 8000786:	2100      	movs	r1, #0
 8000788:	54d1      	strb	r1, [r2, r3]
		for(index=0; index<len;index++)
 800078a:	7afb      	ldrb	r3, [r7, #11]
 800078c:	3301      	adds	r3, #1
 800078e:	72fb      	strb	r3, [r7, #11]
 8000790:	7afa      	ldrb	r2, [r7, #11]
 8000792:	7a7b      	ldrb	r3, [r7, #9]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3f4      	bcc.n	8000782 <main+0x16a>
  {
 8000798:	e75d      	b.n	8000656 <main+0x3e>
 800079a:	bf00      	nop
 800079c:	24000314 	.word	0x24000314
 80007a0:	240001e8 	.word	0x240001e8
 80007a4:	24000310 	.word	0x24000310
 80007a8:	24000316 	.word	0x24000316
 80007ac:	24000394 	.word	0x24000394
 80007b0:	08008248 	.word	0x08008248
 80007b4:	2400037c 	.word	0x2400037c
 80007b8:	2400000c 	.word	0x2400000c
 80007bc:	24000318 	.word	0x24000318
 80007c0:	24000390 	.word	0x24000390
 80007c4:	24000000 	.word	0x24000000

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fce8 	bl	80081ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fce2 	bl	80081ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f002 fa51 	bl	8002c90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <SystemClock_Config+0xdc>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a2b      	ldr	r2, [pc, #172]	; (80008a4 <SystemClock_Config+0xdc>)
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <SystemClock_Config+0xdc>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800080a:	bf00      	nop
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <SystemClock_Config+0xdc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000818:	d1f8      	bne.n	800080c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800081a:	2321      	movs	r3, #33	; 0x21
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	2302      	movs	r3, #2
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000834:	f240 1313 	movw	r3, #275	; 0x113
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083e:	2304      	movs	r3, #4
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000846:	2304      	movs	r3, #4
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084a:	2300      	movs	r3, #0
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fa54 	bl	8002d04 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000862:	f000 fa53 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	233f      	movs	r3, #63	; 0x3f
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000872:	2308      	movs	r3, #8
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2103      	movs	r1, #3
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fe13 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000898:	f000 fa38 	bl	8000d0c <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ETH_Init+0x80>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ETH_Init+0x88>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x88>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ETH_Init+0x80>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_ETH_Init+0x88>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x80>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x80>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x8c>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x80>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x90>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x80>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x80>)
 80008f8:	f001 fbe4 	bl	80020c4 <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 fa03 	bl	8000d0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2238      	movs	r2, #56	; 0x38
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x94>)
 800090c:	f007 fc4e 	bl	80081ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ETH_Init+0x94>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_ETH_Init+0x94>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_ETH_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000138 	.word	0x24000138
 800092c:	40028000 	.word	0x40028000
 8000930:	24000398 	.word	0x24000398
 8000934:	24000084 	.word	0x24000084
 8000938:	24000024 	.word	0x24000024
 800093c:	24000100 	.word	0x24000100

08000940 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_UART4_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_UART4_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_UART4_Init+0x90>)
 800094c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000950:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_UART4_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_UART4_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_UART4_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_UART4_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_UART4_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_UART4_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_UART4_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_UART4_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_UART4_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_UART4_Init+0x90>)
 800098a:	f004 fee3 	bl	8005754 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f9ba 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_UART4_Init+0x90>)
 800099c:	f007 fb3b 	bl	8008016 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f9b1 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_UART4_Init+0x90>)
 80009ae:	f007 fb70 	bl	8008092 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f9a8 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_UART4_Init+0x90>)
 80009be:	f007 faf1 	bl	8007fa4 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f9a0 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	240001e8 	.word	0x240001e8
 80009d4:	40004c00 	.word	0x40004c00

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART3_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a22:	f004 fe97 	bl	8005754 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f96e 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a34:	f007 faef 	bl	8008016 <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f000 f965 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a46:	f007 fb24 	bl	8008092 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 f95c 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a56:	f007 faa5 	bl	8007fa4 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 f954 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2400027c 	.word	0x2400027c
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b71      	ldr	r3, [pc, #452]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a6f      	ldr	r2, [pc, #444]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b6d      	ldr	r3, [pc, #436]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab4:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a68      	ldr	r2, [pc, #416]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b65      	ldr	r3, [pc, #404]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b62      	ldr	r3, [pc, #392]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a60      	ldr	r2, [pc, #384]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b5e      	ldr	r3, [pc, #376]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b5a      	ldr	r3, [pc, #360]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a59      	ldr	r2, [pc, #356]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b56      	ldr	r3, [pc, #344]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b53      	ldr	r3, [pc, #332]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b4b      	ldr	r3, [pc, #300]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a4a      	ldr	r2, [pc, #296]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a42      	ldr	r2, [pc, #264]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <MX_GPIO_Init+0x1dc>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b6e:	483c      	ldr	r0, [pc, #240]	; (8000c60 <MX_GPIO_Init+0x1e0>)
 8000b70:	f002 f874 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	483a      	ldr	r0, [pc, #232]	; (8000c64 <MX_GPIO_Init+0x1e4>)
 8000b7c:	f002 f86e 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	4838      	ldr	r0, [pc, #224]	; (8000c68 <MX_GPIO_Init+0x1e8>)
 8000b86:	f002 f869 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4833      	ldr	r0, [pc, #204]	; (8000c6c <MX_GPIO_Init+0x1ec>)
 8000ba0:	f001 feb4 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000ba4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4828      	ldr	r0, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x1e0>)
 8000bbe:	f001 fea5 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_GPIO_Init+0x1e4>)
 8000bdc:	f001 fe96 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481e      	ldr	r0, [pc, #120]	; (8000c70 <MX_GPIO_Init+0x1f0>)
 8000bf6:	f001 fe89 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4819      	ldr	r0, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x1f4>)
 8000c10:	f001 fe7c 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c26:	230a      	movs	r3, #10
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x1f4>)
 8000c32:	f001 fe6b 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_GPIO_Init+0x1e8>)
 8000c4e:	f001 fe5d 	bl	800290c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020400 	.word	0x58020400
 8000c64:	58020c00 	.word	0x58020c00
 8000c68:	58021000 	.word	0x58021000
 8000c6c:	58020800 	.word	0x58020800
 8000c70:	58021800 	.word	0x58021800
 8000c74:	58020000 	.word	0x58020000

08000c78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  HAL_UART_Receive_IT(&huart4 ,rx_data ,rx_data_size/2);
 8000c80:	2201      	movs	r2, #1
 8000c82:	491b      	ldr	r1, [pc, #108]	; (8000cf0 <HAL_UART_RxCpltCallback+0x78>)
 8000c84:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <HAL_UART_RxCpltCallback+0x7c>)
 8000c86:	f004 fe43 	bl	8005910 <HAL_UART_Receive_IT>

  uint8_t i=0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  for(i; i<strlen(rx_data); i++)
 8000c8e:	e00c      	b.n	8000caa <HAL_UART_RxCpltCallback+0x32>
	  rx_buffer[rx_ind+i]=rx_data[i];
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_RxCpltCallback+0x80>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <HAL_UART_RxCpltCallback+0x78>)
 8000c9e:	5c89      	ldrb	r1, [r1, r2]
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_UART_RxCpltCallback+0x84>)
 8000ca2:	54d1      	strb	r1, [r2, r3]
  for(i; i<strlen(rx_data); i++)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfc      	ldrb	r4, [r7, #15]
 8000cac:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <HAL_UART_RxCpltCallback+0x78>)
 8000cae:	f7ff fb2d 	bl	800030c <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d3eb      	bcc.n	8000c90 <HAL_UART_RxCpltCallback+0x18>

  rx_ind = rx_ind+i;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_UART_RxCpltCallback+0x80>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_UART_RxCpltCallback+0x80>)
 8000cc4:	701a      	strb	r2, [r3, #0]

  stop_ind = strstr(rx_buffer,stream_end);
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <HAL_UART_RxCpltCallback+0x88>)
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_UART_RxCpltCallback+0x84>)
 8000cca:	f007 fa77 	bl	80081bc <strstr>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <HAL_UART_RxCpltCallback+0x8c>)
 8000cd2:	6013      	str	r3, [r2, #0]
  if(stop_ind) //rx_ind==9
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_UART_RxCpltCallback+0x8c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <HAL_UART_RxCpltCallback+0x70>
  {
	  rx_data_flag=1;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_UART_RxCpltCallback+0x90>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
	  rx_ind = 0;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_UART_RxCpltCallback+0x80>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	24000314 	.word	0x24000314
 8000cf4:	240001e8 	.word	0x240001e8
 8000cf8:	24000310 	.word	0x24000310
 8000cfc:	24000318 	.word	0x24000318
 8000d00:	24000004 	.word	0x24000004
 8000d04:	24000394 	.word	0x24000394
 8000d08:	24000316 	.word	0x24000316

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_MspInit+0x30>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x30>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x30>)
 8000d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	58024400 	.word	0x58024400

08000d4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <HAL_ETH_MspInit+0x184>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f040 80ab 	bne.w	8000ec6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d70:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d76:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dac:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db2:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dbc:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	4a39      	ldr	r2, [pc, #228]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e42:	2332      	movs	r3, #50	; 0x32
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e52:	230b      	movs	r3, #11
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <HAL_ETH_MspInit+0x18c>)
 8000e5e:	f001 fd55 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e62:	2386      	movs	r3, #134	; 0x86
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <HAL_ETH_MspInit+0x190>)
 8000e7e:	f001 fd45 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HAL_ETH_MspInit+0x194>)
 8000ea0:	f001 fd34 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ea4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <HAL_ETH_MspInit+0x198>)
 8000ec2:	f001 fd23 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58020800 	.word	0x58020800
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58021800 	.word	0x58021800

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ba      	sub	sp, #232	; 0xe8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	22b8      	movs	r2, #184	; 0xb8
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 f94f 	bl	80081ac <memset>
  if(huart->Instance==UART4)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_UART_MspInit+0x170>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d14f      	bne.n	8000fb8 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f18:	f04f 0202 	mov.w	r2, #2
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fe4e 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f3a:	f7ff fee7 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a3e      	ldr	r2, [pc, #248]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <HAL_UART_MspInit+0x174>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f94:	2308      	movs	r3, #8
 8000f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482f      	ldr	r0, [pc, #188]	; (8001060 <HAL_UART_MspInit+0x178>)
 8000fa2:	f001 fcb3 	bl	800290c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2034      	movs	r0, #52	; 0x34
 8000fac:	f000 faf1 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fb0:	2034      	movs	r0, #52	; 0x34
 8000fb2:	f000 fb08 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb6:	e04b      	b.n	8001050 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <HAL_UART_MspInit+0x17c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d146      	bne.n	8001050 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc2:	f04f 0202 	mov.w	r2, #2
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fdf9 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000fe4:	f7ff fe92 	bl	8000d0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_UART_MspInit+0x174>)
 8000fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_UART_MspInit+0x174>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_UART_MspInit+0x174>)
 8000ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_UART_MspInit+0x174>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_UART_MspInit+0x174>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_UART_MspInit+0x174>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001028:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103e:	2307      	movs	r3, #7
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001048:	4619      	mov	r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <HAL_UART_MspInit+0x180>)
 800104c:	f001 fc5e 	bl	800290c <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	37e8      	adds	r7, #232	; 0xe8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40004c00 	.word	0x40004c00
 800105c:	58024400 	.word	0x58024400
 8001060:	58020800 	.word	0x58020800
 8001064:	40004800 	.word	0x40004800
 8001068:	58020c00 	.word	0x58020c00

0800106c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001070:	f3bf 8f4f 	dsb	sy
}
 8001074:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <__NVIC_SystemReset+0x24>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800107e:	4904      	ldr	r1, [pc, #16]	; (8001090 <__NVIC_SystemReset+0x24>)
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_SystemReset+0x28>)
 8001082:	4313      	orrs	r3, r2
 8001084:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001086:	f3bf 8f4f 	dsb	sy
}
 800108a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <__NVIC_SystemReset+0x20>
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	05fa0004 	.word	0x05fa0004

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80010a2:	f7ff ffe3 	bl	800106c <__NVIC_SystemReset>

080010a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <BusFault_Handler+0x4>

080010b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f921 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <UART4_IRQHandler+0x10>)
 80010f6:	f004 fc57 	bl	80059a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	240001e8 	.word	0x240001e8

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <SystemInit+0xd0>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <SystemInit+0xd0>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <SystemInit+0xd4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	2b06      	cmp	r3, #6
 8001122:	d807      	bhi.n	8001134 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <SystemInit+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 030f 	bic.w	r3, r3, #15
 800112c:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <SystemInit+0xd4>)
 800112e:	f043 0307 	orr.w	r3, r3, #7
 8001132:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <SystemInit+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <SystemInit+0xd8>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <SystemInit+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemInit+0xd8>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4924      	ldr	r1, [pc, #144]	; (80011dc <SystemInit+0xd8>)
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <SystemInit+0xdc>)
 800114e:	4013      	ands	r3, r2
 8001150:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <SystemInit+0xd4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemInit+0xd4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 030f 	bic.w	r3, r3, #15
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <SystemInit+0xd4>)
 8001168:	f043 0307 	orr.w	r3, r3, #7
 800116c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <SystemInit+0xd8>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <SystemInit+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <SystemInit+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <SystemInit+0xd8>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <SystemInit+0xe0>)
 8001184:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <SystemInit+0xd8>)
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <SystemInit+0xe4>)
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <SystemInit+0xd8>)
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <SystemInit+0xe8>)
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <SystemInit+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <SystemInit+0xd8>)
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <SystemInit+0xe8>)
 800119c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <SystemInit+0xd8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <SystemInit+0xd8>)
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <SystemInit+0xe8>)
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SystemInit+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <SystemInit+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <SystemInit+0xd8>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <SystemInit+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <SystemInit+0xec>)
 80011c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	52002000 	.word	0x52002000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e4:	02020200 	.word	0x02020200
 80011e8:	01ff0000 	.word	0x01ff0000
 80011ec:	01010280 	.word	0x01010280
 80011f0:	52004000 	.word	0x52004000

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f8:	f7ff ff84 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	; (8001240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f006 ffe1 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f9f7 	bl	8000618 <main>
  bx  lr
 800122a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001230:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001234:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001238:	08008298 	.word	0x08008298
  ldr r2, =_sbss
 800123c:	240000e4 	.word	0x240000e4
  ldr r4, =_ebss
 8001240:	240003a4 	.word	0x240003a4

08001244 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC3_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124e:	2003      	movs	r0, #3
 8001250:	f000 f994 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001254:	f002 fae6 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8001258:	4602      	mov	r2, r0
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_Init+0x68>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <HAL_Init+0x6c>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_Init+0x68>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_Init+0x6c>)
 800127c:	5cd3      	ldrb	r3, [r2, r3]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_Init+0x70>)
 800128a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_Init+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f814 	bl	80012c0 <HAL_InitTick>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e002      	b.n	80012a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012a2:	f7ff fd39 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58024400 	.word	0x58024400
 80012b4:	08008250 	.word	0x08008250
 80012b8:	24000018 	.word	0x24000018
 80012bc:	24000014 	.word	0x24000014

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_InitTick+0x64>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f979 	bl	80015e2 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f943 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x68>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	24000020 	.word	0x24000020
 8001324:	24000014 	.word	0x24000014
 8001328:	2400001c 	.word	0x2400001c

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	24000020 	.word	0x24000020
 8001350:	240003a0 	.word	0x240003a0

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	240003a0 	.word	0x240003a0

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000020 	.word	0x24000020

080013b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013c4:	4904      	ldr	r1, [pc, #16]	; (80013d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	58000400 	.word	0x58000400

080013dc <__NVIC_SetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <__NVIC_SetPriorityGrouping+0x40>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	4313      	orrs	r3, r2
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x40>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	05fa0000 	.word	0x05fa0000

08001424 <__NVIC_GetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff40 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff33 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa4 	bl	8001538 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fea6 	bl	8001354 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e2dc      	b.n	8001bce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d008      	beq.n	8001632 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e2cd      	b.n	8001bce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a76      	ldr	r2, [pc, #472]	; (8001810 <HAL_DMA_Abort+0x214>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d04a      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a74      	ldr	r2, [pc, #464]	; (8001814 <HAL_DMA_Abort+0x218>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d045      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_DMA_Abort+0x21c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d040      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a71      	ldr	r2, [pc, #452]	; (800181c <HAL_DMA_Abort+0x220>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d03b      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a70      	ldr	r2, [pc, #448]	; (8001820 <HAL_DMA_Abort+0x224>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d036      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_DMA_Abort+0x228>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d031      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6d      	ldr	r2, [pc, #436]	; (8001828 <HAL_DMA_Abort+0x22c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d02c      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6b      	ldr	r2, [pc, #428]	; (800182c <HAL_DMA_Abort+0x230>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d027      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_DMA_Abort+0x234>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a68      	ldr	r2, [pc, #416]	; (8001834 <HAL_DMA_Abort+0x238>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01d      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_DMA_Abort+0x23c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d018      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a65      	ldr	r2, [pc, #404]	; (800183c <HAL_DMA_Abort+0x240>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a64      	ldr	r2, [pc, #400]	; (8001840 <HAL_DMA_Abort+0x244>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00e      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a62      	ldr	r2, [pc, #392]	; (8001844 <HAL_DMA_Abort+0x248>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d009      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a61      	ldr	r2, [pc, #388]	; (8001848 <HAL_DMA_Abort+0x24c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d004      	beq.n	80016d2 <HAL_DMA_Abort+0xd6>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5f      	ldr	r2, [pc, #380]	; (800184c <HAL_DMA_Abort+0x250>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_DMA_Abort+0xda>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_DMA_Abort+0xdc>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 021e 	bic.w	r2, r2, #30
 80016ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e00a      	b.n	800171a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 020e 	bic.w	r2, r2, #14
 8001712:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <HAL_DMA_Abort+0x214>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d072      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_DMA_Abort+0x218>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d06d      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a39      	ldr	r2, [pc, #228]	; (8001818 <HAL_DMA_Abort+0x21c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d068      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a37      	ldr	r2, [pc, #220]	; (800181c <HAL_DMA_Abort+0x220>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d063      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a36      	ldr	r2, [pc, #216]	; (8001820 <HAL_DMA_Abort+0x224>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d05e      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a34      	ldr	r2, [pc, #208]	; (8001824 <HAL_DMA_Abort+0x228>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d059      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_DMA_Abort+0x22c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d054      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_DMA_Abort+0x230>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d04f      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a30      	ldr	r2, [pc, #192]	; (8001830 <HAL_DMA_Abort+0x234>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d04a      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <HAL_DMA_Abort+0x238>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d045      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <HAL_DMA_Abort+0x23c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d040      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <HAL_DMA_Abort+0x240>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d03b      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2a      	ldr	r2, [pc, #168]	; (8001840 <HAL_DMA_Abort+0x244>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d036      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a28      	ldr	r2, [pc, #160]	; (8001844 <HAL_DMA_Abort+0x248>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d031      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_DMA_Abort+0x24c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d02c      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_DMA_Abort+0x250>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d027      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <HAL_DMA_Abort+0x254>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <HAL_DMA_Abort+0x258>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01d      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <HAL_DMA_Abort+0x25c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d018      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_DMA_Abort+0x260>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_DMA_Abort+0x264>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00e      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_DMA_Abort+0x268>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d009      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_DMA_Abort+0x26c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d004      	beq.n	800180a <HAL_DMA_Abort+0x20e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_DMA_Abort+0x270>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d132      	bne.n	8001870 <HAL_DMA_Abort+0x274>
 800180a:	2301      	movs	r3, #1
 800180c:	e031      	b.n	8001872 <HAL_DMA_Abort+0x276>
 800180e:	bf00      	nop
 8001810:	40020010 	.word	0x40020010
 8001814:	40020028 	.word	0x40020028
 8001818:	40020040 	.word	0x40020040
 800181c:	40020058 	.word	0x40020058
 8001820:	40020070 	.word	0x40020070
 8001824:	40020088 	.word	0x40020088
 8001828:	400200a0 	.word	0x400200a0
 800182c:	400200b8 	.word	0x400200b8
 8001830:	40020410 	.word	0x40020410
 8001834:	40020428 	.word	0x40020428
 8001838:	40020440 	.word	0x40020440
 800183c:	40020458 	.word	0x40020458
 8001840:	40020470 	.word	0x40020470
 8001844:	40020488 	.word	0x40020488
 8001848:	400204a0 	.word	0x400204a0
 800184c:	400204b8 	.word	0x400204b8
 8001850:	58025408 	.word	0x58025408
 8001854:	5802541c 	.word	0x5802541c
 8001858:	58025430 	.word	0x58025430
 800185c:	58025444 	.word	0x58025444
 8001860:	58025458 	.word	0x58025458
 8001864:	5802546c 	.word	0x5802546c
 8001868:	58025480 	.word	0x58025480
 800186c:	58025494 	.word	0x58025494
 8001870:	2300      	movs	r3, #0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001884:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6d      	ldr	r2, [pc, #436]	; (8001a40 <HAL_DMA_Abort+0x444>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04a      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6b      	ldr	r2, [pc, #428]	; (8001a44 <HAL_DMA_Abort+0x448>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d045      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_DMA_Abort+0x44c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d040      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a68      	ldr	r2, [pc, #416]	; (8001a4c <HAL_DMA_Abort+0x450>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d03b      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a67      	ldr	r2, [pc, #412]	; (8001a50 <HAL_DMA_Abort+0x454>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d036      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_DMA_Abort+0x458>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d031      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a64      	ldr	r2, [pc, #400]	; (8001a58 <HAL_DMA_Abort+0x45c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d02c      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a62      	ldr	r2, [pc, #392]	; (8001a5c <HAL_DMA_Abort+0x460>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d027      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a61      	ldr	r2, [pc, #388]	; (8001a60 <HAL_DMA_Abort+0x464>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5f      	ldr	r2, [pc, #380]	; (8001a64 <HAL_DMA_Abort+0x468>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01d      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_DMA_Abort+0x46c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d018      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_DMA_Abort+0x470>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_DMA_Abort+0x474>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00e      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a59      	ldr	r2, [pc, #356]	; (8001a74 <HAL_DMA_Abort+0x478>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_DMA_Abort+0x47c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort+0x32a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <HAL_DMA_Abort+0x480>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d108      	bne.n	8001938 <HAL_DMA_Abort+0x33c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_DMA_Abort+0x34c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001948:	e013      	b.n	8001972 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fd03 	bl	8001354 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b05      	cmp	r3, #5
 8001956:	d90c      	bls.n	8001972 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e12d      	b.n	8001bce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1e5      	bne.n	800194a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <HAL_DMA_Abort+0x444>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04a      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <HAL_DMA_Abort+0x448>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d045      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <HAL_DMA_Abort+0x44c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d040      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <HAL_DMA_Abort+0x450>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d03b      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_DMA_Abort+0x454>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d036      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_DMA_Abort+0x458>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d031      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_DMA_Abort+0x45c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d02c      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_DMA_Abort+0x460>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d027      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_DMA_Abort+0x464>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <HAL_DMA_Abort+0x468>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01d      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_DMA_Abort+0x46c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d018      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_DMA_Abort+0x470>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_DMA_Abort+0x474>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00e      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_DMA_Abort+0x478>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d009      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_DMA_Abort+0x47c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d004      	beq.n	8001a1e <HAL_DMA_Abort+0x422>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_DMA_Abort+0x480>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_DMA_Abort+0x426>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_DMA_Abort+0x428>
 8001a22:	2300      	movs	r3, #0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d02b      	beq.n	8001a80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	223f      	movs	r2, #63	; 0x3f
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	e02a      	b.n	8001a96 <HAL_DMA_Abort+0x49a>
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40020040 	.word	0x40020040
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	40020070 	.word	0x40020070
 8001a54:	40020088 	.word	0x40020088
 8001a58:	400200a0 	.word	0x400200a0
 8001a5c:	400200b8 	.word	0x400200b8
 8001a60:	40020410 	.word	0x40020410
 8001a64:	40020428 	.word	0x40020428
 8001a68:	40020440 	.word	0x40020440
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	40020470 	.word	0x40020470
 8001a74:	40020488 	.word	0x40020488
 8001a78:	400204a0 	.word	0x400204a0
 8001a7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_DMA_Abort+0x5dc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d072      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <HAL_DMA_Abort+0x5e0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d06d      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_DMA_Abort+0x5e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d068      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	; (8001be4 <HAL_DMA_Abort+0x5e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d063      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <HAL_DMA_Abort+0x5ec>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d05e      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a47      	ldr	r2, [pc, #284]	; (8001bec <HAL_DMA_Abort+0x5f0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d059      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_DMA_Abort+0x5f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d054      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a44      	ldr	r2, [pc, #272]	; (8001bf4 <HAL_DMA_Abort+0x5f8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04f      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <HAL_DMA_Abort+0x5fc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d04a      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <HAL_DMA_Abort+0x600>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d045      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <HAL_DMA_Abort+0x604>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d040      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3e      	ldr	r2, [pc, #248]	; (8001c04 <HAL_DMA_Abort+0x608>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d03b      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <HAL_DMA_Abort+0x60c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d036      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	; (8001c0c <HAL_DMA_Abort+0x610>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_DMA_Abort+0x614>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d02c      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_DMA_Abort+0x618>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d027      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a37      	ldr	r2, [pc, #220]	; (8001c18 <HAL_DMA_Abort+0x61c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a35      	ldr	r2, [pc, #212]	; (8001c1c <HAL_DMA_Abort+0x620>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01d      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <HAL_DMA_Abort+0x624>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d018      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a32      	ldr	r2, [pc, #200]	; (8001c24 <HAL_DMA_Abort+0x628>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <HAL_DMA_Abort+0x62c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2f      	ldr	r2, [pc, #188]	; (8001c2c <HAL_DMA_Abort+0x630>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d009      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <HAL_DMA_Abort+0x634>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_DMA_Abort+0x58a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <HAL_DMA_Abort+0x638>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_DMA_Abort+0x58e>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_Abort+0x590>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020010 	.word	0x40020010
 8001bdc:	40020028 	.word	0x40020028
 8001be0:	40020040 	.word	0x40020040
 8001be4:	40020058 	.word	0x40020058
 8001be8:	40020070 	.word	0x40020070
 8001bec:	40020088 	.word	0x40020088
 8001bf0:	400200a0 	.word	0x400200a0
 8001bf4:	400200b8 	.word	0x400200b8
 8001bf8:	40020410 	.word	0x40020410
 8001bfc:	40020428 	.word	0x40020428
 8001c00:	40020440 	.word	0x40020440
 8001c04:	40020458 	.word	0x40020458
 8001c08:	40020470 	.word	0x40020470
 8001c0c:	40020488 	.word	0x40020488
 8001c10:	400204a0 	.word	0x400204a0
 8001c14:	400204b8 	.word	0x400204b8
 8001c18:	58025408 	.word	0x58025408
 8001c1c:	5802541c 	.word	0x5802541c
 8001c20:	58025430 	.word	0x58025430
 8001c24:	58025444 	.word	0x58025444
 8001c28:	58025458 	.word	0x58025458
 8001c2c:	5802546c 	.word	0x5802546c
 8001c30:	58025480 	.word	0x58025480
 8001c34:	58025494 	.word	0x58025494

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e237      	b.n	80020ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e22c      	b.n	80020ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d04a      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5b      	ldr	r2, [pc, #364]	; (8001ddc <HAL_DMA_Abort_IT+0x1a4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d045      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a59      	ldr	r2, [pc, #356]	; (8001de0 <HAL_DMA_Abort_IT+0x1a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d040      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_DMA_Abort_IT+0x1ac>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d03b      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_DMA_Abort_IT+0x1b0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d036      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a55      	ldr	r2, [pc, #340]	; (8001dec <HAL_DMA_Abort_IT+0x1b4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d031      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a53      	ldr	r2, [pc, #332]	; (8001df0 <HAL_DMA_Abort_IT+0x1b8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02c      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_DMA_Abort_IT+0x1bc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d027      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_DMA_Abort_IT+0x1c0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a4f      	ldr	r2, [pc, #316]	; (8001dfc <HAL_DMA_Abort_IT+0x1c4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d01d      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_DMA_Abort_IT+0x1c8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_DMA_Abort_IT+0x1cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_DMA_Abort_IT+0x1d0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <HAL_DMA_Abort_IT+0x1d4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_DMA_Abort_IT+0x1d8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <HAL_DMA_Abort_IT+0x1dc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Abort_IT+0xcc>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_Abort_IT+0xce>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8086 	beq.w	8001e18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d04a      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2e      	ldr	r2, [pc, #184]	; (8001ddc <HAL_DMA_Abort_IT+0x1a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d045      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <HAL_DMA_Abort_IT+0x1a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d040      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_DMA_Abort_IT+0x1ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d03b      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_DMA_Abort_IT+0x1b0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d036      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_DMA_Abort_IT+0x1b4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d031      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_DMA_Abort_IT+0x1b8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d02c      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_DMA_Abort_IT+0x1bc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d027      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_DMA_Abort_IT+0x1c0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d022      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_DMA_Abort_IT+0x1c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d01d      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_DMA_Abort_IT+0x1c8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d018      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_DMA_Abort_IT+0x1cc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_DMA_Abort_IT+0x1d0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00e      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_DMA_Abort_IT+0x1d4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_DMA_Abort_IT+0x1d8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x17c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_DMA_Abort_IT+0x1dc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d108      	bne.n	8001dc6 <HAL_DMA_Abort_IT+0x18e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e178      	b.n	80020b8 <HAL_DMA_Abort_IT+0x480>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e16f      	b.n	80020b8 <HAL_DMA_Abort_IT+0x480>
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	40020040 	.word	0x40020040
 8001de4:	40020058 	.word	0x40020058
 8001de8:	40020070 	.word	0x40020070
 8001dec:	40020088 	.word	0x40020088
 8001df0:	400200a0 	.word	0x400200a0
 8001df4:	400200b8 	.word	0x400200b8
 8001df8:	40020410 	.word	0x40020410
 8001dfc:	40020428 	.word	0x40020428
 8001e00:	40020440 	.word	0x40020440
 8001e04:	40020458 	.word	0x40020458
 8001e08:	40020470 	.word	0x40020470
 8001e0c:	40020488 	.word	0x40020488
 8001e10:	400204a0 	.word	0x400204a0
 8001e14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020e 	bic.w	r2, r2, #14
 8001e26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_DMA_Abort_IT+0x3a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04a      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <HAL_DMA_Abort_IT+0x3ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_DMA_Abort_IT+0x3b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d040      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a68      	ldr	r2, [pc, #416]	; (8001fec <HAL_DMA_Abort_IT+0x3b4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03b      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a66      	ldr	r2, [pc, #408]	; (8001ff0 <HAL_DMA_Abort_IT+0x3b8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d036      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a65      	ldr	r2, [pc, #404]	; (8001ff4 <HAL_DMA_Abort_IT+0x3bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_DMA_Abort_IT+0x3c0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02c      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a62      	ldr	r2, [pc, #392]	; (8001ffc <HAL_DMA_Abort_IT+0x3c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_DMA_Abort_IT+0x3c8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_DMA_Abort_IT+0x3cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_DMA_Abort_IT+0x3d0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5c      	ldr	r2, [pc, #368]	; (800200c <HAL_DMA_Abort_IT+0x3d4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_DMA_Abort_IT+0x3d8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a59      	ldr	r2, [pc, #356]	; (8002014 <HAL_DMA_Abort_IT+0x3dc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_DMA_Abort_IT+0x3e0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x290>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a56      	ldr	r2, [pc, #344]	; (800201c <HAL_DMA_Abort_IT+0x3e4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <HAL_DMA_Abort_IT+0x2a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e007      	b.n	8001eea <HAL_DMA_Abort_IT+0x2b2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a3c      	ldr	r2, [pc, #240]	; (8001fe0 <HAL_DMA_Abort_IT+0x3a8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d072      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_DMA_Abort_IT+0x3ac>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d06d      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_DMA_Abort_IT+0x3b0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d068      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a37      	ldr	r2, [pc, #220]	; (8001fec <HAL_DMA_Abort_IT+0x3b4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d063      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_DMA_Abort_IT+0x3b8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d05e      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <HAL_DMA_Abort_IT+0x3bc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d059      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a33      	ldr	r2, [pc, #204]	; (8001ff8 <HAL_DMA_Abort_IT+0x3c0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d054      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <HAL_DMA_Abort_IT+0x3c4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d04f      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a30      	ldr	r2, [pc, #192]	; (8002000 <HAL_DMA_Abort_IT+0x3c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d04a      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <HAL_DMA_Abort_IT+0x3cc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d045      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <HAL_DMA_Abort_IT+0x3d0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d040      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <HAL_DMA_Abort_IT+0x3d4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d03b      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <HAL_DMA_Abort_IT+0x3d8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d036      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a28      	ldr	r2, [pc, #160]	; (8002014 <HAL_DMA_Abort_IT+0x3dc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a27      	ldr	r2, [pc, #156]	; (8002018 <HAL_DMA_Abort_IT+0x3e0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d02c      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <HAL_DMA_Abort_IT+0x3e4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d027      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_DMA_Abort_IT+0x3e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d022      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_DMA_Abort_IT+0x3ec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01d      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_DMA_Abort_IT+0x3f0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d018      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_DMA_Abort_IT+0x3f4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_DMA_Abort_IT+0x3f8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00e      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_DMA_Abort_IT+0x3fc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_DMA_Abort_IT+0x400>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d004      	beq.n	8001fda <HAL_DMA_Abort_IT+0x3a2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_DMA_Abort_IT+0x404>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d132      	bne.n	8002040 <HAL_DMA_Abort_IT+0x408>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e031      	b.n	8002042 <HAL_DMA_Abort_IT+0x40a>
 8001fde:	bf00      	nop
 8001fe0:	40020010 	.word	0x40020010
 8001fe4:	40020028 	.word	0x40020028
 8001fe8:	40020040 	.word	0x40020040
 8001fec:	40020058 	.word	0x40020058
 8001ff0:	40020070 	.word	0x40020070
 8001ff4:	40020088 	.word	0x40020088
 8001ff8:	400200a0 	.word	0x400200a0
 8001ffc:	400200b8 	.word	0x400200b8
 8002000:	40020410 	.word	0x40020410
 8002004:	40020428 	.word	0x40020428
 8002008:	40020440 	.word	0x40020440
 800200c:	40020458 	.word	0x40020458
 8002010:	40020470 	.word	0x40020470
 8002014:	40020488 	.word	0x40020488
 8002018:	400204a0 	.word	0x400204a0
 800201c:	400204b8 	.word	0x400204b8
 8002020:	58025408 	.word	0x58025408
 8002024:	5802541c 	.word	0x5802541c
 8002028:	58025430 	.word	0x58025430
 800202c:	58025444 	.word	0x58025444
 8002030:	58025458 	.word	0x58025458
 8002034:	5802546c 	.word	0x5802546c
 8002038:	58025480 	.word	0x58025480
 800203c:	58025494 	.word	0x58025494
 8002040:	2300      	movs	r3, #0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d028      	beq.n	8002098 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002074:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002096:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop

080020c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0cf      	b.n	8002276 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2223      	movs	r2, #35	; 0x23
 80020e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fe2f 	bl	8000d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_ETH_Init+0x1bc>)
 80020f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f4:	4a62      	ldr	r2, [pc, #392]	; (8002280 <HAL_ETH_Init+0x1bc>)
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020fe:	4b60      	ldr	r3, [pc, #384]	; (8002280 <HAL_ETH_Init+0x1bc>)
 8002100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7a1b      	ldrb	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff f94d 	bl	80013b4 <HAL_SYSCFG_ETHInterfaceSelect>
 800211a:	e003      	b.n	8002124 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800211c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002120:	f7ff f948 	bl	80013b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002124:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_ETH_Init+0x1c0>)
 8002126:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002140:	f7ff f908 	bl	8001354 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002146:	e011      	b.n	800216c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002148:	f7ff f904 	bl	8001354 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002156:	d909      	bls.n	800216c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	22e0      	movs	r2, #224	; 0xe0
 8002164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e084      	b.n	8002276 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e4      	bne.n	8002148 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f886 	bl	8002290 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002184:	f001 fcc8 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8002188:	4603      	mov	r3, r0
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_ETH_Init+0x1c4>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9a      	lsrs	r2, r3, #18
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3a01      	subs	r2, #1
 8002198:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fa71 	bl	8002684 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80021ae:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	22e0      	movs	r2, #224	; 0xe0
 80021da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e049      	b.n	8002276 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_ETH_Init+0x1c8>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6952      	ldr	r2, [r2, #20]
 80021f6:	0051      	lsls	r1, r2, #1
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002202:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fad9 	bl	80027be <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fb1f 	bl	8002850 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	3305      	adds	r3, #5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021a      	lsls	r2, r3, #8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	3303      	adds	r3, #3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	061a      	lsls	r2, r3, #24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	3302      	adds	r3, #2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	3301      	adds	r3, #1
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002250:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800225e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002260:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2210      	movs	r2, #16
 8002270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	58024400 	.word	0x58024400
 8002284:	58000400 	.word	0x58000400
 8002288:	431bde83 	.word	0x431bde83
 800228c:	ffff8001 	.word	0xffff8001

08002290 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022aa:	f001 fc35 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 80022ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d908      	bls.n	80022ca <HAL_ETH_SetMDIOClockRange+0x3a>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d804      	bhi.n	80022ca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e027      	b.n	800231a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d908      	bls.n	80022e4 <HAL_ETH_SetMDIOClockRange+0x54>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d204      	bcs.n	80022e4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e01a      	b.n	800231a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d303      	bcc.n	80022f4 <HAL_ETH_SetMDIOClockRange+0x64>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d911      	bls.n	8002318 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d908      	bls.n	800230e <HAL_ETH_SetMDIOClockRange+0x7e>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d804      	bhi.n	800230e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e005      	b.n	800231a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e000      	b.n	800231a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002318:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	01312cff 	.word	0x01312cff
 8002330:	02160ebf 	.word	0x02160ebf
 8002334:	03938700 	.word	0x03938700
 8002338:	05f5e0ff 	.word	0x05f5e0ff
 800233c:	08f0d17f 	.word	0x08f0d17f

08002340 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	791b      	ldrb	r3, [r3, #4]
 8002358:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800235a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	7b1b      	ldrb	r3, [r3, #12]
 8002360:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	7b5b      	ldrb	r3, [r3, #13]
 8002368:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800236a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	7b9b      	ldrb	r3, [r3, #14]
 8002370:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	7bdb      	ldrb	r3, [r3, #15]
 8002378:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800237a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	7c12      	ldrb	r2, [r2, #16]
 8002380:	2a00      	cmp	r2, #0
 8002382:	d102      	bne.n	800238a <ETH_SetMACConfig+0x4a>
 8002384:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x4c>
 800238a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800238c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	7c52      	ldrb	r2, [r2, #17]
 8002392:	2a00      	cmp	r2, #0
 8002394:	d102      	bne.n	800239c <ETH_SetMACConfig+0x5c>
 8002396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800239a:	e000      	b.n	800239e <ETH_SetMACConfig+0x5e>
 800239c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800239e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	7c9b      	ldrb	r3, [r3, #18]
 80023a4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023a6:	431a      	orrs	r2, r3
               macconf->Speed |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80023ac:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80023b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7f1b      	ldrb	r3, [r3, #28]
 80023b8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7f5b      	ldrb	r3, [r3, #29]
 80023c0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80023c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	7f92      	ldrb	r2, [r2, #30]
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d102      	bne.n	80023d2 <ETH_SetMACConfig+0x92>
 80023cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d0:	e000      	b.n	80023d4 <ETH_SetMACConfig+0x94>
 80023d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80023d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7fdb      	ldrb	r3, [r3, #31]
 80023da:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80023dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d102      	bne.n	80023ee <ETH_SetMACConfig+0xae>
 80023e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ec:	e000      	b.n	80023f0 <ETH_SetMACConfig+0xb0>
 80023ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023f0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023fe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002400:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <ETH_SetMACConfig+0x22c>)
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	430b      	orrs	r3, r1
 800241c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800242a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800242c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002434:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800243e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002440:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002448:	2a00      	cmp	r2, #0
 800244a:	d102      	bne.n	8002452 <ETH_SetMACConfig+0x112>
 800244c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002450:	e000      	b.n	8002454 <ETH_SetMACConfig+0x114>
 8002452:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002454:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <ETH_SetMACConfig+0x230>)
 8002466:	4013      	ands	r3, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	430b      	orrs	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002478:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <ETH_SetMACConfig+0x234>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	430b      	orrs	r3, r1
 8002494:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800249c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d101      	bne.n	80024b2 <ETH_SetMACConfig+0x172>
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x174>
 80024b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80024b4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80024dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80024e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f023 0103 	bic.w	r1, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800250a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002526:	2a00      	cmp	r2, #0
 8002528:	d101      	bne.n	800252e <ETH_SetMACConfig+0x1ee>
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	e000      	b.n	8002530 <ETH_SetMACConfig+0x1f0>
 800252e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002530:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002538:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800253a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002542:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002550:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	430a      	orrs	r2, r1
 800255c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	00048083 	.word	0x00048083
 8002570:	c0f88000 	.word	0xc0f88000
 8002574:	fffffef0 	.word	0xfffffef0

08002578 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b38      	ldr	r3, [pc, #224]	; (8002670 <ETH_SetDMAConfig+0xf8>)
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800259e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7b1b      	ldrb	r3, [r3, #12]
 80025b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <ETH_SetDMAConfig+0xfc>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	430b      	orrs	r3, r1
 80025cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025d0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	7b5b      	ldrb	r3, [r3, #13]
 80025d6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <ETH_SetDMAConfig+0x100>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	7d1b      	ldrb	r3, [r3, #20]
 8002608:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800260a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7f5b      	ldrb	r3, [r3, #29]
 8002610:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <ETH_SetDMAConfig+0x104>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	430b      	orrs	r3, r1
 800262e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002632:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	7f1b      	ldrb	r3, [r3, #28]
 800263a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <ETH_SetDMAConfig+0x108>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	430b      	orrs	r3, r1
 800265c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002660:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	ffff87fd 	.word	0xffff87fd
 8002674:	ffff2ffe 	.word	0xffff2ffe
 8002678:	fffec000 	.word	0xfffec000
 800267c:	ffc0efef 	.word	0xffc0efef
 8002680:	7fc0ffff 	.word	0x7fc0ffff

08002684 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0a4      	sub	sp, #144	; 0x90
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002692:	2300      	movs	r3, #0
 8002694:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80026dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80026fe:	2300      	movs	r3, #0
 8002700:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002702:	2300      	movs	r3, #0
 8002704:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002706:	2300      	movs	r3, #0
 8002708:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800271c:	2320      	movs	r3, #32
 800271e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800272e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002738:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800275e:	2300      	movs	r3, #0
 8002760:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fde6 	bl	8002340 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002774:	2301      	movs	r3, #1
 8002776:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800278e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002792:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800279c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80027a4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fee1 	bl	8002578 <ETH_SetDMAConfig>
}
 80027b6:	bf00      	nop
 80027b8:	3790      	adds	r7, #144	; 0x90
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e01d      	b.n	8002808 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	3206      	adds	r2, #6
 80027fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3301      	adds	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d9de      	bls.n	80027cc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	461a      	mov	r2, r3
 800281e:	2303      	movs	r3, #3
 8002820:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002840:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e023      	b.n	80028a6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	3212      	adds	r2, #18
 800289c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d9d8      	bls.n	800285e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d2:	461a      	mov	r2, r3
 80028d4:	2303      	movs	r3, #3
 80028d6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800291a:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <HAL_GPIO_Init+0x228>)
 800291c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800291e:	e18c      	b.n	8002c3a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 817e 	beq.w	8002c34 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d005      	beq.n	8002950 <HAL_GPIO_Init+0x44>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d130      	bne.n	80029b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002986:	2201      	movs	r2, #1
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0201 	and.w	r2, r3, #1
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d017      	beq.n	80029ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d123      	bne.n	8002a42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d8 	beq.w	8002c34 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x22c>)
 8002a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_GPIO_Init+0x22c>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_GPIO_Init+0x22c>)
 8002a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_GPIO_Init+0x230>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_GPIO_Init+0x234>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d04a      	beq.n	8002b64 <HAL_GPIO_Init+0x258>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_GPIO_Init+0x238>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_GPIO_Init+0x23c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_GPIO_Init+0x240>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_GPIO_Init+0x244>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x248>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_GPIO_Init+0x24c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_GPIO_Init+0x250>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x20a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <HAL_GPIO_Init+0x254>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x206>
 8002b0e:	2309      	movs	r3, #9
 8002b10:	e029      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b12:	230a      	movs	r3, #10
 8002b14:	e027      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b16:	2307      	movs	r3, #7
 8002b18:	e025      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e023      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e021      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e01f      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e01d      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e01b      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e019      	b.n	8002b66 <HAL_GPIO_Init+0x25a>
 8002b32:	bf00      	nop
 8002b34:	58000080 	.word	0x58000080
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	58000400 	.word	0x58000400
 8002b40:	58020000 	.word	0x58020000
 8002b44:	58020400 	.word	0x58020400
 8002b48:	58020800 	.word	0x58020800
 8002b4c:	58020c00 	.word	0x58020c00
 8002b50:	58021000 	.word	0x58021000
 8002b54:	58021400 	.word	0x58021400
 8002b58:	58021800 	.word	0x58021800
 8002b5c:	58021c00 	.word	0x58021c00
 8002b60:	58022400 	.word	0x58022400
 8002b64:	2300      	movs	r3, #0
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f002 0203 	and.w	r2, r2, #3
 8002b6c:	0092      	lsls	r2, r2, #2
 8002b6e:	4093      	lsls	r3, r2
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b76:	4938      	ldr	r1, [pc, #224]	; (8002c58 <HAL_GPIO_Init+0x34c>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	3301      	adds	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f ae6b 	bne.w	8002920 <HAL_GPIO_Init+0x14>
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	3724      	adds	r7, #36	; 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	58000400 	.word	0x58000400

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c78:	e003      	b.n	8002c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	619a      	str	r2, [r3, #24]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_PWREx_ConfigSupply+0x70>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00a      	beq.n	8002cba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_PWREx_ConfigSupply+0x70>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e01f      	b.n	8002cf6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e01d      	b.n	8002cf6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_PWREx_ConfigSupply+0x70>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	490f      	ldr	r1, [pc, #60]	; (8002d00 <HAL_PWREx_ConfigSupply+0x70>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cca:	f7fe fb43 	bl	8001354 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cd0:	e009      	b.n	8002ce6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cd2:	f7fe fb3f 	bl	8001354 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_PWREx_ConfigSupply+0x70>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	58024800 	.word	0x58024800

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e3c8      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8087 	beq.w	8002e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d2e:	4b86      	ldr	r3, [pc, #536]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d007      	beq.n	8002d4a <HAL_RCC_OscConfig+0x46>
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	2b18      	cmp	r3, #24
 8002d3e:	d110      	bne.n	8002d62 <HAL_RCC_OscConfig+0x5e>
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x12c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d168      	bne.n	8002e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e3a2      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x76>
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e02e      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a70      	ldr	r2, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6d      	ldr	r2, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xbc>
 8002da6:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a64      	ldr	r2, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a60      	ldr	r2, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fab8 	bl	8001354 <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fab4 	bl	8001354 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e356      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe4>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe faa4 	bl	8001354 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe faa0 	bl	8001354 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e342      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x10c>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 808c 	beq.w	8002f58 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_RCC_OscConfig+0x162>
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b18      	cmp	r3, #24
 8002e5a:	d137      	bne.n	8002ecc <HAL_RCC_OscConfig+0x1c8>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d132      	bne.n	8002ecc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e314      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0219 	bic.w	r2, r3, #25
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	492f      	ldr	r1, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fa60 	bl	8001354 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe fa5c 	bl	8001354 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e2fe      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	4920      	ldr	r1, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eca:	e045      	b.n	8002f58 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d026      	beq.n	8002f22 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 0219 	bic.w	r2, r3, #25
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4919      	ldr	r1, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fa35 	bl	8001354 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fa31 	bl	8001354 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e2d3      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	490b      	ldr	r1, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e01a      	b.n	8002f58 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fa11 	bl	8001354 <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe fa0d 	bl	8001354 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d903      	bls.n	8002f4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e2af      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
 8002f48:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d06a      	beq.n	800303a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f64:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f6e:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d007      	beq.n	8002f8a <HAL_RCC_OscConfig+0x286>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b18      	cmp	r3, #24
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2b4>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f8a:	4b87      	ldr	r3, [pc, #540]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x29e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e282      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fa2:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	497d      	ldr	r1, [pc, #500]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb6:	e040      	b.n	800303a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fc0:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a78      	ldr	r2, [pc, #480]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f9c2 	bl	8001354 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fd4:	f7fe f9be 	bl	8001354 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e260      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	4969      	ldr	r1, [pc, #420]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60cb      	str	r3, [r1, #12]
 8003006:	e018      	b.n	800303a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003008:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800300e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe f99e 	bl	8001354 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800301c:	f7fe f99a 	bl	8001354 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e23c      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800302e:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	4a55      	ldr	r2, [pc, #340]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe f97b 	bl	8001354 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe f977 	bl	8001354 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e219      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x35e>
 8003080:	e018      	b.n	80030b4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003082:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f961 	bl	8001354 <HAL_GetTick>
 8003092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe f95d 	bl	8001354 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1ff      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a8:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d036      	beq.n	800312e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c8:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a36      	ldr	r2, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 80030ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030d4:	f7fe f93e 	bl	8001354 <HAL_GetTick>
 80030d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030dc:	f7fe f93a 	bl	8001354 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1dc      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030ee:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x3d8>
 80030fa:	e018      	b.n	800312e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003106:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003108:	f7fe f924 	bl	8001354 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003110:	f7fe f920 	bl	8001354 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1c2      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8086 	beq.w	8003248 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x4a8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <HAL_RCC_OscConfig+0x4a8>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003148:	f7fe f904 	bl	8001354 <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fe f900 	bl	8001354 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1a2      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCC_OscConfig+0x4a8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <HAL_RCC_OscConfig+0x480>
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	e032      	b.n	80031ea <HAL_RCC_OscConfig+0x4e6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d111      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4ac>
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a02      	ldr	r2, [pc, #8]	; (80031a8 <HAL_RCC_OscConfig+0x4a4>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	e021      	b.n	80031ea <HAL_RCC_OscConfig+0x4e6>
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58024800 	.word	0x58024800
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4ce>
 80031b8:	4b83      	ldr	r3, [pc, #524]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a82      	ldr	r2, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a7f      	ldr	r2, [pc, #508]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	e00b      	b.n	80031ea <HAL_RCC_OscConfig+0x4e6>
 80031d2:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a7c      	ldr	r2, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a79      	ldr	r2, [pc, #484]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d015      	beq.n	800321e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fe f8af 	bl	8001354 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe f8ab 	bl	8001354 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e14b      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003210:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ee      	beq.n	80031fa <HAL_RCC_OscConfig+0x4f6>
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe f899 	bl	8001354 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f895 	bl	8001354 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e135      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 812a 	beq.w	80034a6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003252:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800325a:	2b18      	cmp	r3, #24
 800325c:	f000 80ba 	beq.w	80033d4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2b02      	cmp	r3, #2
 8003266:	f040 8095 	bne.w	8003394 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b57      	ldr	r3, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe f86d 	bl	8001354 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe f869 	bl	8001354 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10b      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003290:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329c:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800329e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x6c8>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	430a      	orrs	r2, r1
 80032b0:	4945      	ldr	r1, [pc, #276]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	628b      	str	r3, [r1, #40]	; 0x28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	3b01      	subs	r3, #1
 80032bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	3b01      	subs	r3, #1
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	3b01      	subs	r3, #1
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	3b01      	subs	r3, #1
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032e6:	4938      	ldr	r1, [pc, #224]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4a35      	ldr	r2, [pc, #212]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80032fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x6cc>)
 80032fe:	4013      	ands	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003304:	00d2      	lsls	r2, r2, #3
 8003306:	4930      	ldr	r1, [pc, #192]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f023 020c 	bic.w	r2, r3, #12
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	492b      	ldr	r1, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f023 0202 	bic.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4927      	ldr	r1, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800334e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fff2 	bl	8001354 <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd ffee 	bl	8001354 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e090      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x670>
 8003392:	e088      	b.n	80034a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd ffd8 	bl	8001354 <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd ffd4 	bl	8001354 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e076      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x6c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a4>
 80033c6:	e06e      	b.n	80034a6 <HAL_RCC_OscConfig+0x7a2>
 80033c8:	58024400 	.word	0x58024400
 80033cc:	fffffc0c 	.word	0xfffffc0c
 80033d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033d4:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033da:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d031      	beq.n	800344c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d12a      	bne.n	800344c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d122      	bne.n	800344c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d11a      	bne.n	800344c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0a5b      	lsrs	r3, r3, #9
 800341a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d111      	bne.n	800344c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d108      	bne.n	800344c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0e1b      	lsrs	r3, r3, #24
 800343e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e02b      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	08db      	lsrs	r3, r3, #3
 8003456:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800345a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	429a      	cmp	r2, r3
 8003464:	d01f      	beq.n	80034a6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003472:	f7fd ff6f 	bl	8001354 <HAL_GetTick>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003478:	bf00      	nop
 800347a:	f7fd ff6b 	bl	8001354 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	4293      	cmp	r3, r2
 8003484:	d0f9      	beq.n	800347a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 8003488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_OscConfig+0x7b0>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003492:	00d2      	lsls	r2, r2, #3
 8003494:	4906      	ldr	r1, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 8003496:	4313      	orrs	r3, r2
 8003498:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_RCC_OscConfig+0x7ac>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3730      	adds	r7, #48	; 0x30
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	58024400 	.word	0x58024400
 80034b4:	ffff0007 	.word	0xffff0007

080034b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e19c      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 020f 	bic.w	r2, r3, #15
 80034e2:	4985      	ldr	r1, [pc, #532]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b83      	ldr	r3, [pc, #524]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e184      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003514:	429a      	cmp	r2, r3
 8003516:	d908      	bls.n	800352a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003518:	4b78      	ldr	r3, [pc, #480]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4975      	ldr	r1, [pc, #468]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003526:	4313      	orrs	r3, r2
 8003528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b70      	ldr	r3, [pc, #448]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003542:	429a      	cmp	r2, r3
 8003544:	d908      	bls.n	8003558 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003546:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	496a      	ldr	r1, [pc, #424]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	4b64      	ldr	r3, [pc, #400]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003570:	429a      	cmp	r2, r3
 8003572:	d908      	bls.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	495e      	ldr	r1, [pc, #376]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003582:	4313      	orrs	r3, r2
 8003584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800359e:	429a      	cmp	r2, r3
 80035a0:	d908      	bls.n	80035b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035a2:	4b56      	ldr	r3, [pc, #344]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4953      	ldr	r1, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d908      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f023 020f 	bic.w	r2, r3, #15
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4947      	ldr	r1, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d055      	beq.n	800369a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4940      	ldr	r1, [pc, #256]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003608:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d121      	bne.n	8003658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0f6      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d107      	bne.n	8003630 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d115      	bne.n	8003658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0ea      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0de      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0d6      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4925      	ldr	r1, [pc, #148]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 8003666:	4313      	orrs	r3, r2
 8003668:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366a:	f7fd fe73 	bl	8001354 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003670:	e00a      	b.n	8003688 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003672:	f7fd fe6f 	bl	8001354 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0be      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	429a      	cmp	r2, r3
 8003698:	d1eb      	bne.n	8003672 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d208      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f023 020f 	bic.w	r2, r3, #15
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x244>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d214      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 020f 	bic.w	r2, r3, #15
 80036de:	4906      	ldr	r1, [pc, #24]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e086      	b.n	8003806 <HAL_RCC_ClockConfig+0x34e>
 80036f8:	52002000 	.word	0x52002000
 80036fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003718:	429a      	cmp	r2, r3
 800371a:	d208      	bcs.n	800372e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800371c:	4b3c      	ldr	r3, [pc, #240]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4939      	ldr	r1, [pc, #228]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800372a:	4313      	orrs	r3, r2
 800372c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003746:	429a      	cmp	r2, r3
 8003748:	d208      	bcs.n	800375c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800374a:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	492e      	ldr	r1, [pc, #184]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003774:	429a      	cmp	r2, r3
 8003776:	d208      	bcs.n	800378a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4922      	ldr	r1, [pc, #136]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 8003786:	4313      	orrs	r3, r2
 8003788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d208      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4917      	ldr	r1, [pc, #92]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b8:	f000 f834 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	4912      	ldr	r1, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x35c>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_RCC_ClockConfig+0x358>)
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_RCC_ClockConfig+0x35c>)
 80037e0:	5cd3      	ldrb	r3, [r2, r3]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x360>)
 80037ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x364>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_ClockConfig+0x368>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fd60 	bl	80012c0 <HAL_InitTick>
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400
 8003814:	08008250 	.word	0x08008250
 8003818:	24000018 	.word	0x24000018
 800381c:	24000014 	.word	0x24000014
 8003820:	2400001c 	.word	0x2400001c

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382a:	4bb3      	ldr	r3, [pc, #716]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003832:	2b18      	cmp	r3, #24
 8003834:	f200 8155 	bhi.w	8003ae2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <HAL_RCC_GetSysClockFreq+0x1c>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	080038a5 	.word	0x080038a5
 8003844:	08003ae3 	.word	0x08003ae3
 8003848:	08003ae3 	.word	0x08003ae3
 800384c:	08003ae3 	.word	0x08003ae3
 8003850:	08003ae3 	.word	0x08003ae3
 8003854:	08003ae3 	.word	0x08003ae3
 8003858:	08003ae3 	.word	0x08003ae3
 800385c:	08003ae3 	.word	0x08003ae3
 8003860:	080038cb 	.word	0x080038cb
 8003864:	08003ae3 	.word	0x08003ae3
 8003868:	08003ae3 	.word	0x08003ae3
 800386c:	08003ae3 	.word	0x08003ae3
 8003870:	08003ae3 	.word	0x08003ae3
 8003874:	08003ae3 	.word	0x08003ae3
 8003878:	08003ae3 	.word	0x08003ae3
 800387c:	08003ae3 	.word	0x08003ae3
 8003880:	080038d1 	.word	0x080038d1
 8003884:	08003ae3 	.word	0x08003ae3
 8003888:	08003ae3 	.word	0x08003ae3
 800388c:	08003ae3 	.word	0x08003ae3
 8003890:	08003ae3 	.word	0x08003ae3
 8003894:	08003ae3 	.word	0x08003ae3
 8003898:	08003ae3 	.word	0x08003ae3
 800389c:	08003ae3 	.word	0x08003ae3
 80038a0:	080038d7 	.word	0x080038d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a4:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b0:	4b91      	ldr	r3, [pc, #580]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	4a90      	ldr	r2, [pc, #576]	; (8003afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038c2:	e111      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038c4:	4b8d      	ldr	r3, [pc, #564]	; (8003afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038c6:	61bb      	str	r3, [r7, #24]
      break;
 80038c8:	e10e      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038ca:	4b8d      	ldr	r3, [pc, #564]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038cc:	61bb      	str	r3, [r7, #24]
      break;
 80038ce:	e10b      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038d0:	4b8c      	ldr	r3, [pc, #560]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038d2:	61bb      	str	r3, [r7, #24]
      break;
 80038d4:	e108      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038d6:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038e0:	4b85      	ldr	r3, [pc, #532]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038ec:	4b82      	ldr	r3, [pc, #520]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038f6:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	08db      	lsrs	r3, r3, #3
 80038fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80e1 	beq.w	8003adc <HAL_RCC_GetSysClockFreq+0x2b8>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b02      	cmp	r3, #2
 800391e:	f000 8083 	beq.w	8003a28 <HAL_RCC_GetSysClockFreq+0x204>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f200 80a1 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x248>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x114>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d056      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003936:	e099      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003938:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02d      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003944:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	4a6b      	ldr	r2, [pc, #428]	; (8003afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800399e:	e087      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e2:	e065      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a26:	e043      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a6a:	e021      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	0a5b      	lsrs	r3, r3, #9
 8003ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aba:	3301      	adds	r3, #1
 8003abc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad4:	ee17 3a90 	vmov	r3, s15
 8003ad8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ae4:	61bb      	str	r3, [r7, #24]
      break;
 8003ae6:	bf00      	nop
  }

  return sysclockfreq;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	03d09000 	.word	0x03d09000
 8003b00:	003d0900 	.word	0x003d0900
 8003b04:	007a1200 	.word	0x007a1200
 8003b08:	46000000 	.word	0x46000000
 8003b0c:	4c742400 	.word	0x4c742400
 8003b10:	4a742400 	.word	0x4a742400
 8003b14:	4af42400 	.word	0x4af42400

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b1e:	f7ff fe81 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490f      	ldr	r1, [pc, #60]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	08008250 	.word	0x08008250
 8003b70:	24000018 	.word	0x24000018
 8003b74:	24000014 	.word	0x24000014

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b7c:	f7ff ffcc 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	08008250 	.word	0x08008250

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ba8:	f7ff ffb6 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	08008250 	.word	0x08008250

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b0c6      	sub	sp, #280	; 0x118
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	ea54 0305 	orrs.w	r3, r4, r5
 8003bfa:	d049      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c06:	d02f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c12:	d01a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d007      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c24:	e01c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c26:	4bab      	ldr	r3, [pc, #684]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4aaa      	ldr	r2, [pc, #680]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c32:	e01a      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fc25 	bl	800548c <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c48:	e00f      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fccc 	bl	80055f0 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c72:	4b98      	ldr	r3, [pc, #608]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c80:	4a94      	ldr	r2, [pc, #592]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6513      	str	r3, [r2, #80]	; 0x50
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c9c:	f04f 0900 	mov.w	r9, #0
 8003ca0:	ea58 0309 	orrs.w	r3, r8, r9
 8003ca4:	d047      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d82a      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003ccd 	.word	0x08003ccd
 8003cbc:	08003cdb 	.word	0x08003cdb
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003d0f 	.word	0x08003d0f
 8003cc8:	08003d0f 	.word	0x08003d0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ccc:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4a80      	ldr	r2, [pc, #512]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e01a      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cde:	3308      	adds	r3, #8
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 fbd2 	bl	800548c <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cee:	e00f      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf4:	3328      	adds	r3, #40	; 0x28
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fc79 	bl	80055f0 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d18:	4b6e      	ldr	r3, [pc, #440]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	f023 0107 	bic.w	r1, r3, #7
 8003d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	4a6b      	ldr	r2, [pc, #428]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003d42:	f04f 0b00 	mov.w	fp, #0
 8003d46:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d54:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003d58:	d03b      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003d5a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003d5e:	d834      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d64:	d037      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d6a:	d82e      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d70:	d033      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d76:	d828      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7c:	d01a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d822      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d8e:	e01c      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e01e      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da2:	3308      	adds	r3, #8
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fb70 	bl	800548c <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003db2:	e013      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db8:	3328      	adds	r3, #40	; 0x28
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fc17 	bl	80055f0 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e008      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003de4:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df4:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfa:	e003      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d05d      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e2c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e30:	d03b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003e32:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e36:	d834      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e3c:	d037      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e42:	d82e      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e48:	d033      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003e4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e4e:	d828      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e54:	d01a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5a:	d822      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e64:	d007      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e66:	e01c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e74:	e01e      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fb04 	bl	800548c <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e8a:	e013      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e90:	3328      	adds	r3, #40	; 0x28
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 fbab 	bl	80055f0 <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ea8:	e004      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eaa:	bf00      	nop
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ecc:	4a01      	ldr	r2, [pc, #4]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003edc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003eec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ef6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d03a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d819      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d00c      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d815      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d019      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d111      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1e:	4baa      	ldr	r3, [pc, #680]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4aa9      	ldr	r2, [pc, #676]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f2a:	e011      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f30:	3308      	adds	r3, #8
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 faa9 	bl	800548c <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f58:	4b9b      	ldr	r3, [pc, #620]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	4a98      	ldr	r2, [pc, #608]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d051      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa0:	d035      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa6:	d82e      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fac:	d031      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003fae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb2:	d828      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbe:	d822      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d007      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003fca:	e01c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fcc:	4b7e      	ldr	r3, [pc, #504]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a7d      	ldr	r2, [pc, #500]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e01c      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fde:	3308      	adds	r3, #8
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fa52 	bl	800548c <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff4:	3328      	adds	r3, #40	; 0x28
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 faf9 	bl	80055f0 <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800401c:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	4a67      	ldr	r2, [pc, #412]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6513      	str	r3, [r2, #80]	; 0x50
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004036:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800403a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004050:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d053      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004064:	d033      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406a:	d82c      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800406c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004070:	d02f      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004076:	d826      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800407c:	d02b      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800407e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004082:	d820      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d012      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800408a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408e:	d81a      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d022      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d115      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409e:	3308      	adds	r3, #8
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f9f2 	bl	800548c <RCCEx_PLL2_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040ae:	e015      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b4:	3328      	adds	r3, #40	; 0x28
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fa99 	bl	80055f0 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040c4:	e00a      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040ce:	bf00      	nop
 80040d0:	e004      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040e4:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	4a35      	ldr	r2, [pc, #212]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6513      	str	r3, [r2, #80]	; 0x50
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800410e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004118:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d058      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800412a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412e:	d033      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004134:	d82c      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d02f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d826      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004146:	d02b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800414c:	d820      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800414e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004152:	d012      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004158:	d81a      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d022      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800415e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004162:	d115      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004168:	3308      	adds	r3, #8
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f001 f98d 	bl	800548c <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004178:	e015      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417e:	3328      	adds	r3, #40	; 0x28
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fa34 	bl	80055f0 <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800418e:	e00a      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004196:	e006      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004198:	bf00      	nop
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10e      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041be:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041c6:	bf00      	nop
 80041c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	d037      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fe:	d00e      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004204:	d816      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800420a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800420e:	d111      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004210:	4bc4      	ldr	r3, [pc, #784]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4ac3      	ldr	r2, [pc, #780]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004222:	3308      	adds	r3, #8
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f930 	bl	800548c <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004246:	4bb7      	ldr	r3, [pc, #732]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004254:	4ab3      	ldr	r2, [pc, #716]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004256:	430b      	orrs	r3, r1
 8004258:	6513      	str	r3, [r2, #80]	; 0x50
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800427a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d039      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	2b03      	cmp	r3, #3
 800428c:	d81c      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042d1 	.word	0x080042d1
 8004298:	080042a5 	.word	0x080042a5
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	080042d1 	.word	0x080042d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b9f      	ldr	r3, [pc, #636]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a9e      	ldr	r2, [pc, #632]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b6:	3308      	adds	r3, #8
 80042b8:	2102      	movs	r1, #2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f8e6 	bl	800548c <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042c6:	e004      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042da:	4b92      	ldr	r3, [pc, #584]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	f023 0103 	bic.w	r1, r3, #3
 80042e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e8:	4a8e      	ldr	r2, [pc, #568]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ea:	430b      	orrs	r3, r1
 80042ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800430e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	f000 8099 	beq.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800431a:	4b83      	ldr	r3, [pc, #524]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a82      	ldr	r2, [pc, #520]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004326:	f7fd f815 	bl	8001354 <HAL_GetTick>
 800432a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800432e:	e00b      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004330:	f7fd f810 	bl	8001354 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b64      	cmp	r3, #100	; 0x64
 800433e:	d903      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004346:	e005      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004348:	4b77      	ldr	r3, [pc, #476]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ed      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004354:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004358:	2b00      	cmp	r3, #0
 800435a:	d173      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800435c:	4b71      	ldr	r3, [pc, #452]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800435e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004368:	4053      	eors	r3, r2
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d015      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004372:	4b6c      	ldr	r3, [pc, #432]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a68      	ldr	r2, [pc, #416]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800438a:	4b66      	ldr	r3, [pc, #408]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004396:	4a63      	ldr	r2, [pc, #396]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d118      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fc ffd2 	bl	8001354 <HAL_GetTick>
 80043b0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b4:	e00d      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fc ffcd 	bl	8001354 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80043d0:	e005      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0eb      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80043de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d129      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f6:	d10e      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80043f8:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004408:	091a      	lsrs	r2, r3, #4
 800440a:	4b48      	ldr	r3, [pc, #288]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800440c:	4013      	ands	r3, r2
 800440e:	4a45      	ldr	r2, [pc, #276]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6113      	str	r3, [r2, #16]
 8004414:	e005      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004416:	4b43      	ldr	r3, [pc, #268]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	4a42      	ldr	r2, [pc, #264]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004420:	6113      	str	r3, [r2, #16]
 8004422:	4b40      	ldr	r3, [pc, #256]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004424:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800442a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004434:	430b      	orrs	r3, r1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	e008      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800443a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800443e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004448:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f002 0301 	and.w	r3, r2, #1
 8004458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004462:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	f000 808f 	beq.w	800458c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800446e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	2b28      	cmp	r3, #40	; 0x28
 8004476:	d871      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	08004565 	.word	0x08004565
 8004484:	0800455d 	.word	0x0800455d
 8004488:	0800455d 	.word	0x0800455d
 800448c:	0800455d 	.word	0x0800455d
 8004490:	0800455d 	.word	0x0800455d
 8004494:	0800455d 	.word	0x0800455d
 8004498:	0800455d 	.word	0x0800455d
 800449c:	0800455d 	.word	0x0800455d
 80044a0:	08004531 	.word	0x08004531
 80044a4:	0800455d 	.word	0x0800455d
 80044a8:	0800455d 	.word	0x0800455d
 80044ac:	0800455d 	.word	0x0800455d
 80044b0:	0800455d 	.word	0x0800455d
 80044b4:	0800455d 	.word	0x0800455d
 80044b8:	0800455d 	.word	0x0800455d
 80044bc:	0800455d 	.word	0x0800455d
 80044c0:	08004547 	.word	0x08004547
 80044c4:	0800455d 	.word	0x0800455d
 80044c8:	0800455d 	.word	0x0800455d
 80044cc:	0800455d 	.word	0x0800455d
 80044d0:	0800455d 	.word	0x0800455d
 80044d4:	0800455d 	.word	0x0800455d
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	0800455d 	.word	0x0800455d
 80044e0:	08004565 	.word	0x08004565
 80044e4:	0800455d 	.word	0x0800455d
 80044e8:	0800455d 	.word	0x0800455d
 80044ec:	0800455d 	.word	0x0800455d
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	0800455d 	.word	0x0800455d
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	0800455d 	.word	0x0800455d
 8004500:	08004565 	.word	0x08004565
 8004504:	0800455d 	.word	0x0800455d
 8004508:	0800455d 	.word	0x0800455d
 800450c:	0800455d 	.word	0x0800455d
 8004510:	0800455d 	.word	0x0800455d
 8004514:	0800455d 	.word	0x0800455d
 8004518:	0800455d 	.word	0x0800455d
 800451c:	0800455d 	.word	0x0800455d
 8004520:	08004565 	.word	0x08004565
 8004524:	58024400 	.word	0x58024400
 8004528:	58024800 	.word	0x58024800
 800452c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004534:	3308      	adds	r3, #8
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f000 ffa7 	bl	800548c <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004544:	e00f      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454a:	3328      	adds	r3, #40	; 0x28
 800454c:	2101      	movs	r1, #1
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f84e 	bl	80055f0 <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800456e:	4bbf      	ldr	r3, [pc, #764]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800457a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457c:	4abb      	ldr	r2, [pc, #748]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800457e:	430b      	orrs	r3, r1
 8004580:	6553      	str	r3, [r2, #84]	; 0x54
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004588:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800458c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f002 0302 	and.w	r3, r2, #2
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d041      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d824      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	08004609 	.word	0x08004609
 80045c0:	080045d5 	.word	0x080045d5
 80045c4:	080045eb 	.word	0x080045eb
 80045c8:	08004609 	.word	0x08004609
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004609 	.word	0x08004609
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d8:	3308      	adds	r3, #8
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 ff55 	bl	800548c <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045e8:	e00f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ee:	3328      	adds	r3, #40	; 0x28
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fffc 	bl	80055f0 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045fe:	e004      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004612:	4b96      	ldr	r3, [pc, #600]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	f023 0107 	bic.w	r1, r3, #7
 800461a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004620:	4a92      	ldr	r2, [pc, #584]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6553      	str	r3, [r2, #84]	; 0x54
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800462c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 0304 	and.w	r3, r2, #4
 800463c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004646:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d044      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	2b05      	cmp	r3, #5
 800465a:	d825      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	080046b1 	.word	0x080046b1
 8004668:	0800467d 	.word	0x0800467d
 800466c:	08004693 	.word	0x08004693
 8004670:	080046b1 	.word	0x080046b1
 8004674:	080046b1 	.word	0x080046b1
 8004678:	080046b1 	.word	0x080046b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	3308      	adds	r3, #8
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 ff01 	bl	800548c <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004690:	e00f      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004696:	3328      	adds	r3, #40	; 0x28
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 ffa8 	bl	80055f0 <RCCEx_PLL3_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046a6:	e004      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80046b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f023 0107 	bic.w	r1, r3, #7
 80046c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	4a68      	ldr	r2, [pc, #416]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6593      	str	r3, [r2, #88]	; 0x58
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f002 0320 	and.w	r3, r2, #32
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d055      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80046fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004706:	d033      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800470c:	d82c      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d02f      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d826      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800471a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800471e:	d02b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004724:	d820      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472a:	d012      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004730:	d81a      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d022      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473a:	d115      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004740:	3308      	adds	r3, #8
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fea1 	bl	800548c <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004756:	3328      	adds	r3, #40	; 0x28
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f000 ff48 	bl	80055f0 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004766:	e00a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800476e:	e006      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004770:	bf00      	nop
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004774:	bf00      	nop
 8004776:	e002      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800478e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004796:	4a35      	ldr	r2, [pc, #212]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004798:	430b      	orrs	r3, r1
 800479a:	6553      	str	r3, [r2, #84]	; 0x54
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d058      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047d2:	d033      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80047d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047d8:	d82c      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d02f      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d826      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ea:	d02b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80047ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f0:	d820      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f6:	d012      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	d81a      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d022      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d115      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480c:	3308      	adds	r3, #8
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fe3b 	bl	800548c <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800481c:	e015      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800481e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004822:	3328      	adds	r3, #40	; 0x28
 8004824:	2102      	movs	r1, #2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fee2 	bl	80055f0 <RCCEx_PLL3_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004832:	e00a      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800483a:	e006      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800483c:	bf00      	nop
 800483e:	e004      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004840:	bf00      	nop
 8004842:	e002      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004844:	bf00      	nop
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10e      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800485a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004862:	4a02      	ldr	r2, [pc, #8]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004864:	430b      	orrs	r3, r1
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
 8004868:	e006      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800488e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d055      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800489c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048a4:	d033      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80048a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048aa:	d82c      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b0:	d02f      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	d826      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048bc:	d02b      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048c2:	d820      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c8:	d012      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80048ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ce:	d81a      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d022      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d8:	d115      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048de:	3308      	adds	r3, #8
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdd2 	bl	800548c <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048ee:	e015      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f4:	3328      	adds	r3, #40	; 0x28
 80048f6:	2102      	movs	r1, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fe79 	bl	80055f0 <RCCEx_PLL3_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004904:	e00a      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800490e:	bf00      	nop
 8004910:	e004      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004924:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004934:	4a9c      	ldr	r2, [pc, #624]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
 800493a:	e003      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f002 0308 	and.w	r3, r2, #8
 8004950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004954:	2300      	movs	r3, #0
 8004956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800495a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d01e      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d10c      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004976:	3328      	adds	r3, #40	; 0x28
 8004978:	2102      	movs	r1, #2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fe38 	bl	80055f0 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800498c:	4b86      	ldr	r3, [pc, #536]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499c:	4a82      	ldr	r2, [pc, #520]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f002 0310 	and.w	r3, r2, #16
 80049ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80049bc:	460b      	mov	r3, r1
 80049be:	4313      	orrs	r3, r2
 80049c0:	d01e      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d10c      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d4:	3328      	adds	r3, #40	; 0x28
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fe09 	bl	80055f0 <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ea:	4b6f      	ldr	r3, [pc, #444]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	4a6b      	ldr	r2, [pc, #428]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a0e:	2300      	movs	r3, #0
 8004a10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a12:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d03e      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a28:	d022      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a2e:	d81b      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004a3a:	e015      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a40:	3308      	adds	r3, #8
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fd21 	bl	800548c <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a50:	e00f      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a56:	3328      	adds	r3, #40	; 0x28
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fdc8 	bl	80055f0 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a66:	e004      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a8a:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8004aac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d03b      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ac2:	d01f      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ac4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ac8:	d818      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004ad6:	e011      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ae4:	e00f      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aea:	3328      	adds	r3, #40	; 0x28
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fd7e 	bl	80055f0 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6553      	str	r3, [r2, #84]	; 0x54
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b40:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d034      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b58:	d007      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004b5a:	e011      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b68:	e00e      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2102      	movs	r1, #2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fc8a 	bl	800548c <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10d      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	4a02      	ldr	r2, [pc, #8]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ba4:	e006      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004ba6:	bf00      	nop
 8004ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bc6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d00c      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd4:	3328      	adds	r3, #40	; 0x28
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd09 	bl	80055f0 <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d036      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c10:	d018      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c16:	d811      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d014      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c22:	d80b      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d011      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2e:	4bb7      	ldr	r3, [pc, #732]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	4ab6      	ldr	r2, [pc, #728]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c42:	e004      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c44:	bf00      	nop
 8004c46:	e002      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c56:	4bad      	ldr	r3, [pc, #692]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c64:	4aa9      	ldr	r2, [pc, #676]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c66:	430b      	orrs	r3, r1
 8004c68:	6553      	str	r3, [r2, #84]	; 0x54
 8004c6a:	e003      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
 8004c82:	2300      	movs	r3, #0
 8004c84:	657b      	str	r3, [r7, #84]	; 0x54
 8004c86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c90:	4b9e      	ldr	r3, [pc, #632]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a9b      	ldr	r2, [pc, #620]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc0:	4b92      	ldr	r3, [pc, #584]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cce:	4a8f      	ldr	r2, [pc, #572]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cf0:	4b86      	ldr	r3, [pc, #536]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	4a85      	ldr	r2, [pc, #532]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cfa:	6113      	str	r3, [r2, #16]
 8004cfc:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cfe:	6919      	ldr	r1, [r3, #16]
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d08:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d2a:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	4a74      	ldr	r2, [pc, #464]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	4a68      	ldr	r2, [pc, #416]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	2100      	movs	r1, #0
 8004d7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d86:	460b      	mov	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	d011      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d90:	3308      	adds	r3, #8
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fb79 	bl	800548c <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	2100      	movs	r1, #0
 8004dba:	6239      	str	r1, [r7, #32]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d011      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fb59 	bl	800548c <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	2100      	movs	r1, #0
 8004dfa:	61b9      	str	r1, [r7, #24]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d011      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e10:	3308      	adds	r3, #8
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fb39 	bl	800548c <RCCEx_PLL2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	6139      	str	r1, [r7, #16]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d011      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e50:	3328      	adds	r3, #40	; 0x28
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fbcb 	bl	80055f0 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004e60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d011      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e90:	3328      	adds	r3, #40	; 0x28
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fbab 	bl	80055f0 <RCCEx_PLL3_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6039      	str	r1, [r7, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d011      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed0:	3328      	adds	r3, #40	; 0x28
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fb8b 	bl	80055f0 <RCCEx_PLL3_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004ef0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004f04:	46bd      	mov	sp, r7
 8004f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0a:	bf00      	nop
 8004f0c:	58024400 	.word	0x58024400

08004f10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f14:	f7fe fe00 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	58024400 	.word	0x58024400
 8004f38:	08008250 	.word	0x08008250

08004f3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f44:	4ba1      	ldr	r3, [pc, #644]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004f4e:	4b9f      	ldr	r3, [pc, #636]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	0b1b      	lsrs	r3, r3, #12
 8004f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f5a:	4b9c      	ldr	r3, [pc, #624]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f66:	4b99      	ldr	r3, [pc, #612]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8111 	beq.w	80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f000 8083 	beq.w	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	f200 80a1 	bhi.w	80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d056      	beq.n	8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004fa6:	e099      	b.n	80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa8:	4b88      	ldr	r3, [pc, #544]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02d      	beq.n	8005010 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb4:	4b85      	ldr	r3, [pc, #532]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	4a84      	ldr	r2, [pc, #528]	; (80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b7b      	ldr	r3, [pc, #492]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800500e:	e087      	b.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a03 	vldr	s12, [r7, #12]
 8005036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005052:	e065      	b.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a03 	vldr	s12, [r7, #12]
 800507a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005096:	e043      	b.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b48      	ldr	r3, [pc, #288]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80050be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050da:	e021      	b.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b37      	ldr	r3, [pc, #220]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005120:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	0a5b      	lsrs	r3, r3, #9
 8005126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800513a:	edd7 6a07 	vldr	s13, [r7, #28]
 800513e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005146:	ee17 2a90 	vmov	r2, s15
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800514e:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005168:	edd7 6a07 	vldr	s13, [r7, #28]
 800516c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 2a90 	vmov	r2, s15
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	0e1b      	lsrs	r3, r3, #24
 8005182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005196:	edd7 6a07 	vldr	s13, [r7, #28]
 800519a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a2:	ee17 2a90 	vmov	r2, s15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051aa:	e008      	b.n	80051be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
}
 80051be:	bf00      	nop
 80051c0:	3724      	adds	r7, #36	; 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	58024400 	.word	0x58024400
 80051d0:	03d09000 	.word	0x03d09000
 80051d4:	46000000 	.word	0x46000000
 80051d8:	4c742400 	.word	0x4c742400
 80051dc:	4a742400 	.word	0x4a742400
 80051e0:	4af42400 	.word	0x4af42400

080051e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ec:	4ba1      	ldr	r3, [pc, #644]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80051f6:	4b9f      	ldr	r3, [pc, #636]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	0d1b      	lsrs	r3, r3, #20
 80051fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005200:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005202:	4b9c      	ldr	r3, [pc, #624]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800520e:	4b99      	ldr	r3, [pc, #612]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	08db      	lsrs	r3, r3, #3
 8005214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8111 	beq.w	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f000 8083 	beq.w	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f200 80a1 	bhi.w	8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d056      	beq.n	80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800524e:	e099      	b.n	8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005250:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02d      	beq.n	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a84      	ldr	r2, [pc, #528]	; (8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a03 	vldr	s12, [r7, #12]
 800529a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052b6:	e087      	b.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ca:	4b6a      	ldr	r3, [pc, #424]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	ed97 6a03 	vldr	s12, [r7, #12]
 80052de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fa:	e065      	b.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800530a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530e:	4b59      	ldr	r3, [pc, #356]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533e:	e043      	b.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b48      	ldr	r3, [pc, #288]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a03 	vldr	s12, [r7, #12]
 8005366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005382:	e021      	b.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80053c8:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 2a90 	vmov	r2, s15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800540c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005410:	edd7 6a07 	vldr	s13, [r7, #28]
 8005414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541c:	ee17 2a90 	vmov	r2, s15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800543a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800543e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544a:	ee17 2a90 	vmov	r2, s15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005452:	e008      	b.n	8005466 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	03d09000 	.word	0x03d09000
 800547c:	46000000 	.word	0x46000000
 8005480:	4c742400 	.word	0x4c742400
 8005484:	4a742400 	.word	0x4a742400
 8005488:	4af42400 	.word	0x4af42400

0800548c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800549a:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d101      	bne.n	80054aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e099      	b.n	80055de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054aa:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b6:	f7fb ff4d 	bl	8001354 <HAL_GetTick>
 80054ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054bc:	e008      	b.n	80054d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054be:	f7fb ff49 	bl	8001354 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e086      	b.n	80055de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	493f      	ldr	r1, [pc, #252]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	628b      	str	r3, [r1, #40]	; 0x28
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	3b01      	subs	r3, #1
 8005500:	025b      	lsls	r3, r3, #9
 8005502:	b29b      	uxth	r3, r3
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	3b01      	subs	r3, #1
 800550c:	041b      	lsls	r3, r3, #16
 800550e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	3b01      	subs	r3, #1
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005520:	4931      	ldr	r1, [pc, #196]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005526:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	492d      	ldr	r1, [pc, #180]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005534:	4313      	orrs	r3, r2
 8005536:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	f023 0220 	bic.w	r2, r3, #32
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	4928      	ldr	r1, [pc, #160]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800554a:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a26      	ldr	r2, [pc, #152]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005550:	f023 0310 	bic.w	r3, r3, #16
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	4b24      	ldr	r3, [pc, #144]	; (80055ec <RCCEx_PLL2_Config+0x160>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	69d2      	ldr	r2, [r2, #28]
 8005562:	00d2      	lsls	r2, r2, #3
 8005564:	4920      	ldr	r1, [pc, #128]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800556a:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005570:	f043 0310 	orr.w	r3, r3, #16
 8005574:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005588:	e00f      	b.n	80055aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800559c:	e005      	b.n	80055aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	4a11      	ldr	r2, [pc, #68]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b6:	f7fb fecd 	bl	8001354 <HAL_GetTick>
 80055ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055be:	f7fb fec9 	bl	8001354 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e006      	b.n	80055de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <RCCEx_PLL2_Config+0x15c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	58024400 	.word	0x58024400
 80055ec:	ffff0007 	.word	0xffff0007

080055f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055fe:	4b53      	ldr	r3, [pc, #332]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d101      	bne.n	800560e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e099      	b.n	8005742 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800560e:	4b4f      	ldr	r3, [pc, #316]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4e      	ldr	r2, [pc, #312]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561a:	f7fb fe9b 	bl	8001354 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005620:	e008      	b.n	8005634 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005622:	f7fb fe97 	bl	8001354 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e086      	b.n	8005742 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005634:	4b45      	ldr	r3, [pc, #276]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f0      	bne.n	8005622 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	051b      	lsls	r3, r3, #20
 800564e:	493f      	ldr	r1, [pc, #252]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	628b      	str	r3, [r1, #40]	; 0x28
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	3b01      	subs	r3, #1
 800565a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	3b01      	subs	r3, #1
 8005664:	025b      	lsls	r3, r3, #9
 8005666:	b29b      	uxth	r3, r3
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	3b01      	subs	r3, #1
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005684:	4931      	ldr	r1, [pc, #196]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800568a:	4b30      	ldr	r3, [pc, #192]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	492d      	ldr	r1, [pc, #180]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	4928      	ldr	r1, [pc, #160]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056ae:	4b27      	ldr	r3, [pc, #156]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	4a26      	ldr	r2, [pc, #152]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056ba:	4b24      	ldr	r3, [pc, #144]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <RCCEx_PLL3_Config+0x160>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	69d2      	ldr	r2, [r2, #28]
 80056c6:	00d2      	lsls	r2, r2, #3
 80056c8:	4920      	ldr	r1, [pc, #128]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056ce:	4b1f      	ldr	r3, [pc, #124]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	4a1e      	ldr	r2, [pc, #120]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056ec:	e00f      	b.n	800570e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056f4:	4b15      	ldr	r3, [pc, #84]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4a14      	ldr	r2, [pc, #80]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 80056fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005700:	e005      	b.n	800570e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a0e      	ldr	r2, [pc, #56]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fb fe1b 	bl	8001354 <HAL_GetTick>
 800571e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005720:	e008      	b.n	8005734 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005722:	f7fb fe17 	bl	8001354 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e006      	b.n	8005742 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <RCCEx_PLL3_Config+0x15c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	58024400 	.word	0x58024400
 8005750:	ffff0007 	.word	0xffff0007

08005754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e042      	b.n	80057ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb fbb5 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2224      	movs	r2, #36	; 0x24
 8005782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fce0 	bl	800615c <UART_SetConfig>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e022      	b.n	80057ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fb40 	bl	8006e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fbc7 	bl	8006f78 <UART_CheckIdleState>
 80057ea:	4603      	mov	r3, r0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	2b20      	cmp	r3, #32
 800580c:	d17b      	bne.n	8005906 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_Transmit+0x26>
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e074      	b.n	8005908 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2221      	movs	r2, #33	; 0x21
 800582a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800582e:	f7fb fd91 	bl	8001354 <HAL_GetTick>
 8005832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d108      	bne.n	8005860 <HAL_UART_Transmit+0x6c>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	e003      	b.n	8005868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005868:	e030      	b.n	80058cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f001 fc29 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e03d      	b.n	8005908 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	3302      	adds	r3, #2
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e007      	b.n	80058ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1c8      	bne.n	800586a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	2140      	movs	r1, #64	; 0x40
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f001 fbf2 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e006      	b.n	8005908 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005924:	2b20      	cmp	r3, #32
 8005926:	d137      	bne.n	8005998 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Receive_IT+0x24>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e030      	b.n	800599a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_UART_Receive_IT+0x94>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d01f      	beq.n	8005988 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	613b      	str	r3, [r7, #16]
   return(result);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	61bb      	str	r3, [r7, #24]
   return(result);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	461a      	mov	r2, r3
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f001 fc04 	bl	800719c <UART_Start_Receive_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	e000      	b.n	800599a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	58000c00 	.word	0x58000c00

080059a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b0ba      	sub	sp, #232	; 0xe8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80059d6:	4013      	ands	r3, r2
 80059d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11b      	bne.n	8005a1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d015      	beq.n	8005a1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8377 	beq.w	8006100 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
      }
      return;
 8005a1a:	e371      	b.n	8006100 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8123 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a2a:	4b8d      	ldr	r3, [pc, #564]	; (8005c60 <HAL_UART_IRQHandler+0x2b8>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a36:	4b8b      	ldr	r3, [pc, #556]	; (8005c64 <HAL_UART_IRQHandler+0x2bc>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8116 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d011      	beq.n	8005a70 <HAL_UART_IRQHandler+0xc8>
 8005a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00b      	beq.n	8005a70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f043 0201 	orr.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d011      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xf8>
 8005a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f043 0204 	orr.w	r2, r3, #4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x128>
 8005aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2204      	movs	r2, #4
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	f043 0202 	orr.w	r2, r3, #2
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005aec:	4b5c      	ldr	r3, [pc, #368]	; (8005c60 <HAL_UART_IRQHandler+0x2b8>)
 8005aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2208      	movs	r2, #8
 8005afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f043 0208 	orr.w	r2, r3, #8
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d012      	beq.n	8005b3e <HAL_UART_IRQHandler+0x196>
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 82dd 	beq.w	8006104 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d005      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d054      	beq.n	8005c4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fc1c 	bl	80073e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d146      	bne.n	8005c44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d9      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d017      	beq.n	8005c3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_UART_IRQHandler+0x2c0>)
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fc f80b 	bl	8001c38 <HAL_DMA_Abort_IT>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d019      	beq.n	8005c5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005c36:	4610      	mov	r0, r2
 8005c38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3a:	e00f      	b.n	8005c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa77 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c42:	e00b      	b.n	8005c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa73 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4a:	e007      	b.n	8005c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fa6f 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005c5a:	e253      	b.n	8006104 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	bf00      	nop
    return;
 8005c5e:	e251      	b.n	8006104 <HAL_UART_IRQHandler+0x75c>
 8005c60:	10000001 	.word	0x10000001
 8005c64:	04000120 	.word	0x04000120
 8005c68:	080074ad 	.word	0x080074ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f040 81e7 	bne.w	8006044 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 81e0 	beq.w	8006044 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 81d9 	beq.w	8006044 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2210      	movs	r2, #16
 8005c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	f040 8151 	bne.w	8005f4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a96      	ldr	r2, [pc, #600]	; (8005f0c <HAL_UART_IRQHandler+0x564>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d068      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a93      	ldr	r2, [pc, #588]	; (8005f10 <HAL_UART_IRQHandler+0x568>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d061      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a91      	ldr	r2, [pc, #580]	; (8005f14 <HAL_UART_IRQHandler+0x56c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d05a      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a8e      	ldr	r2, [pc, #568]	; (8005f18 <HAL_UART_IRQHandler+0x570>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d053      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a8c      	ldr	r2, [pc, #560]	; (8005f1c <HAL_UART_IRQHandler+0x574>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04c      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a89      	ldr	r2, [pc, #548]	; (8005f20 <HAL_UART_IRQHandler+0x578>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a87      	ldr	r2, [pc, #540]	; (8005f24 <HAL_UART_IRQHandler+0x57c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03e      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a84      	ldr	r2, [pc, #528]	; (8005f28 <HAL_UART_IRQHandler+0x580>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d037      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a82      	ldr	r2, [pc, #520]	; (8005f2c <HAL_UART_IRQHandler+0x584>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d030      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7f      	ldr	r2, [pc, #508]	; (8005f30 <HAL_UART_IRQHandler+0x588>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d029      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7d      	ldr	r2, [pc, #500]	; (8005f34 <HAL_UART_IRQHandler+0x58c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a7a      	ldr	r2, [pc, #488]	; (8005f38 <HAL_UART_IRQHandler+0x590>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01b      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a78      	ldr	r2, [pc, #480]	; (8005f3c <HAL_UART_IRQHandler+0x594>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d014      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a75      	ldr	r2, [pc, #468]	; (8005f40 <HAL_UART_IRQHandler+0x598>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a73      	ldr	r2, [pc, #460]	; (8005f44 <HAL_UART_IRQHandler+0x59c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d006      	beq.n	8005d8a <HAL_UART_IRQHandler+0x3e2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a70      	ldr	r2, [pc, #448]	; (8005f48 <HAL_UART_IRQHandler+0x5a0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d106      	bne.n	8005d98 <HAL_UART_IRQHandler+0x3f0>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	e005      	b.n	8005da4 <HAL_UART_IRQHandler+0x3fc>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 81ab 	beq.w	8006108 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005db8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	f080 81a3 	bcs.w	8006108 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd8:	f000 8087 	beq.w	8005eea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1da      	bne.n	8005ddc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e1      	bne.n	8005e26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e3      	bne.n	8005e62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb8:	f023 0310 	bic.w	r3, r3, #16
 8005ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eca:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ecc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e4      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fb fb89 	bl	80015fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f91d 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f0a:	e0fd      	b.n	8006108 <HAL_UART_IRQHandler+0x760>
 8005f0c:	40020010 	.word	0x40020010
 8005f10:	40020028 	.word	0x40020028
 8005f14:	40020040 	.word	0x40020040
 8005f18:	40020058 	.word	0x40020058
 8005f1c:	40020070 	.word	0x40020070
 8005f20:	40020088 	.word	0x40020088
 8005f24:	400200a0 	.word	0x400200a0
 8005f28:	400200b8 	.word	0x400200b8
 8005f2c:	40020410 	.word	0x40020410
 8005f30:	40020428 	.word	0x40020428
 8005f34:	40020440 	.word	0x40020440
 8005f38:	40020458 	.word	0x40020458
 8005f3c:	40020470 	.word	0x40020470
 8005f40:	40020488 	.word	0x40020488
 8005f44:	400204a0 	.word	0x400204a0
 8005f48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80cf 	beq.w	800610c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80ca 	beq.w	800610c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e4      	bne.n	8005f78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	4b55      	ldr	r3, [pc, #340]	; (8006118 <HAL_UART_IRQHandler+0x770>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e3      	bne.n	8005fae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	60fb      	str	r3, [r7, #12]
   return(result);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0310 	bic.w	r3, r3, #16
 800600e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	69b9      	ldr	r1, [r7, #24]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	617b      	str	r3, [r7, #20]
   return(result);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e4      	bne.n	8005ffa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f881 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006042:	e063      	b.n	800610c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <HAL_UART_IRQHandler+0x6c6>
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 ff7e 	bl	8007f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800606c:	e051      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006096:	2b00      	cmp	r3, #0
 8006098:	d03a      	beq.n	8006110 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    }
    return;
 80060a2:	e035      	b.n	8006110 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <HAL_UART_IRQHandler+0x71c>
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fa0b 	bl	80074d8 <UART_EndTransmit_IT>
    return;
 80060c2:	e026      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <HAL_UART_IRQHandler+0x73c>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 ff57 	bl	8007f90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060e2:	e016      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <HAL_UART_IRQHandler+0x76a>
 80060f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0c      	bge.n	8006112 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 ff3f 	bl	8007f7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060fe:	e008      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
      return;
 8006100:	bf00      	nop
 8006102:	e006      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
    return;
 8006104:	bf00      	nop
 8006106:	e004      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
      return;
 8006108:	bf00      	nop
 800610a:	e002      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
      return;
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_UART_IRQHandler+0x76a>
    return;
 8006110:	bf00      	nop
  }
}
 8006112:	37e8      	adds	r7, #232	; 0xe8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	effffffe 	.word	0xeffffffe

0800611c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b092      	sub	sp, #72	; 0x48
 8006162:	af00      	add	r7, sp, #0
 8006164:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	431a      	orrs	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	431a      	orrs	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	4313      	orrs	r3, r2
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4bbe      	ldr	r3, [pc, #760]	; (8006484 <UART_SetConfig+0x328>)
 800618c:	4013      	ands	r3, r2
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006194:	430b      	orrs	r3, r1
 8006196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4ab3      	ldr	r2, [pc, #716]	; (8006488 <UART_SetConfig+0x32c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c4:	4313      	orrs	r3, r2
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	4baf      	ldr	r3, [pc, #700]	; (800648c <UART_SetConfig+0x330>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d8:	430b      	orrs	r3, r1
 80061da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	f023 010f 	bic.w	r1, r3, #15
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4aa6      	ldr	r2, [pc, #664]	; (8006490 <UART_SetConfig+0x334>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d177      	bne.n	80062ec <UART_SetConfig+0x190>
 80061fc:	4ba5      	ldr	r3, [pc, #660]	; (8006494 <UART_SetConfig+0x338>)
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006204:	2b28      	cmp	r3, #40	; 0x28
 8006206:	d86d      	bhi.n	80062e4 <UART_SetConfig+0x188>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0xb4>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	080062b5 	.word	0x080062b5
 8006214:	080062e5 	.word	0x080062e5
 8006218:	080062e5 	.word	0x080062e5
 800621c:	080062e5 	.word	0x080062e5
 8006220:	080062e5 	.word	0x080062e5
 8006224:	080062e5 	.word	0x080062e5
 8006228:	080062e5 	.word	0x080062e5
 800622c:	080062e5 	.word	0x080062e5
 8006230:	080062bd 	.word	0x080062bd
 8006234:	080062e5 	.word	0x080062e5
 8006238:	080062e5 	.word	0x080062e5
 800623c:	080062e5 	.word	0x080062e5
 8006240:	080062e5 	.word	0x080062e5
 8006244:	080062e5 	.word	0x080062e5
 8006248:	080062e5 	.word	0x080062e5
 800624c:	080062e5 	.word	0x080062e5
 8006250:	080062c5 	.word	0x080062c5
 8006254:	080062e5 	.word	0x080062e5
 8006258:	080062e5 	.word	0x080062e5
 800625c:	080062e5 	.word	0x080062e5
 8006260:	080062e5 	.word	0x080062e5
 8006264:	080062e5 	.word	0x080062e5
 8006268:	080062e5 	.word	0x080062e5
 800626c:	080062e5 	.word	0x080062e5
 8006270:	080062cd 	.word	0x080062cd
 8006274:	080062e5 	.word	0x080062e5
 8006278:	080062e5 	.word	0x080062e5
 800627c:	080062e5 	.word	0x080062e5
 8006280:	080062e5 	.word	0x080062e5
 8006284:	080062e5 	.word	0x080062e5
 8006288:	080062e5 	.word	0x080062e5
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062d5 	.word	0x080062d5
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062e5 	.word	0x080062e5
 80062a0:	080062e5 	.word	0x080062e5
 80062a4:	080062e5 	.word	0x080062e5
 80062a8:	080062e5 	.word	0x080062e5
 80062ac:	080062e5 	.word	0x080062e5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e326      	b.n	800690a <UART_SetConfig+0x7ae>
 80062bc:	2304      	movs	r3, #4
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e322      	b.n	800690a <UART_SetConfig+0x7ae>
 80062c4:	2308      	movs	r3, #8
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e31e      	b.n	800690a <UART_SetConfig+0x7ae>
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e31a      	b.n	800690a <UART_SetConfig+0x7ae>
 80062d4:	2320      	movs	r3, #32
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e316      	b.n	800690a <UART_SetConfig+0x7ae>
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e312      	b.n	800690a <UART_SetConfig+0x7ae>
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e30e      	b.n	800690a <UART_SetConfig+0x7ae>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a69      	ldr	r2, [pc, #420]	; (8006498 <UART_SetConfig+0x33c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d130      	bne.n	8006358 <UART_SetConfig+0x1fc>
 80062f6:	4b67      	ldr	r3, [pc, #412]	; (8006494 <UART_SetConfig+0x338>)
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d826      	bhi.n	8006350 <UART_SetConfig+0x1f4>
 8006302:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x1ac>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006321 	.word	0x08006321
 800630c:	08006329 	.word	0x08006329
 8006310:	08006331 	.word	0x08006331
 8006314:	08006339 	.word	0x08006339
 8006318:	08006341 	.word	0x08006341
 800631c:	08006349 	.word	0x08006349
 8006320:	2300      	movs	r3, #0
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e2f0      	b.n	800690a <UART_SetConfig+0x7ae>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e2ec      	b.n	800690a <UART_SetConfig+0x7ae>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e2e8      	b.n	800690a <UART_SetConfig+0x7ae>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e2e4      	b.n	800690a <UART_SetConfig+0x7ae>
 8006340:	2320      	movs	r3, #32
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e2e0      	b.n	800690a <UART_SetConfig+0x7ae>
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e2dc      	b.n	800690a <UART_SetConfig+0x7ae>
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e2d8      	b.n	800690a <UART_SetConfig+0x7ae>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a4f      	ldr	r2, [pc, #316]	; (800649c <UART_SetConfig+0x340>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d130      	bne.n	80063c4 <UART_SetConfig+0x268>
 8006362:	4b4c      	ldr	r3, [pc, #304]	; (8006494 <UART_SetConfig+0x338>)
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b05      	cmp	r3, #5
 800636c:	d826      	bhi.n	80063bc <UART_SetConfig+0x260>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x218>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	0800638d 	.word	0x0800638d
 8006378:	08006395 	.word	0x08006395
 800637c:	0800639d 	.word	0x0800639d
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063b5 	.word	0x080063b5
 800638c:	2300      	movs	r3, #0
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e2ba      	b.n	800690a <UART_SetConfig+0x7ae>
 8006394:	2304      	movs	r3, #4
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e2b6      	b.n	800690a <UART_SetConfig+0x7ae>
 800639c:	2308      	movs	r3, #8
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e2b2      	b.n	800690a <UART_SetConfig+0x7ae>
 80063a4:	2310      	movs	r3, #16
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e2ae      	b.n	800690a <UART_SetConfig+0x7ae>
 80063ac:	2320      	movs	r3, #32
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e2aa      	b.n	800690a <UART_SetConfig+0x7ae>
 80063b4:	2340      	movs	r3, #64	; 0x40
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e2a6      	b.n	800690a <UART_SetConfig+0x7ae>
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e2a2      	b.n	800690a <UART_SetConfig+0x7ae>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a35      	ldr	r2, [pc, #212]	; (80064a0 <UART_SetConfig+0x344>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d130      	bne.n	8006430 <UART_SetConfig+0x2d4>
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <UART_SetConfig+0x338>)
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d826      	bhi.n	8006428 <UART_SetConfig+0x2cc>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0x284>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f9 	.word	0x080063f9
 80063e4:	08006401 	.word	0x08006401
 80063e8:	08006409 	.word	0x08006409
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e284      	b.n	800690a <UART_SetConfig+0x7ae>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e280      	b.n	800690a <UART_SetConfig+0x7ae>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e27c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e278      	b.n	800690a <UART_SetConfig+0x7ae>
 8006418:	2320      	movs	r3, #32
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e274      	b.n	800690a <UART_SetConfig+0x7ae>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e270      	b.n	800690a <UART_SetConfig+0x7ae>
 8006428:	2380      	movs	r3, #128	; 0x80
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642e:	e26c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <UART_SetConfig+0x348>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d142      	bne.n	80064c0 <UART_SetConfig+0x364>
 800643a:	4b16      	ldr	r3, [pc, #88]	; (8006494 <UART_SetConfig+0x338>)
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b05      	cmp	r3, #5
 8006444:	d838      	bhi.n	80064b8 <UART_SetConfig+0x35c>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x2f0>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006465 	.word	0x08006465
 8006450:	0800646d 	.word	0x0800646d
 8006454:	08006475 	.word	0x08006475
 8006458:	0800647d 	.word	0x0800647d
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064b1 	.word	0x080064b1
 8006464:	2300      	movs	r3, #0
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e24e      	b.n	800690a <UART_SetConfig+0x7ae>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e24a      	b.n	800690a <UART_SetConfig+0x7ae>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e246      	b.n	800690a <UART_SetConfig+0x7ae>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e242      	b.n	800690a <UART_SetConfig+0x7ae>
 8006484:	cfff69f3 	.word	0xcfff69f3
 8006488:	58000c00 	.word	0x58000c00
 800648c:	11fff4ff 	.word	0x11fff4ff
 8006490:	40011000 	.word	0x40011000
 8006494:	58024400 	.word	0x58024400
 8006498:	40004400 	.word	0x40004400
 800649c:	40004800 	.word	0x40004800
 80064a0:	40004c00 	.word	0x40004c00
 80064a4:	40005000 	.word	0x40005000
 80064a8:	2320      	movs	r3, #32
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e22c      	b.n	800690a <UART_SetConfig+0x7ae>
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e228      	b.n	800690a <UART_SetConfig+0x7ae>
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e224      	b.n	800690a <UART_SetConfig+0x7ae>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4ab1      	ldr	r2, [pc, #708]	; (800678c <UART_SetConfig+0x630>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d176      	bne.n	80065b8 <UART_SetConfig+0x45c>
 80064ca:	4bb1      	ldr	r3, [pc, #708]	; (8006790 <UART_SetConfig+0x634>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d2:	2b28      	cmp	r3, #40	; 0x28
 80064d4:	d86c      	bhi.n	80065b0 <UART_SetConfig+0x454>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x380>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006581 	.word	0x08006581
 80064e0:	080065b1 	.word	0x080065b1
 80064e4:	080065b1 	.word	0x080065b1
 80064e8:	080065b1 	.word	0x080065b1
 80064ec:	080065b1 	.word	0x080065b1
 80064f0:	080065b1 	.word	0x080065b1
 80064f4:	080065b1 	.word	0x080065b1
 80064f8:	080065b1 	.word	0x080065b1
 80064fc:	08006589 	.word	0x08006589
 8006500:	080065b1 	.word	0x080065b1
 8006504:	080065b1 	.word	0x080065b1
 8006508:	080065b1 	.word	0x080065b1
 800650c:	080065b1 	.word	0x080065b1
 8006510:	080065b1 	.word	0x080065b1
 8006514:	080065b1 	.word	0x080065b1
 8006518:	080065b1 	.word	0x080065b1
 800651c:	08006591 	.word	0x08006591
 8006520:	080065b1 	.word	0x080065b1
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065b1 	.word	0x080065b1
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080065b1 	.word	0x080065b1
 8006534:	080065b1 	.word	0x080065b1
 8006538:	080065b1 	.word	0x080065b1
 800653c:	08006599 	.word	0x08006599
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065b1 	.word	0x080065b1
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065b1 	.word	0x080065b1
 8006554:	080065b1 	.word	0x080065b1
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065a1 	.word	0x080065a1
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e1c0      	b.n	800690a <UART_SetConfig+0x7ae>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e1bc      	b.n	800690a <UART_SetConfig+0x7ae>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e1b8      	b.n	800690a <UART_SetConfig+0x7ae>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e1b4      	b.n	800690a <UART_SetConfig+0x7ae>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e1b0      	b.n	800690a <UART_SetConfig+0x7ae>
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e1ac      	b.n	800690a <UART_SetConfig+0x7ae>
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e1a8      	b.n	800690a <UART_SetConfig+0x7ae>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a75      	ldr	r2, [pc, #468]	; (8006794 <UART_SetConfig+0x638>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d130      	bne.n	8006624 <UART_SetConfig+0x4c8>
 80065c2:	4b73      	ldr	r3, [pc, #460]	; (8006790 <UART_SetConfig+0x634>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d826      	bhi.n	800661c <UART_SetConfig+0x4c0>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x478>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e18a      	b.n	800690a <UART_SetConfig+0x7ae>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e186      	b.n	800690a <UART_SetConfig+0x7ae>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e182      	b.n	800690a <UART_SetConfig+0x7ae>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e17e      	b.n	800690a <UART_SetConfig+0x7ae>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e17a      	b.n	800690a <UART_SetConfig+0x7ae>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e176      	b.n	800690a <UART_SetConfig+0x7ae>
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e172      	b.n	800690a <UART_SetConfig+0x7ae>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5b      	ldr	r2, [pc, #364]	; (8006798 <UART_SetConfig+0x63c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <UART_SetConfig+0x534>
 800662e:	4b58      	ldr	r3, [pc, #352]	; (8006790 <UART_SetConfig+0x634>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b05      	cmp	r3, #5
 8006638:	d826      	bhi.n	8006688 <UART_SetConfig+0x52c>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x4e4>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e154      	b.n	800690a <UART_SetConfig+0x7ae>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e150      	b.n	800690a <UART_SetConfig+0x7ae>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e14c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e148      	b.n	800690a <UART_SetConfig+0x7ae>
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e144      	b.n	800690a <UART_SetConfig+0x7ae>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e140      	b.n	800690a <UART_SetConfig+0x7ae>
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e13c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a41      	ldr	r2, [pc, #260]	; (800679c <UART_SetConfig+0x640>)
 8006696:	4293      	cmp	r3, r2
 8006698:	f040 8082 	bne.w	80067a0 <UART_SetConfig+0x644>
 800669c:	4b3c      	ldr	r3, [pc, #240]	; (8006790 <UART_SetConfig+0x634>)
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a4:	2b28      	cmp	r3, #40	; 0x28
 80066a6:	d86d      	bhi.n	8006784 <UART_SetConfig+0x628>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x554>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	08006755 	.word	0x08006755
 80066b4:	08006785 	.word	0x08006785
 80066b8:	08006785 	.word	0x08006785
 80066bc:	08006785 	.word	0x08006785
 80066c0:	08006785 	.word	0x08006785
 80066c4:	08006785 	.word	0x08006785
 80066c8:	08006785 	.word	0x08006785
 80066cc:	08006785 	.word	0x08006785
 80066d0:	0800675d 	.word	0x0800675d
 80066d4:	08006785 	.word	0x08006785
 80066d8:	08006785 	.word	0x08006785
 80066dc:	08006785 	.word	0x08006785
 80066e0:	08006785 	.word	0x08006785
 80066e4:	08006785 	.word	0x08006785
 80066e8:	08006785 	.word	0x08006785
 80066ec:	08006785 	.word	0x08006785
 80066f0:	08006765 	.word	0x08006765
 80066f4:	08006785 	.word	0x08006785
 80066f8:	08006785 	.word	0x08006785
 80066fc:	08006785 	.word	0x08006785
 8006700:	08006785 	.word	0x08006785
 8006704:	08006785 	.word	0x08006785
 8006708:	08006785 	.word	0x08006785
 800670c:	08006785 	.word	0x08006785
 8006710:	0800676d 	.word	0x0800676d
 8006714:	08006785 	.word	0x08006785
 8006718:	08006785 	.word	0x08006785
 800671c:	08006785 	.word	0x08006785
 8006720:	08006785 	.word	0x08006785
 8006724:	08006785 	.word	0x08006785
 8006728:	08006785 	.word	0x08006785
 800672c:	08006785 	.word	0x08006785
 8006730:	08006775 	.word	0x08006775
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	08006785 	.word	0x08006785
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006785 	.word	0x08006785
 800674c:	08006785 	.word	0x08006785
 8006750:	0800677d 	.word	0x0800677d
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e0d6      	b.n	800690a <UART_SetConfig+0x7ae>
 800675c:	2304      	movs	r3, #4
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e0d2      	b.n	800690a <UART_SetConfig+0x7ae>
 8006764:	2308      	movs	r3, #8
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e0ce      	b.n	800690a <UART_SetConfig+0x7ae>
 800676c:	2310      	movs	r3, #16
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e0ca      	b.n	800690a <UART_SetConfig+0x7ae>
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e0c6      	b.n	800690a <UART_SetConfig+0x7ae>
 800677c:	2340      	movs	r3, #64	; 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e0c2      	b.n	800690a <UART_SetConfig+0x7ae>
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e0be      	b.n	800690a <UART_SetConfig+0x7ae>
 800678c:	40011400 	.word	0x40011400
 8006790:	58024400 	.word	0x58024400
 8006794:	40007800 	.word	0x40007800
 8006798:	40007c00 	.word	0x40007c00
 800679c:	40011800 	.word	0x40011800
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4aad      	ldr	r2, [pc, #692]	; (8006a5c <UART_SetConfig+0x900>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d176      	bne.n	8006898 <UART_SetConfig+0x73c>
 80067aa:	4bad      	ldr	r3, [pc, #692]	; (8006a60 <UART_SetConfig+0x904>)
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b2:	2b28      	cmp	r3, #40	; 0x28
 80067b4:	d86c      	bhi.n	8006890 <UART_SetConfig+0x734>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <UART_SetConfig+0x660>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	08006861 	.word	0x08006861
 80067c0:	08006891 	.word	0x08006891
 80067c4:	08006891 	.word	0x08006891
 80067c8:	08006891 	.word	0x08006891
 80067cc:	08006891 	.word	0x08006891
 80067d0:	08006891 	.word	0x08006891
 80067d4:	08006891 	.word	0x08006891
 80067d8:	08006891 	.word	0x08006891
 80067dc:	08006869 	.word	0x08006869
 80067e0:	08006891 	.word	0x08006891
 80067e4:	08006891 	.word	0x08006891
 80067e8:	08006891 	.word	0x08006891
 80067ec:	08006891 	.word	0x08006891
 80067f0:	08006891 	.word	0x08006891
 80067f4:	08006891 	.word	0x08006891
 80067f8:	08006891 	.word	0x08006891
 80067fc:	08006871 	.word	0x08006871
 8006800:	08006891 	.word	0x08006891
 8006804:	08006891 	.word	0x08006891
 8006808:	08006891 	.word	0x08006891
 800680c:	08006891 	.word	0x08006891
 8006810:	08006891 	.word	0x08006891
 8006814:	08006891 	.word	0x08006891
 8006818:	08006891 	.word	0x08006891
 800681c:	08006879 	.word	0x08006879
 8006820:	08006891 	.word	0x08006891
 8006824:	08006891 	.word	0x08006891
 8006828:	08006891 	.word	0x08006891
 800682c:	08006891 	.word	0x08006891
 8006830:	08006891 	.word	0x08006891
 8006834:	08006891 	.word	0x08006891
 8006838:	08006891 	.word	0x08006891
 800683c:	08006881 	.word	0x08006881
 8006840:	08006891 	.word	0x08006891
 8006844:	08006891 	.word	0x08006891
 8006848:	08006891 	.word	0x08006891
 800684c:	08006891 	.word	0x08006891
 8006850:	08006891 	.word	0x08006891
 8006854:	08006891 	.word	0x08006891
 8006858:	08006891 	.word	0x08006891
 800685c:	08006889 	.word	0x08006889
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006866:	e050      	b.n	800690a <UART_SetConfig+0x7ae>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686e:	e04c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006876:	e048      	b.n	800690a <UART_SetConfig+0x7ae>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687e:	e044      	b.n	800690a <UART_SetConfig+0x7ae>
 8006880:	2320      	movs	r3, #32
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006886:	e040      	b.n	800690a <UART_SetConfig+0x7ae>
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688e:	e03c      	b.n	800690a <UART_SetConfig+0x7ae>
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006896:	e038      	b.n	800690a <UART_SetConfig+0x7ae>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a71      	ldr	r2, [pc, #452]	; (8006a64 <UART_SetConfig+0x908>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d130      	bne.n	8006904 <UART_SetConfig+0x7a8>
 80068a2:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <UART_SetConfig+0x904>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d826      	bhi.n	80068fc <UART_SetConfig+0x7a0>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x758>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068dd 	.word	0x080068dd
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	2302      	movs	r3, #2
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d2:	e01a      	b.n	800690a <UART_SetConfig+0x7ae>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e016      	b.n	800690a <UART_SetConfig+0x7ae>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e012      	b.n	800690a <UART_SetConfig+0x7ae>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e00e      	b.n	800690a <UART_SetConfig+0x7ae>
 80068ec:	2320      	movs	r3, #32
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e00a      	b.n	800690a <UART_SetConfig+0x7ae>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e006      	b.n	800690a <UART_SetConfig+0x7ae>
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e002      	b.n	800690a <UART_SetConfig+0x7ae>
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a55      	ldr	r2, [pc, #340]	; (8006a64 <UART_SetConfig+0x908>)
 8006910:	4293      	cmp	r3, r2
 8006912:	f040 80f8 	bne.w	8006b06 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006916:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800691a:	2b20      	cmp	r3, #32
 800691c:	dc46      	bgt.n	80069ac <UART_SetConfig+0x850>
 800691e:	2b02      	cmp	r3, #2
 8006920:	db75      	blt.n	8006a0e <UART_SetConfig+0x8b2>
 8006922:	3b02      	subs	r3, #2
 8006924:	2b1e      	cmp	r3, #30
 8006926:	d872      	bhi.n	8006a0e <UART_SetConfig+0x8b2>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x7d4>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	080069b3 	.word	0x080069b3
 8006934:	08006a0f 	.word	0x08006a0f
 8006938:	080069bb 	.word	0x080069bb
 800693c:	08006a0f 	.word	0x08006a0f
 8006940:	08006a0f 	.word	0x08006a0f
 8006944:	08006a0f 	.word	0x08006a0f
 8006948:	080069cb 	.word	0x080069cb
 800694c:	08006a0f 	.word	0x08006a0f
 8006950:	08006a0f 	.word	0x08006a0f
 8006954:	08006a0f 	.word	0x08006a0f
 8006958:	08006a0f 	.word	0x08006a0f
 800695c:	08006a0f 	.word	0x08006a0f
 8006960:	08006a0f 	.word	0x08006a0f
 8006964:	08006a0f 	.word	0x08006a0f
 8006968:	080069db 	.word	0x080069db
 800696c:	08006a0f 	.word	0x08006a0f
 8006970:	08006a0f 	.word	0x08006a0f
 8006974:	08006a0f 	.word	0x08006a0f
 8006978:	08006a0f 	.word	0x08006a0f
 800697c:	08006a0f 	.word	0x08006a0f
 8006980:	08006a0f 	.word	0x08006a0f
 8006984:	08006a0f 	.word	0x08006a0f
 8006988:	08006a0f 	.word	0x08006a0f
 800698c:	08006a0f 	.word	0x08006a0f
 8006990:	08006a0f 	.word	0x08006a0f
 8006994:	08006a0f 	.word	0x08006a0f
 8006998:	08006a0f 	.word	0x08006a0f
 800699c:	08006a0f 	.word	0x08006a0f
 80069a0:	08006a0f 	.word	0x08006a0f
 80069a4:	08006a0f 	.word	0x08006a0f
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	2b40      	cmp	r3, #64	; 0x40
 80069ae:	d02a      	beq.n	8006a06 <UART_SetConfig+0x8aa>
 80069b0:	e02d      	b.n	8006a0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069b2:	f7fe faad 	bl	8004f10 <HAL_RCCEx_GetD3PCLK1Freq>
 80069b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069b8:	e02f      	b.n	8006a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fabc 	bl	8004f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c8:	e027      	b.n	8006a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ca:	f107 0318 	add.w	r3, r7, #24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fc08 	bl	80051e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e01f      	b.n	8006a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069da:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <UART_SetConfig+0x904>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069e6:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <UART_SetConfig+0x904>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	08db      	lsrs	r3, r3, #3
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <UART_SetConfig+0x90c>)
 80069f2:	fa22 f303 	lsr.w	r3, r2, r3
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069f8:	e00f      	b.n	8006a1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <UART_SetConfig+0x90c>)
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fe:	e00c      	b.n	8006a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <UART_SetConfig+0x910>)
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a04:	e009      	b.n	8006a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0c:	e005      	b.n	8006a1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 81ee 	beq.w	8006dfe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <UART_SetConfig+0x914>)
 8006a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d305      	bcc.n	8006a52 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d910      	bls.n	8006a74 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a58:	e1d1      	b.n	8006dfe <UART_SetConfig+0xca2>
 8006a5a:	bf00      	nop
 8006a5c:	40011c00 	.word	0x40011c00
 8006a60:	58024400 	.word	0x58024400
 8006a64:	58000c00 	.word	0x58000c00
 8006a68:	03d09000 	.word	0x03d09000
 8006a6c:	003d0900 	.word	0x003d0900
 8006a70:	08008260 	.word	0x08008260
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2200      	movs	r2, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	60fa      	str	r2, [r7, #12]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	4ac0      	ldr	r2, [pc, #768]	; (8006d84 <UART_SetConfig+0xc28>)
 8006a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2200      	movs	r2, #0
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a96:	f7f9 fc41 	bl	800031c <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	020b      	lsls	r3, r1, #8
 8006aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ab0:	0202      	lsls	r2, r0, #8
 8006ab2:	6979      	ldr	r1, [r7, #20]
 8006ab4:	6849      	ldr	r1, [r1, #4]
 8006ab6:	0849      	lsrs	r1, r1, #1
 8006ab8:	2000      	movs	r0, #0
 8006aba:	460c      	mov	r4, r1
 8006abc:	4605      	mov	r5, r0
 8006abe:	eb12 0804 	adds.w	r8, r2, r4
 8006ac2:	eb43 0905 	adc.w	r9, r3, r5
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	469a      	mov	sl, r3
 8006ace:	4693      	mov	fp, r2
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	465b      	mov	r3, fp
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fc20 	bl	800031c <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aea:	d308      	bcc.n	8006afe <UART_SetConfig+0x9a2>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af2:	d204      	bcs.n	8006afe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006afa:	60da      	str	r2, [r3, #12]
 8006afc:	e17f      	b.n	8006dfe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b04:	e17b      	b.n	8006dfe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0e:	f040 80bd 	bne.w	8006c8c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	dc48      	bgt.n	8006bac <UART_SetConfig+0xa50>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db7b      	blt.n	8006c16 <UART_SetConfig+0xaba>
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d879      	bhi.n	8006c16 <UART_SetConfig+0xaba>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x9cc>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006bb3 	.word	0x08006bb3
 8006b2c:	08006bbb 	.word	0x08006bbb
 8006b30:	08006c17 	.word	0x08006c17
 8006b34:	08006c17 	.word	0x08006c17
 8006b38:	08006bc3 	.word	0x08006bc3
 8006b3c:	08006c17 	.word	0x08006c17
 8006b40:	08006c17 	.word	0x08006c17
 8006b44:	08006c17 	.word	0x08006c17
 8006b48:	08006bd3 	.word	0x08006bd3
 8006b4c:	08006c17 	.word	0x08006c17
 8006b50:	08006c17 	.word	0x08006c17
 8006b54:	08006c17 	.word	0x08006c17
 8006b58:	08006c17 	.word	0x08006c17
 8006b5c:	08006c17 	.word	0x08006c17
 8006b60:	08006c17 	.word	0x08006c17
 8006b64:	08006c17 	.word	0x08006c17
 8006b68:	08006be3 	.word	0x08006be3
 8006b6c:	08006c17 	.word	0x08006c17
 8006b70:	08006c17 	.word	0x08006c17
 8006b74:	08006c17 	.word	0x08006c17
 8006b78:	08006c17 	.word	0x08006c17
 8006b7c:	08006c17 	.word	0x08006c17
 8006b80:	08006c17 	.word	0x08006c17
 8006b84:	08006c17 	.word	0x08006c17
 8006b88:	08006c17 	.word	0x08006c17
 8006b8c:	08006c17 	.word	0x08006c17
 8006b90:	08006c17 	.word	0x08006c17
 8006b94:	08006c17 	.word	0x08006c17
 8006b98:	08006c17 	.word	0x08006c17
 8006b9c:	08006c17 	.word	0x08006c17
 8006ba0:	08006c17 	.word	0x08006c17
 8006ba4:	08006c17 	.word	0x08006c17
 8006ba8:	08006c09 	.word	0x08006c09
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d02e      	beq.n	8006c0e <UART_SetConfig+0xab2>
 8006bb0:	e031      	b.n	8006c16 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fc ffe1 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bb8:	e033      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bba:	f7fc fff3 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8006bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc0:	e02f      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe f9b8 	bl	8004f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd0:	e027      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd2:	f107 0318 	add.w	r3, r7, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fb04 	bl	80051e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be0:	e01f      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be2:	4b69      	ldr	r3, [pc, #420]	; (8006d88 <UART_SetConfig+0xc2c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bee:	4b66      	ldr	r3, [pc, #408]	; (8006d88 <UART_SetConfig+0xc2c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	08db      	lsrs	r3, r3, #3
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	4a64      	ldr	r2, [pc, #400]	; (8006d8c <UART_SetConfig+0xc30>)
 8006bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c00:	e00f      	b.n	8006c22 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c02:	4b62      	ldr	r3, [pc, #392]	; (8006d8c <UART_SetConfig+0xc30>)
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c06:	e00c      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c08:	4b61      	ldr	r3, [pc, #388]	; (8006d90 <UART_SetConfig+0xc34>)
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0c:	e009      	b.n	8006c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c14:	e005      	b.n	8006c22 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80ea 	beq.w	8006dfe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	4a55      	ldr	r2, [pc, #340]	; (8006d84 <UART_SetConfig+0xc28>)
 8006c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c3c:	005a      	lsls	r2, r3, #1
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d916      	bls.n	8006c84 <UART_SetConfig+0xb28>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d212      	bcs.n	8006c84 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f023 030f 	bic.w	r3, r3, #15
 8006c66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c76:	4313      	orrs	r3, r2
 8006c78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e0bc      	b.n	8006dfe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c8a:	e0b8      	b.n	8006dfe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	dc4b      	bgt.n	8006d2c <UART_SetConfig+0xbd0>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f2c0 8087 	blt.w	8006da8 <UART_SetConfig+0xc4c>
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	f200 8084 	bhi.w	8006da8 <UART_SetConfig+0xc4c>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0xb4c>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006d33 	.word	0x08006d33
 8006cac:	08006d3b 	.word	0x08006d3b
 8006cb0:	08006da9 	.word	0x08006da9
 8006cb4:	08006da9 	.word	0x08006da9
 8006cb8:	08006d43 	.word	0x08006d43
 8006cbc:	08006da9 	.word	0x08006da9
 8006cc0:	08006da9 	.word	0x08006da9
 8006cc4:	08006da9 	.word	0x08006da9
 8006cc8:	08006d53 	.word	0x08006d53
 8006ccc:	08006da9 	.word	0x08006da9
 8006cd0:	08006da9 	.word	0x08006da9
 8006cd4:	08006da9 	.word	0x08006da9
 8006cd8:	08006da9 	.word	0x08006da9
 8006cdc:	08006da9 	.word	0x08006da9
 8006ce0:	08006da9 	.word	0x08006da9
 8006ce4:	08006da9 	.word	0x08006da9
 8006ce8:	08006d63 	.word	0x08006d63
 8006cec:	08006da9 	.word	0x08006da9
 8006cf0:	08006da9 	.word	0x08006da9
 8006cf4:	08006da9 	.word	0x08006da9
 8006cf8:	08006da9 	.word	0x08006da9
 8006cfc:	08006da9 	.word	0x08006da9
 8006d00:	08006da9 	.word	0x08006da9
 8006d04:	08006da9 	.word	0x08006da9
 8006d08:	08006da9 	.word	0x08006da9
 8006d0c:	08006da9 	.word	0x08006da9
 8006d10:	08006da9 	.word	0x08006da9
 8006d14:	08006da9 	.word	0x08006da9
 8006d18:	08006da9 	.word	0x08006da9
 8006d1c:	08006da9 	.word	0x08006da9
 8006d20:	08006da9 	.word	0x08006da9
 8006d24:	08006da9 	.word	0x08006da9
 8006d28:	08006d9b 	.word	0x08006d9b
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d037      	beq.n	8006da0 <UART_SetConfig+0xc44>
 8006d30:	e03a      	b.n	8006da8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d32:	f7fc ff21 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8006d36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d38:	e03c      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d3a:	f7fc ff33 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8006d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d40:	e038      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f8f8 	bl	8004f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	e030      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d52:	f107 0318 	add.w	r3, r7, #24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fa44 	bl	80051e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d60:	e028      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <UART_SetConfig+0xc2c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d012      	beq.n	8006d94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <UART_SetConfig+0xc2c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <UART_SetConfig+0xc30>)
 8006d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d80:	e018      	b.n	8006db4 <UART_SetConfig+0xc58>
 8006d82:	bf00      	nop
 8006d84:	08008260 	.word	0x08008260
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <UART_SetConfig+0xccc>)
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d98:	e00c      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <UART_SetConfig+0xcd0>)
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9e:	e009      	b.n	8006db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da6:	e005      	b.n	8006db4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006db2:	bf00      	nop
    }

    if (pclk != 0U)
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d021      	beq.n	8006dfe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <UART_SetConfig+0xcd4>)
 8006dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	441a      	add	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d909      	bls.n	8006df8 <UART_SetConfig+0xc9c>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dea:	d205      	bcs.n	8006df8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	e002      	b.n	8006dfe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2200      	movs	r2, #0
 8006e12:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2200      	movs	r2, #0
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3748      	adds	r7, #72	; 0x48
 8006e22:	46bd      	mov	sp, r7
 8006e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e28:	03d09000 	.word	0x03d09000
 8006e2c:	003d0900 	.word	0x003d0900
 8006e30:	08008260 	.word	0x08008260

08006e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f32:	d10a      	bne.n	8006f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b098      	sub	sp, #96	; 0x60
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f88:	f7fa f9e4 	bl	8001354 <HAL_GetTick>
 8006f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d12f      	bne.n	8006ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f88e 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d022      	beq.n	8006ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	653b      	str	r3, [r7, #80]	; 0x50
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e6      	bne.n	8006fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e063      	b.n	80070c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b04      	cmp	r3, #4
 8007008:	d149      	bne.n	800709e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007012:	2200      	movs	r2, #0
 8007014:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f857 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d03c      	beq.n	800709e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	623b      	str	r3, [r7, #32]
   return(result);
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
 8007044:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	60fb      	str	r3, [r7, #12]
   return(result);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	64bb      	str	r3, [r7, #72]	; 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007076:	61fa      	str	r2, [r7, #28]
 8007078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	69b9      	ldr	r1, [r7, #24]
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	617b      	str	r3, [r7, #20]
   return(result);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e012      	b.n	80070c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3758      	adds	r7, #88	; 0x58
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070dc:	e049      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d045      	beq.n	8007172 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e6:	f7fa f935 	bl	8001354 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <UART_WaitOnFlagUntilTimeout+0x30>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e048      	b.n	8007192 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d031      	beq.n	8007172 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b08      	cmp	r3, #8
 800711a:	d110      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2208      	movs	r2, #8
 8007122:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f95b 	bl	80073e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2208      	movs	r2, #8
 800712e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e029      	b.n	8007192 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714c:	d111      	bne.n	8007172 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f941 	bl	80073e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e00f      	b.n	8007192 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4013      	ands	r3, r2
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	bf0c      	ite	eq
 8007182:	2301      	moveq	r3, #1
 8007184:	2300      	movne	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	429a      	cmp	r2, r3
 800718e:	d0a6      	beq.n	80070de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800719c:	b480      	push	{r7}
 800719e:	b0a3      	sub	sp, #140	; 0x8c
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d10e      	bne.n	80071ee <UART_Start_Receive_IT+0x52>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <UART_Start_Receive_IT+0x48>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071e2:	e02d      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	22ff      	movs	r2, #255	; 0xff
 80071e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071ec:	e028      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <UART_Start_Receive_IT+0x76>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <UART_Start_Receive_IT+0x6c>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007206:	e01b      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	227f      	movs	r2, #127	; 0x7f
 800720c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007210:	e016      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800721a:	d10d      	bne.n	8007238 <UART_Start_Receive_IT+0x9c>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <UART_Start_Receive_IT+0x92>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	227f      	movs	r2, #127	; 0x7f
 8007228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800722c:	e008      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	223f      	movs	r2, #63	; 0x3f
 8007232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007236:	e003      	b.n	8007240 <UART_Start_Receive_IT+0xa4>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	; 0x22
 800724c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3308      	adds	r3, #8
 8007256:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007274:	673a      	str	r2, [r7, #112]	; 0x70
 8007276:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800727a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e3      	bne.n	8007250 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800728c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007290:	d14f      	bne.n	8007332 <UART_Start_Receive_IT+0x196>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	429a      	cmp	r2, r3
 800729c:	d349      	bcc.n	8007332 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a6:	d107      	bne.n	80072b8 <UART_Start_Receive_IT+0x11c>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a47      	ldr	r2, [pc, #284]	; (80073d0 <UART_Start_Receive_IT+0x234>)
 80072b4:	675a      	str	r2, [r3, #116]	; 0x74
 80072b6:	e002      	b.n	80072be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a46      	ldr	r2, [pc, #280]	; (80073d4 <UART_Start_Receive_IT+0x238>)
 80072bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01a      	beq.n	80072fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e4      	bne.n	80072c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800731c:	64ba      	str	r2, [r7, #72]	; 0x48
 800731e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800732a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_Start_Receive_IT+0x160>
 8007330:	e046      	b.n	80073c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d107      	bne.n	800734c <UART_Start_Receive_IT+0x1b0>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d103      	bne.n	800734c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a24      	ldr	r2, [pc, #144]	; (80073d8 <UART_Start_Receive_IT+0x23c>)
 8007348:	675a      	str	r2, [r3, #116]	; 0x74
 800734a:	e002      	b.n	8007352 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a23      	ldr	r2, [pc, #140]	; (80073dc <UART_Start_Receive_IT+0x240>)
 8007350:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d019      	beq.n	800738e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800736e:	677b      	str	r3, [r7, #116]	; 0x74
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
 800737a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800737e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <UART_Start_Receive_IT+0x1be>
 800738c:	e018      	b.n	80073c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f043 0320 	orr.w	r3, r3, #32
 80073a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ac:	623b      	str	r3, [r7, #32]
 80073ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	6a3a      	ldr	r2, [r7, #32]
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	378c      	adds	r7, #140	; 0x8c
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	08007c01 	.word	0x08007c01
 80073d4:	080078a1 	.word	0x080078a1
 80073d8:	080076e9 	.word	0x080076e9
 80073dc:	08007531 	.word	0x08007531

080073e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b095      	sub	sp, #84	; 0x54
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	643b      	str	r3, [r7, #64]	; 0x40
 8007408:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800740c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	61fb      	str	r3, [r7, #28]
   return(result);
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <UART_EndRxTransfer+0xc8>)
 800742e:	4013      	ands	r3, r2
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d118      	bne.n	8007488 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	60bb      	str	r3, [r7, #8]
   return(result);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 0310 	bic.w	r3, r3, #16
 800746a:	647b      	str	r3, [r7, #68]	; 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6979      	ldr	r1, [r7, #20]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	613b      	str	r3, [r7, #16]
   return(result);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e6      	bne.n	8007456 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800749c:	bf00      	nop
 800749e:	3754      	adds	r7, #84	; 0x54
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	effffffe 	.word	0xeffffffe

080074ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7fe fe30 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	613b      	str	r3, [r7, #16]
   return(result);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fe fdfb 	bl	800611c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007526:	bf00      	nop
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b09c      	sub	sp, #112	; 0x70
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800753e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007548:	2b22      	cmp	r3, #34	; 0x22
 800754a:	f040 80be 	bne.w	80076ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800755c:	b2d9      	uxtb	r1, r3
 800755e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	400a      	ands	r2, r1
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	f040 80a1 	bne.w	80076da <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	667b      	str	r3, [r7, #100]	; 0x64
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075ea:	647a      	str	r2, [r7, #68]	; 0x44
 80075ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a33      	ldr	r2, [pc, #204]	; (80076e4 <UART_RxISR_8BIT+0x1b4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01f      	beq.n	800765c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d018      	beq.n	800765c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	623b      	str	r3, [r7, #32]
   return(result);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800763e:	663b      	str	r3, [r7, #96]	; 0x60
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800764e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007660:	2b01      	cmp	r3, #1
 8007662:	d12e      	bne.n	80076c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	60fb      	str	r3, [r7, #12]
   return(result);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0310 	bic.w	r3, r3, #16
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	69b9      	ldr	r1, [r7, #24]
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	617b      	str	r3, [r7, #20]
   return(result);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d103      	bne.n	80076b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fe fd42 	bl	8006144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076c0:	e00b      	b.n	80076da <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fad8 	bl	8000c78 <HAL_UART_RxCpltCallback>
}
 80076c8:	e007      	b.n	80076da <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0208 	orr.w	r2, r2, #8
 80076d8:	619a      	str	r2, [r3, #24]
}
 80076da:	bf00      	nop
 80076dc:	3770      	adds	r7, #112	; 0x70
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	58000c00 	.word	0x58000c00

080076e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b09c      	sub	sp, #112	; 0x70
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007700:	2b22      	cmp	r3, #34	; 0x22
 8007702:	f040 80be 	bne.w	8007882 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007714:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007716:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800771a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800771e:	4013      	ands	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007724:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772a:	1c9a      	adds	r2, r3, #2
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 80a1 	bne.w	8007892 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007764:	667b      	str	r3, [r7, #100]	; 0x64
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	657b      	str	r3, [r7, #84]	; 0x54
 8007770:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800777c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	663b      	str	r3, [r7, #96]	; 0x60
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077a2:	643a      	str	r2, [r7, #64]	; 0x40
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a33      	ldr	r2, [pc, #204]	; (800789c <UART_RxISR_16BIT+0x1b4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d01f      	beq.n	8007814 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007802:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d12e      	bne.n	800787a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f023 0310 	bic.w	r3, r3, #16
 8007836:	65bb      	str	r3, [r7, #88]	; 0x58
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6979      	ldr	r1, [r7, #20]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b10      	cmp	r3, #16
 8007860:	d103      	bne.n	800786a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fe fc66 	bl	8006144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007878:	e00b      	b.n	8007892 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7f9 f9fc 	bl	8000c78 <HAL_UART_RxCpltCallback>
}
 8007880:	e007      	b.n	8007892 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0208 	orr.w	r2, r2, #8
 8007890:	619a      	str	r2, [r3, #24]
}
 8007892:	bf00      	nop
 8007894:	3770      	adds	r7, #112	; 0x70
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	58000c00 	.word	0x58000c00

080078a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b0ac      	sub	sp, #176	; 0xb0
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d6:	2b22      	cmp	r3, #34	; 0x22
 80078d8:	f040 8180 	bne.w	8007bdc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078e2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078e6:	e123      	b.n	8007b30 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80078f6:	b2d9      	uxtb	r1, r3
 80078f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007902:	400a      	ands	r2, r1
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800792e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b00      	cmp	r3, #0
 8007938:	d053      	beq.n	80079e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800793a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d011      	beq.n	800796a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2201      	movs	r2, #1
 8007958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	f043 0201 	orr.w	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d011      	beq.n	800799a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2202      	movs	r2, #2
 8007988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	f043 0204 	orr.w	r2, r3, #4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800799a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d011      	beq.n	80079ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2204      	movs	r2, #4
 80079b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	f043 0202 	orr.w	r2, r3, #2
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fe fbab 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 80a0 	bne.w	8007b30 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80079fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a14:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e4      	bne.n	80079f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a38:	4b6e      	ldr	r3, [pc, #440]	; (8007bf4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a4a:	66ba      	str	r2, [r7, #104]	; 0x68
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e3      	bne.n	8007a26 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a60      	ldr	r2, [pc, #384]	; (8007bf8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d021      	beq.n	8007ac0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01a      	beq.n	8007ac0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aac:	657b      	str	r3, [r7, #84]	; 0x54
 8007aae:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e4      	bne.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d130      	bne.n	8007b2a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af0:	643b      	str	r3, [r7, #64]	; 0x40
 8007af2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e4      	bne.n	8007ace <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d103      	bne.n	8007b1a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2210      	movs	r2, #16
 8007b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fe fb0e 	bl	8006144 <HAL_UARTEx_RxEventCallback>
 8007b28:	e002      	b.n	8007b30 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 f8a4 	bl	8000c78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b30:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d006      	beq.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f47f aed1 	bne.w	80078e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d049      	beq.n	8007bec <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b5e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d242      	bcs.n	8007bec <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e3      	bne.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ba2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f043 0320 	orr.w	r3, r3, #32
 8007bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6979      	ldr	r1, [r7, #20]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e4      	bne.n	8007ba4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bda:	e007      	b.n	8007bec <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0208 	orr.w	r2, r2, #8
 8007bea:	619a      	str	r2, [r3, #24]
}
 8007bec:	bf00      	nop
 8007bee:	37b0      	adds	r7, #176	; 0xb0
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	effffffe 	.word	0xeffffffe
 8007bf8:	58000c00 	.word	0x58000c00
 8007bfc:	08007531 	.word	0x08007531

08007c00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b0ae      	sub	sp, #184	; 0xb8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c0e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c36:	2b22      	cmp	r3, #34	; 0x22
 8007c38:	f040 8184 	bne.w	8007f44 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c46:	e127      	b.n	8007e98 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c5a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007c5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007c62:	4013      	ands	r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d053      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d011      	beq.n	8007cce <UART_RxISR_16BIT_FIFOEN+0xce>
 8007caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00b      	beq.n	8007cce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	f043 0201 	orr.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2202      	movs	r2, #2
 8007cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	f043 0204 	orr.w	r2, r3, #4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d011      	beq.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f043 0202 	orr.w	r2, r3, #2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d006      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7fe f9f9 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 80a2 	bne.w	8007e98 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e2      	bne.n	8007d54 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007da0:	4b6e      	ldr	r3, [pc, #440]	; (8007f5c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007da2:	4013      	ands	r3, r2
 8007da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e3      	bne.n	8007d8e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a60      	ldr	r2, [pc, #384]	; (8007f60 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d021      	beq.n	8007e28 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01a      	beq.n	8007e28 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e4      	bne.n	8007df2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d130      	bne.n	8007e92 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
 8007e5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d103      	bne.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2210      	movs	r2, #16
 8007e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fe f95a 	bl	8006144 <HAL_UARTEx_RxEventCallback>
 8007e90:	e002      	b.n	8007e98 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7f8 fef0 	bl	8000c78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e98:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d006      	beq.n	8007eae <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f aecd 	bne.w	8007c48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007eb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d049      	beq.n	8007f54 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ec6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d242      	bcs.n	8007f54 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e3      	bne.n	8007ece <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007f0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f043 0320 	orr.w	r3, r3, #32
 8007f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	69b9      	ldr	r1, [r7, #24]
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e4      	bne.n	8007f0c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f42:	e007      	b.n	8007f54 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	619a      	str	r2, [r3, #24]
}
 8007f54:	bf00      	nop
 8007f56:	37b8      	adds	r7, #184	; 0xb8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	effffffe 	.word	0xeffffffe
 8007f60:	58000c00 	.word	0x58000c00
 8007f64:	080076e9 	.word	0x080076e9

08007f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_UARTEx_DisableFifoMode+0x16>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e027      	b.n	800800a <HAL_UARTEx_DisableFifoMode+0x66>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2224      	movs	r2, #36	; 0x24
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800802a:	2302      	movs	r3, #2
 800802c:	e02d      	b.n	800808a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2224      	movs	r2, #36	; 0x24
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f850 	bl	8008110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e02d      	b.n	8008106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2224      	movs	r2, #36	; 0x24
 80080b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0201 	bic.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f812 	bl	8008110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008130:	e031      	b.n	8008196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008132:	2310      	movs	r3, #16
 8008134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008136:	2310      	movs	r3, #16
 8008138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	0e5b      	lsrs	r3, r3, #25
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	0f5b      	lsrs	r3, r3, #29
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	7b3a      	ldrb	r2, [r7, #12]
 800815e:	4911      	ldr	r1, [pc, #68]	; (80081a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008160:	5c8a      	ldrb	r2, [r1, r2]
 8008162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008166:	7b3a      	ldrb	r2, [r7, #12]
 8008168:	490f      	ldr	r1, [pc, #60]	; (80081a8 <UARTEx_SetNbDataToProcess+0x98>)
 800816a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800816c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	7b7a      	ldrb	r2, [r7, #13]
 800817c:	4909      	ldr	r1, [pc, #36]	; (80081a4 <UARTEx_SetNbDataToProcess+0x94>)
 800817e:	5c8a      	ldrb	r2, [r1, r2]
 8008180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008184:	7b7a      	ldrb	r2, [r7, #13]
 8008186:	4908      	ldr	r1, [pc, #32]	; (80081a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800818a:	fb93 f3f2 	sdiv	r3, r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	08008278 	.word	0x08008278
 80081a8:	08008280 	.word	0x08008280

080081ac <memset>:
 80081ac:	4402      	add	r2, r0
 80081ae:	4603      	mov	r3, r0
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d100      	bne.n	80081b6 <memset+0xa>
 80081b4:	4770      	bx	lr
 80081b6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ba:	e7f9      	b.n	80081b0 <memset+0x4>

080081bc <strstr>:
 80081bc:	780a      	ldrb	r2, [r1, #0]
 80081be:	b570      	push	{r4, r5, r6, lr}
 80081c0:	b96a      	cbnz	r2, 80081de <strstr+0x22>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d109      	bne.n	80081dc <strstr+0x20>
 80081c8:	460c      	mov	r4, r1
 80081ca:	4605      	mov	r5, r0
 80081cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0f6      	beq.n	80081c2 <strstr+0x6>
 80081d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80081d8:	429e      	cmp	r6, r3
 80081da:	d0f7      	beq.n	80081cc <strstr+0x10>
 80081dc:	3001      	adds	r0, #1
 80081de:	7803      	ldrb	r3, [r0, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1ef      	bne.n	80081c4 <strstr+0x8>
 80081e4:	4618      	mov	r0, r3
 80081e6:	e7ec      	b.n	80081c2 <strstr+0x6>

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4d0d      	ldr	r5, [pc, #52]	; (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <__libc_init_array+0x3c>)
 80081ee:	1b64      	subs	r4, r4, r5
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2600      	movs	r6, #0
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4d0b      	ldr	r5, [pc, #44]	; (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x44>)
 80081fc:	f000 f818 	bl	8008230 <_init>
 8008200:	1b64      	subs	r4, r4, r5
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2600      	movs	r6, #0
 8008206:	42a6      	cmp	r6, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008210:	4798      	blx	r3
 8008212:	3601      	adds	r6, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f855 3b04 	ldr.w	r3, [r5], #4
 800821a:	4798      	blx	r3
 800821c:	3601      	adds	r6, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	08008290 	.word	0x08008290
 8008224:	08008290 	.word	0x08008290
 8008228:	08008290 	.word	0x08008290
 800822c:	08008294 	.word	0x08008294

08008230 <_init>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	bf00      	nop
 8008234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	469e      	mov	lr, r3
 800823a:	4770      	bx	lr

0800823c <_fini>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	bf00      	nop
 8008240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008242:	bc08      	pop	{r3}
 8008244:	469e      	mov	lr, r3
 8008246:	4770      	bx	lr
