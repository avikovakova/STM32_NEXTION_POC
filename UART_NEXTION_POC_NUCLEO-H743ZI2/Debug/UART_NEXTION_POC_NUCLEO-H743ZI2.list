
UART_NEXTION_POC_NUCLEO-H743ZI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  08008d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000024  08008d38  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000084  08008d98  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  240000e4  08008df8  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008b0  08008df8  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020112  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197aa  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd1  00000000  00000000  000398ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0003c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c68  00000000  00000000  0003d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000374b3  00000000  00000000  0003e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b3f  00000000  00000000  000755eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015e337  00000000  00000000  0008c12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004434  00000000  00000000  001ea464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001ee898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e4 	.word	0x240000e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008c98 	.word	0x08008c98

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e8 	.word	0x240000e8
 80002d4:	08008c98 	.word	0x08008c98

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 ff05 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8f7 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fa8b 	bl	8000b0c <MX_GPIO_Init>
  MX_ETH_Init();
 80005f6:	f000 f973 	bl	80008e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fa09 	bl	8000a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 fa53 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000602:	f000 f9b9 	bl	8000978 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4 ,rx_data ,rx_data_size/2);
 8000606:	2201      	movs	r2, #1
 8000608:	4965      	ldr	r1, [pc, #404]	; (80007a0 <main+0x1bc>)
 800060a:	4866      	ldr	r0, [pc, #408]	; (80007a4 <main+0x1c0>)
 800060c:	f005 fcae 	bl	8005f6c <HAL_UART_Receive_IT>
  rx_ind = 0;
 8000610:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <main+0x1c4>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
  rx_data_flag=0;
 8000616:	4b65      	ldr	r3, [pc, #404]	; (80007ac <main+0x1c8>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  stop_ind = 0;
 800061c:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <main+0x1cc>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
  data[0] = "116"; //t
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <main+0x1d0>)
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b64      	ldr	r3, [pc, #400]	; (80007b8 <main+0x1d4>)
 8000628:	701a      	strb	r2, [r3, #0]
  data[1] = "51"; //3
 800062a:	4b64      	ldr	r3, [pc, #400]	; (80007bc <main+0x1d8>)
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b62      	ldr	r3, [pc, #392]	; (80007b8 <main+0x1d4>)
 8000630:	705a      	strb	r2, [r3, #1]
  data[2] = "46"; //.
 8000632:	4b63      	ldr	r3, [pc, #396]	; (80007c0 <main+0x1dc>)
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b60      	ldr	r3, [pc, #384]	; (80007b8 <main+0x1d4>)
 8000638:	709a      	strb	r2, [r3, #2]
  data[3] = "116"; //t
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <main+0x1d0>)
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b5e      	ldr	r3, [pc, #376]	; (80007b8 <main+0x1d4>)
 8000640:	70da      	strb	r2, [r3, #3]
  data[4] = "120"; //x
 8000642:	4b60      	ldr	r3, [pc, #384]	; (80007c4 <main+0x1e0>)
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <main+0x1d4>)
 8000648:	711a      	strb	r2, [r3, #4]
  data[5] = "116"; //t
 800064a:	4b5a      	ldr	r3, [pc, #360]	; (80007b4 <main+0x1d0>)
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b5a      	ldr	r3, [pc, #360]	; (80007b8 <main+0x1d4>)
 8000650:	715a      	strb	r2, [r3, #5]
  data[6] = "61"; //=
 8000652:	4b5d      	ldr	r3, [pc, #372]	; (80007c8 <main+0x1e4>)
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <main+0x1d4>)
 8000658:	719a      	strb	r2, [r3, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t arr1[5]={3,4,6,6,8};
 800065a:	4a5c      	ldr	r2, [pc, #368]	; (80007cc <main+0x1e8>)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000662:	6018      	str	r0, [r3, #0]
 8000664:	3304      	adds	r3, #4
 8000666:	7019      	strb	r1, [r3, #0]
	  uint8_t arr2[2]={6,6};
 8000668:	f240 6306 	movw	r3, #1542	; 0x606
 800066c:	803b      	strh	r3, [r7, #0]
	  int i=0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]


	  if( strstr(arr1,arr2) ) //if(rx_ind==20)
 8000672:	463a      	mov	r2, r7
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f008 fad3 	bl	8008c24 <strstr>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <main+0xa8>
	  {
		  HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f000 ff48 	bl	800151c <HAL_Delay>
	  }
    /* USER CODE BEGIN 3 */
	//HAL_Delay(1000);

	if(rx_data_flag == 1)
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <main+0x1c8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d1e2      	bne.n	800065a <main+0x76>
	{
		data[0] = 't'; //t //116
 8000694:	4b48      	ldr	r3, [pc, #288]	; (80007b8 <main+0x1d4>)
 8000696:	2274      	movs	r2, #116	; 0x74
 8000698:	701a      	strb	r2, [r3, #0]
		data[1] = '3'; //3 //51
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x1d4>)
 800069c:	2233      	movs	r2, #51	; 0x33
 800069e:	705a      	strb	r2, [r3, #1]
		data[2] = '.'; //. //46
 80006a0:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <main+0x1d4>)
 80006a2:	222e      	movs	r2, #46	; 0x2e
 80006a4:	709a      	strb	r2, [r3, #2]
		data[3] = 't'; //t //116
 80006a6:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <main+0x1d4>)
 80006a8:	2274      	movs	r2, #116	; 0x74
 80006aa:	70da      	strb	r2, [r3, #3]
		data[4] = 'x'; //x //120
 80006ac:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <main+0x1d4>)
 80006ae:	2278      	movs	r2, #120	; 0x78
 80006b0:	711a      	strb	r2, [r3, #4]
		data[5] = 't'; //t //116
 80006b2:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <main+0x1d4>)
 80006b4:	2274      	movs	r2, #116	; 0x74
 80006b6:	715a      	strb	r2, [r3, #5]
		data[6] = '='; //= //61
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <main+0x1d4>)
 80006ba:	223d      	movs	r2, #61	; 0x3d
 80006bc:	719a      	strb	r2, [r3, #6]
		data[7] = '"'; //= //61
 80006be:	4b3e      	ldr	r3, [pc, #248]	; (80007b8 <main+0x1d4>)
 80006c0:	2222      	movs	r2, #34	; 0x22
 80006c2:	71da      	strb	r2, [r3, #7]
		i=0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
		start_ind = strstr(rx_buffer,stream_start);
 80006c8:	4941      	ldr	r1, [pc, #260]	; (80007d0 <main+0x1ec>)
 80006ca:	4842      	ldr	r0, [pc, #264]	; (80007d4 <main+0x1f0>)
 80006cc:	f008 faaa 	bl	8008c24 <strstr>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <main+0x1f4>)
 80006d4:	6013      	str	r3, [r2, #0]
		start_ind = start_ind +5+1; // +5 for the STARTT string and +1 for the next value
 80006d6:	4b40      	ldr	r3, [pc, #256]	; (80007d8 <main+0x1f4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3306      	adds	r3, #6
 80006dc:	4a3e      	ldr	r2, [pc, #248]	; (80007d8 <main+0x1f4>)
 80006de:	6013      	str	r3, [r2, #0]
		while(start_ind<stop_ind)
 80006e0:	e00e      	b.n	8000700 <main+0x11c>
		{
			data[8+i]=*start_ind;
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <main+0x1f4>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3308      	adds	r3, #8
 80006ea:	7811      	ldrb	r1, [r2, #0]
 80006ec:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <main+0x1d4>)
 80006ee:	54d1      	strb	r1, [r2, r3]
			start_ind++;
 80006f0:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <main+0x1f4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a38      	ldr	r2, [pc, #224]	; (80007d8 <main+0x1f4>)
 80006f8:	6013      	str	r3, [r2, #0]
			i++;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
		while(start_ind<stop_ind)
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <main+0x1f4>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <main+0x1cc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3ea      	bcc.n	80006e2 <main+0xfe>
		}
		uint8_t s = *start_ind;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <main+0x1f4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	72bb      	strb	r3, [r7, #10]
		/*for(i=0; i<strlen(rx_buffer)-(7+5);i++)
		{
			data[8+i]=rx_buffer[i];
			//data1[i]=rx_buffer[5+i];
		}*/
		data[8+i]='"';
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3308      	adds	r3, #8
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <main+0x1d4>)
 800071a:	2122      	movs	r1, #34	; 0x22
 800071c:	54d1      	strb	r1, [r2, r3]

		//HAL_Delay(1000);
		HAL_UART_Transmit(&huart4 ,data ,strlen(data),1000);
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <main+0x1d4>)
 8000720:	f7ff fdda 	bl	80002d8 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	4922      	ldr	r1, [pc, #136]	; (80007b8 <main+0x1d4>)
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <main+0x1c0>)
 8000730:	f005 fb8e 	bl	8005e50 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart4 ,cmd_end ,strlen(cmd_end),1000);
 8000734:	4829      	ldr	r0, [pc, #164]	; (80007dc <main+0x1f8>)
 8000736:	f7ff fdcf 	bl	80002d8 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	4926      	ldr	r1, [pc, #152]	; (80007dc <main+0x1f8>)
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <main+0x1c0>)
 8000746:	f005 fb83 	bl	8005e50 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart4 ,data1 ,strlen(data1),1000);


		rx_data_flag=0;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <main+0x1c8>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		rx_ind = 0;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <main+0x1c4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

		uint8_t index=0;
 8000756:	2300      	movs	r3, #0
 8000758:	72fb      	strb	r3, [r7, #11]
		uint8_t len = strlen(data);
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <main+0x1d4>)
 800075c:	f7ff fdbc 	bl	80002d8 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	727b      	strb	r3, [r7, #9]
		for(index=0; index<len;index++)
 8000764:	2300      	movs	r3, #0
 8000766:	72fb      	strb	r3, [r7, #11]
 8000768:	e006      	b.n	8000778 <main+0x194>
		{
			data[index]=0;
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <main+0x1d4>)
 800076e:	2100      	movs	r1, #0
 8000770:	54d1      	strb	r1, [r2, r3]
		for(index=0; index<len;index++)
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	3301      	adds	r3, #1
 8000776:	72fb      	strb	r3, [r7, #11]
 8000778:	7afa      	ldrb	r2, [r7, #11]
 800077a:	7a7b      	ldrb	r3, [r7, #9]
 800077c:	429a      	cmp	r2, r3
 800077e:	d3f4      	bcc.n	800076a <main+0x186>
		}


		for(index=0; index<len;index++)
 8000780:	2300      	movs	r3, #0
 8000782:	72fb      	strb	r3, [r7, #11]
 8000784:	e006      	b.n	8000794 <main+0x1b0>
		{
			rx_buffer[index]=0;
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <main+0x1f0>)
 800078a:	2100      	movs	r1, #0
 800078c:	54d1      	strb	r1, [r2, r3]
		for(index=0; index<len;index++)
 800078e:	7afb      	ldrb	r3, [r7, #11]
 8000790:	3301      	adds	r3, #1
 8000792:	72fb      	strb	r3, [r7, #11]
 8000794:	7afa      	ldrb	r2, [r7, #11]
 8000796:	7a7b      	ldrb	r3, [r7, #9]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3f4      	bcc.n	8000786 <main+0x1a2>
  {
 800079c:	e75d      	b.n	800065a <main+0x76>
 800079e:	bf00      	nop
 80007a0:	24000820 	.word	0x24000820
 80007a4:	240001e8 	.word	0x240001e8
 80007a8:	2400081c 	.word	0x2400081c
 80007ac:	24000822 	.word	0x24000822
 80007b0:	240008a0 	.word	0x240008a0
 80007b4:	08008cb0 	.word	0x08008cb0
 80007b8:	24000888 	.word	0x24000888
 80007bc:	08008cb4 	.word	0x08008cb4
 80007c0:	08008cb8 	.word	0x08008cb8
 80007c4:	08008cbc 	.word	0x08008cbc
 80007c8:	08008cc0 	.word	0x08008cc0
 80007cc:	08008cc4 	.word	0x08008cc4
 80007d0:	2400000c 	.word	0x2400000c
 80007d4:	24000824 	.word	0x24000824
 80007d8:	2400089c 	.word	0x2400089c
 80007dc:	24000000 	.word	0x24000000

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fa10 	bl	8008c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 fa0a 	bl	8008c14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000800:	2002      	movs	r0, #2
 8000802:	f002 fc79 	bl	80030f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <SystemClock_Config+0xf8>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a32      	ldr	r2, [pc, #200]	; (80008d8 <SystemClock_Config+0xf8>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <SystemClock_Config+0xf8>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <SystemClock_Config+0xfc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <SystemClock_Config+0xfc>)
 800082a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <SystemClock_Config+0xfc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800084c:	2303      	movs	r3, #3
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000856:	2301      	movs	r3, #1
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800086a:	2318      	movs	r3, #24
 800086c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000872:	2304      	movs	r3, #4
 8000874:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087a:	230c      	movs	r3, #12
 800087c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fc7e 	bl	800318c <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000896:	f000 fa5f 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	233f      	movs	r3, #63	; 0x3f
 800089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f8be 	bl	8003a40 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xee>
  {
    Error_Handler();
 80008ca:	f000 fa45 	bl	8000d58 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3770      	adds	r7, #112	; 0x70
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58000400 	.word	0x58000400
 80008dc:	58024800 	.word	0x58024800

080008e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_ETH_Init+0x80>)
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <MX_ETH_Init+0x84>)
 80008e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ETH_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ETH_Init+0x88>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ETH_Init+0x88>)
 80008f8:	22e1      	movs	r2, #225	; 0xe1
 80008fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ETH_Init+0x88>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ETH_Init+0x88>)
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ETH_Init+0x80>)
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_ETH_Init+0x88>)
 8000912:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ETH_Init+0x80>)
 8000916:	2201      	movs	r2, #1
 8000918:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ETH_Init+0x80>)
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_ETH_Init+0x8c>)
 800091e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ETH_Init+0x80>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_ETH_Init+0x90>)
 8000924:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ETH_Init+0x80>)
 8000928:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800092c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_ETH_Init+0x80>)
 8000930:	f001 fcac 	bl	800228c <HAL_ETH_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 fa0d 	bl	8000d58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800093e:	2238      	movs	r2, #56	; 0x38
 8000940:	2100      	movs	r1, #0
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ETH_Init+0x94>)
 8000944:	f008 f966 	bl	8008c14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_ETH_Init+0x94>)
 800094a:	2221      	movs	r2, #33	; 0x21
 800094c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_ETH_Init+0x94>)
 8000950:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000954:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_ETH_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000138 	.word	0x24000138
 8000964:	40028000 	.word	0x40028000
 8000968:	240008a4 	.word	0x240008a4
 800096c:	24000084 	.word	0x24000084
 8000970:	24000024 	.word	0x24000024
 8000974:	24000100 	.word	0x24000100

08000978 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_UART4_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_UART4_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_UART4_Init+0x90>)
 8000984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_UART4_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_UART4_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_UART4_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_UART4_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_UART4_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_UART4_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_UART4_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_UART4_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_UART4_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_UART4_Init+0x90>)
 80009c2:	f005 f9f5 	bl	8005db0 <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9c4 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_UART4_Init+0x90>)
 80009d4:	f007 fd49 	bl	800846a <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9bb 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_UART4_Init+0x90>)
 80009e6:	f007 fd7e 	bl	80084e6 <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f9b2 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_UART4_Init+0x90>)
 80009f6:	f007 fcff 	bl	80083f8 <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f9aa 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240001e8 	.word	0x240001e8
 8000a0c:	40004c00 	.word	0x40004c00

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART3_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	f005 f9a9 	bl	8005db0 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f978 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f007 fcfd 	bl	800846a <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f96f 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f007 fd32 	bl	80084e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f966 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f007 fcb3 	bl	80083f8 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f95e 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2400027c 	.word	0x2400027c
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	2209      	movs	r2, #9
 8000ab6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af0:	f002 f9b9 	bl	8002e66 <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000afa:	f000 f92d 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	24000310 	.word	0x24000310
 8000b08:	40080000 	.word	0x40080000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b62      	ldr	r3, [pc, #392]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a60      	ldr	r2, [pc, #384]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b40:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	4a59      	ldr	r2, [pc, #356]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b50:	4b56      	ldr	r3, [pc, #344]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a51      	ldr	r2, [pc, #324]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a4a      	ldr	r2, [pc, #296]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4b44      	ldr	r3, [pc, #272]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	4a33      	ldr	r2, [pc, #204]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bfa:	482d      	ldr	r0, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0x1a4>)
 8000bfc:	f002 f91a 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000c08:	f002 f914 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x1ac>)
 8000c12:	f002 f90f 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4824      	ldr	r0, [pc, #144]	; (8000cbc <MX_GPIO_Init+0x1b0>)
 8000c2c:	f001 ff52 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c30:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0x1a4>)
 8000c4a:	f001 ff43 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000c68:	f001 ff34 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x1b4>)
 8000c82:	f001 ff27 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_GPIO_Init+0x1ac>)
 8000c9e:	f001 ff19 	bl	8002ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58020c00 	.word	0x58020c00
 8000cb8:	58021000 	.word	0x58021000
 8000cbc:	58020800 	.word	0x58020800
 8000cc0:	58021800 	.word	0x58021800

08000cc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  HAL_UART_Receive_IT(&huart4 ,rx_data ,rx_data_size/2);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	491b      	ldr	r1, [pc, #108]	; (8000d3c <HAL_UART_RxCpltCallback+0x78>)
 8000cd0:	481b      	ldr	r0, [pc, #108]	; (8000d40 <HAL_UART_RxCpltCallback+0x7c>)
 8000cd2:	f005 f94b 	bl	8005f6c <HAL_UART_Receive_IT>

  uint8_t i=0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
  for(i; i<strlen(rx_data); i++)
 8000cda:	e00c      	b.n	8000cf6 <HAL_UART_RxCpltCallback+0x32>
	  rx_buffer[rx_ind+i]=rx_data[i];
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_RxCpltCallback+0x80>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	440b      	add	r3, r1
 8000ce8:	4914      	ldr	r1, [pc, #80]	; (8000d3c <HAL_UART_RxCpltCallback+0x78>)
 8000cea:	5c89      	ldrb	r1, [r1, r2]
 8000cec:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <HAL_UART_RxCpltCallback+0x84>)
 8000cee:	54d1      	strb	r1, [r2, r3]
  for(i; i<strlen(rx_data); i++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfc      	ldrb	r4, [r7, #15]
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <HAL_UART_RxCpltCallback+0x78>)
 8000cfa:	f7ff faed 	bl	80002d8 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	429c      	cmp	r4, r3
 8000d02:	d3eb      	bcc.n	8000cdc <HAL_UART_RxCpltCallback+0x18>

  rx_ind = rx_ind+i;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_UART_RxCpltCallback+0x80>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_UART_RxCpltCallback+0x80>)
 8000d10:	701a      	strb	r2, [r3, #0]

  stop_ind = strstr(rx_buffer,stream_end);
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <HAL_UART_RxCpltCallback+0x88>)
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <HAL_UART_RxCpltCallback+0x84>)
 8000d16:	f007 ff85 	bl	8008c24 <strstr>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_UART_RxCpltCallback+0x8c>)
 8000d1e:	6013      	str	r3, [r2, #0]
  if(stop_ind) //rx_ind==9
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_UART_RxCpltCallback+0x8c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <HAL_UART_RxCpltCallback+0x70>
  {
	  rx_data_flag=1;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_UART_RxCpltCallback+0x90>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
	  rx_ind = 0;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_UART_RxCpltCallback+0x80>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
  }
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	24000820 	.word	0x24000820
 8000d40:	240001e8 	.word	0x240001e8
 8000d44:	2400081c 	.word	0x2400081c
 8000d48:	24000824 	.word	0x24000824
 8000d4c:	24000004 	.word	0x24000004
 8000d50:	240008a0 	.word	0x240008a0
 8000d54:	24000822 	.word	0x24000822

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x30>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x30>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	58024400 	.word	0x58024400

08000d98 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a59      	ldr	r2, [pc, #356]	; (8000f1c <HAL_ETH_MspInit+0x184>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	f040 80ab 	bne.w	8000f12 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dbc:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc2:	4a57      	ldr	r2, [pc, #348]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dcc:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de0:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000dec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000df8:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_ETH_MspInit+0x188>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e8e:	2332      	movs	r3, #50	; 0x32
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <HAL_ETH_MspInit+0x18c>)
 8000eaa:	f001 fe13 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eae:	2386      	movs	r3, #134	; 0x86
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <HAL_ETH_MspInit+0x190>)
 8000eca:	f001 fe03 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <HAL_ETH_MspInit+0x194>)
 8000eec:	f001 fdf2 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ef0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f02:	230b      	movs	r3, #11
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <HAL_ETH_MspInit+0x198>)
 8000f0e:	f001 fde1 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	; 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40028000 	.word	0x40028000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	58020800 	.word	0x58020800
 8000f28:	58020000 	.word	0x58020000
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	58021800 	.word	0x58021800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0be      	sub	sp, #248	; 0xf8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fe5d 	bl	8008c14 <memset>
  if(huart->Instance==UART4)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_UART_MspInit+0x1b8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d173      	bne.n	800104c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f64:	f04f 0202 	mov.w	r2, #2
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f8ec 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f86:	f7ff fee7 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f90:	4a57      	ldr	r2, [pc, #348]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000f92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f9a:	4b55      	ldr	r3, [pc, #340]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001006:	4619      	mov	r1, r3
 8001008:	483a      	ldr	r0, [pc, #232]	; (80010f4 <HAL_UART_MspInit+0x1c0>)
 800100a:	f001 fd63 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800100e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001028:	2308      	movs	r3, #8
 800102a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001032:	4619      	mov	r1, r3
 8001034:	4830      	ldr	r0, [pc, #192]	; (80010f8 <HAL_UART_MspInit+0x1c4>)
 8001036:	f001 fd4d 	bl	8002ad4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2034      	movs	r0, #52	; 0x34
 8001040:	f000 fb8b 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001044:	2034      	movs	r0, #52	; 0x34
 8001046:	f000 fba2 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800104a:	e04b      	b.n	80010e4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_UART_MspInit+0x1c8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d146      	bne.n	80010e4 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001056:	f04f 0202 	mov.w	r2, #2
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f873 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001078:	f7ff fe6e 	bl	8000d58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 800107e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 800108e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0x1bc>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d2:	2307      	movs	r3, #7
 80010d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_UART_MspInit+0x1cc>)
 80010e0:	f001 fcf8 	bl	8002ad4 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	37f8      	adds	r7, #248	; 0xf8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004c00 	.word	0x40004c00
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020800 	.word	0x58020800
 80010fc:	40004800 	.word	0x40004800
 8001100:	58020c00 	.word	0x58020c00

08001104 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ba      	sub	sp, #232	; 0xe8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	22c0      	movs	r2, #192	; 0xc0
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 fd75 	bl	8008c14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <HAL_PCD_MspInit+0xec>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d159      	bne.n	80011e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001134:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001140:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f003 f803 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001158:	f7ff fdfe 	bl	8000d58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800115c:	f002 f806 	bl	800316c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800117e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001198:	230a      	movs	r3, #10
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <HAL_PCD_MspInit+0xf4>)
 80011a6:	f001 fc95 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <HAL_PCD_MspInit+0xf4>)
 80011c6:	f001 fc85 	bl	8002ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 80011d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_PCD_MspInit+0xf0>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	37e8      	adds	r7, #232	; 0xe8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40080000 	.word	0x40080000
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020000 	.word	0x58020000

080011fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
}
 8001204:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <__NVIC_SystemReset+0x24>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800120e:	4904      	ldr	r1, [pc, #16]	; (8001220 <__NVIC_SystemReset+0x24>)
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_SystemReset+0x28>)
 8001212:	4313      	orrs	r3, r2
 8001214:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001216:	f3bf 8f4f 	dsb	sy
}
 800121a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <__NVIC_SystemReset+0x20>
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	05fa0004 	.word	0x05fa0004

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001232:	f7ff ffe3 	bl	80011fc <__NVIC_SystemReset>

08001236 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <BusFault_Handler+0x4>

08001242 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f931 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <UART4_IRQHandler+0x10>)
 8001286:	f004 febd 	bl	8006004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240001e8 	.word	0x240001e8

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <SystemInit+0xe4>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a36      	ldr	r2, [pc, #216]	; (8001378 <SystemInit+0xe4>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a8:	4b34      	ldr	r3, [pc, #208]	; (800137c <SystemInit+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	d807      	bhi.n	80012c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <SystemInit+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 030f 	bic.w	r3, r3, #15
 80012bc:	4a2f      	ldr	r2, [pc, #188]	; (800137c <SystemInit+0xe8>)
 80012be:	f043 0307 	orr.w	r3, r3, #7
 80012c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <SystemInit+0xec>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <SystemInit+0xec>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <SystemInit+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <SystemInit+0xec>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4929      	ldr	r1, [pc, #164]	; (8001380 <SystemInit+0xec>)
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <SystemInit+0xf0>)
 80012de:	4013      	ands	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <SystemInit+0xe8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <SystemInit+0xe8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 030f 	bic.w	r3, r3, #15
 80012f6:	4a21      	ldr	r2, [pc, #132]	; (800137c <SystemInit+0xe8>)
 80012f8:	f043 0307 	orr.w	r3, r3, #7
 80012fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <SystemInit+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <SystemInit+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <SystemInit+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <SystemInit+0xec>)
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <SystemInit+0xf4>)
 8001314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <SystemInit+0xec>)
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <SystemInit+0xf8>)
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <SystemInit+0xec>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <SystemInit+0xfc>)
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <SystemInit+0xec>)
 8001324:	2200      	movs	r2, #0
 8001326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <SystemInit+0xec>)
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <SystemInit+0xfc>)
 800132c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <SystemInit+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <SystemInit+0xec>)
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <SystemInit+0xfc>)
 8001338:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <SystemInit+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <SystemInit+0xec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <SystemInit+0xec>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <SystemInit+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <SystemInit+0x100>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <SystemInit+0x104>)
 8001358:	4013      	ands	r3, r2
 800135a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800135e:	d202      	bcs.n	8001366 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <SystemInit+0x108>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <SystemInit+0x10c>)
 8001368:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800136c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	52002000 	.word	0x52002000
 8001380:	58024400 	.word	0x58024400
 8001384:	eaf6ed7f 	.word	0xeaf6ed7f
 8001388:	02020200 	.word	0x02020200
 800138c:	01ff0000 	.word	0x01ff0000
 8001390:	01010280 	.word	0x01010280
 8001394:	5c001000 	.word	0x5c001000
 8001398:	ffff0000 	.word	0xffff0000
 800139c:	51008108 	.word	0x51008108
 80013a0:	52004000 	.word	0x52004000

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a8:	f7ff ff74 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f007 fc3d 	bl	8008c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f905 	bl	80005e4 <main>
  bx  lr
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013e4:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 80013e8:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 80013ec:	240000e4 	.word	0x240000e4
  ldr r4, =_ebss
 80013f0:	240008b0 	.word	0x240008b0

080013f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC3_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f9a0 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001404:	f002 fcd2 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_Init+0x68>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	4913      	ldr	r1, [pc, #76]	; (8001464 <HAL_Init+0x6c>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_Init+0x68>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_Init+0x6c>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_Init+0x70>)
 800143a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_Init+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f814 	bl	8001470 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e002      	b.n	8001458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001452:	f7ff fc87 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024400 	.word	0x58024400
 8001464:	08008ccc 	.word	0x08008ccc
 8001468:	24000018 	.word	0x24000018
 800146c:	24000014 	.word	0x24000014

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_InitTick+0x60>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e021      	b.n	80014c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_InitTick+0x64>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_InitTick+0x60>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f985 	bl	80017aa <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f94f 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x68>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	24000020 	.word	0x24000020
 80014d4:	24000014 	.word	0x24000014
 80014d8:	2400001c 	.word	0x2400001c

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	24000020 	.word	0x24000020
 8001500:	240008ac 	.word	0x240008ac

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	240008ac 	.word	0x240008ac

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000020 	.word	0x24000020

08001564 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetREVID+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0c1b      	lsrs	r3, r3, #16
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	5c001000 	.word	0x5c001000

0800157c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58000400 	.word	0x58000400

080015a4 <__NVIC_SetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	05fa0000 	.word	0x05fa0000

080015ec <__NVIC_GetPriorityGrouping>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	; (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff40 	bl	80015ec <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff33 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa4 	bl	8001700 <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff fe9a 	bl	8001504 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2dc      	b.n	8001d96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d008      	beq.n	80017fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e2cd      	b.n	8001d96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a76      	ldr	r2, [pc, #472]	; (80019d8 <HAL_DMA_Abort+0x214>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d04a      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a74      	ldr	r2, [pc, #464]	; (80019dc <HAL_DMA_Abort+0x218>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d045      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a73      	ldr	r2, [pc, #460]	; (80019e0 <HAL_DMA_Abort+0x21c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d040      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a71      	ldr	r2, [pc, #452]	; (80019e4 <HAL_DMA_Abort+0x220>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d03b      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a70      	ldr	r2, [pc, #448]	; (80019e8 <HAL_DMA_Abort+0x224>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d036      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_DMA_Abort+0x228>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6d      	ldr	r2, [pc, #436]	; (80019f0 <HAL_DMA_Abort+0x22c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d02c      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6b      	ldr	r2, [pc, #428]	; (80019f4 <HAL_DMA_Abort+0x230>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d027      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <HAL_DMA_Abort+0x234>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d022      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a68      	ldr	r2, [pc, #416]	; (80019fc <HAL_DMA_Abort+0x238>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01d      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <HAL_DMA_Abort+0x23c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d018      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <HAL_DMA_Abort+0x240>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_DMA_Abort+0x244>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00e      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a62      	ldr	r2, [pc, #392]	; (8001a0c <HAL_DMA_Abort+0x248>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d009      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a61      	ldr	r2, [pc, #388]	; (8001a10 <HAL_DMA_Abort+0x24c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d004      	beq.n	800189a <HAL_DMA_Abort+0xd6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a5f      	ldr	r2, [pc, #380]	; (8001a14 <HAL_DMA_Abort+0x250>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_DMA_Abort+0xda>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_DMA_Abort+0xdc>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 021e 	bic.w	r2, r2, #30
 80018b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 020e 	bic.w	r2, r2, #14
 80018da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3c      	ldr	r2, [pc, #240]	; (80019d8 <HAL_DMA_Abort+0x214>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d072      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3a      	ldr	r2, [pc, #232]	; (80019dc <HAL_DMA_Abort+0x218>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d06d      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a39      	ldr	r2, [pc, #228]	; (80019e0 <HAL_DMA_Abort+0x21c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d068      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a37      	ldr	r2, [pc, #220]	; (80019e4 <HAL_DMA_Abort+0x220>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d063      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <HAL_DMA_Abort+0x224>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d05e      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_DMA_Abort+0x228>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d059      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a33      	ldr	r2, [pc, #204]	; (80019f0 <HAL_DMA_Abort+0x22c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d054      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_DMA_Abort+0x230>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d04f      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_DMA_Abort+0x234>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d04a      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_DMA_Abort+0x238>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d045      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <HAL_DMA_Abort+0x23c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d040      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_DMA_Abort+0x240>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d03b      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_DMA_Abort+0x244>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d036      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_DMA_Abort+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d031      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DMA_Abort+0x24c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d02c      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_DMA_Abort+0x250>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d027      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_DMA_Abort+0x254>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_DMA_Abort+0x258>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01d      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_DMA_Abort+0x25c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d018      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_DMA_Abort+0x260>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_DMA_Abort+0x264>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00e      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_DMA_Abort+0x268>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d009      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_DMA_Abort+0x26c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d004      	beq.n	80019d2 <HAL_DMA_Abort+0x20e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_DMA_Abort+0x270>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d132      	bne.n	8001a38 <HAL_DMA_Abort+0x274>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e031      	b.n	8001a3a <HAL_DMA_Abort+0x276>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	58025408 	.word	0x58025408
 8001a1c:	5802541c 	.word	0x5802541c
 8001a20:	58025430 	.word	0x58025430
 8001a24:	58025444 	.word	0x58025444
 8001a28:	58025458 	.word	0x58025458
 8001a2c:	5802546c 	.word	0x5802546c
 8001a30:	58025480 	.word	0x58025480
 8001a34:	58025494 	.word	0x58025494
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6d      	ldr	r2, [pc, #436]	; (8001c08 <HAL_DMA_Abort+0x444>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04a      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6b      	ldr	r2, [pc, #428]	; (8001c0c <HAL_DMA_Abort+0x448>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d045      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_DMA_Abort+0x44c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d040      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_DMA_Abort+0x450>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d03b      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_DMA_Abort+0x454>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d036      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_DMA_Abort+0x458>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d031      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a64      	ldr	r2, [pc, #400]	; (8001c20 <HAL_DMA_Abort+0x45c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d02c      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a62      	ldr	r2, [pc, #392]	; (8001c24 <HAL_DMA_Abort+0x460>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d027      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a61      	ldr	r2, [pc, #388]	; (8001c28 <HAL_DMA_Abort+0x464>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5f      	ldr	r2, [pc, #380]	; (8001c2c <HAL_DMA_Abort+0x468>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	; (8001c30 <HAL_DMA_Abort+0x46c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d018      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a5c      	ldr	r2, [pc, #368]	; (8001c34 <HAL_DMA_Abort+0x470>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5b      	ldr	r2, [pc, #364]	; (8001c38 <HAL_DMA_Abort+0x474>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a59      	ldr	r2, [pc, #356]	; (8001c3c <HAL_DMA_Abort+0x478>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_DMA_Abort+0x47c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_DMA_Abort+0x32a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <HAL_DMA_Abort+0x480>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d108      	bne.n	8001b00 <HAL_DMA_Abort+0x33c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e007      	b.n	8001b10 <HAL_DMA_Abort+0x34c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b10:	e013      	b.n	8001b3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b12:	f7ff fcf7 	bl	8001504 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d90c      	bls.n	8001b3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e12d      	b.n	8001d96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e5      	bne.n	8001b12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <HAL_DMA_Abort+0x444>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04a      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_DMA_Abort+0x448>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d045      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <HAL_DMA_Abort+0x44c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d040      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <HAL_DMA_Abort+0x450>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d03b      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_DMA_Abort+0x454>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d036      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_DMA_Abort+0x458>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_DMA_Abort+0x45c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d02c      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_DMA_Abort+0x460>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d027      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_DMA_Abort+0x464>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <HAL_DMA_Abort+0x468>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01d      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_DMA_Abort+0x46c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d018      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_DMA_Abort+0x470>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_DMA_Abort+0x474>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00e      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_DMA_Abort+0x478>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d009      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_DMA_Abort+0x47c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_DMA_Abort+0x422>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <HAL_DMA_Abort+0x480>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_DMA_Abort+0x426>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_DMA_Abort+0x428>
 8001bea:	2300      	movs	r3, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d02b      	beq.n	8001c48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	223f      	movs	r2, #63	; 0x3f
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	e02a      	b.n	8001c5e <HAL_DMA_Abort+0x49a>
 8001c08:	40020010 	.word	0x40020010
 8001c0c:	40020028 	.word	0x40020028
 8001c10:	40020040 	.word	0x40020040
 8001c14:	40020058 	.word	0x40020058
 8001c18:	40020070 	.word	0x40020070
 8001c1c:	40020088 	.word	0x40020088
 8001c20:	400200a0 	.word	0x400200a0
 8001c24:	400200b8 	.word	0x400200b8
 8001c28:	40020410 	.word	0x40020410
 8001c2c:	40020428 	.word	0x40020428
 8001c30:	40020440 	.word	0x40020440
 8001c34:	40020458 	.word	0x40020458
 8001c38:	40020470 	.word	0x40020470
 8001c3c:	40020488 	.word	0x40020488
 8001c40:	400204a0 	.word	0x400204a0
 8001c44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2201      	movs	r2, #1
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <HAL_DMA_Abort+0x5dc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d072      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_DMA_Abort+0x5e0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d06d      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_DMA_Abort+0x5e4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d068      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_DMA_Abort+0x5e8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d063      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_DMA_Abort+0x5ec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <HAL_DMA_Abort+0x5f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d059      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a46      	ldr	r2, [pc, #280]	; (8001db8 <HAL_DMA_Abort+0x5f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d054      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a44      	ldr	r2, [pc, #272]	; (8001dbc <HAL_DMA_Abort+0x5f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04f      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_DMA_Abort+0x5fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04a      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <HAL_DMA_Abort+0x600>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d045      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <HAL_DMA_Abort+0x604>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d040      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <HAL_DMA_Abort+0x608>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d03b      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a3d      	ldr	r2, [pc, #244]	; (8001dd0 <HAL_DMA_Abort+0x60c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d036      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_DMA_Abort+0x610>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_DMA_Abort+0x614>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d02c      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a38      	ldr	r2, [pc, #224]	; (8001ddc <HAL_DMA_Abort+0x618>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d027      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a37      	ldr	r2, [pc, #220]	; (8001de0 <HAL_DMA_Abort+0x61c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <HAL_DMA_Abort+0x620>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <HAL_DMA_Abort+0x624>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d018      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_DMA_Abort+0x628>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_DMA_Abort+0x62c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <HAL_DMA_Abort+0x630>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_DMA_Abort+0x634>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort+0x58a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <HAL_DMA_Abort+0x638>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Abort+0x58e>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_Abort+0x590>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020010 	.word	0x40020010
 8001da4:	40020028 	.word	0x40020028
 8001da8:	40020040 	.word	0x40020040
 8001dac:	40020058 	.word	0x40020058
 8001db0:	40020070 	.word	0x40020070
 8001db4:	40020088 	.word	0x40020088
 8001db8:	400200a0 	.word	0x400200a0
 8001dbc:	400200b8 	.word	0x400200b8
 8001dc0:	40020410 	.word	0x40020410
 8001dc4:	40020428 	.word	0x40020428
 8001dc8:	40020440 	.word	0x40020440
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	40020470 	.word	0x40020470
 8001dd4:	40020488 	.word	0x40020488
 8001dd8:	400204a0 	.word	0x400204a0
 8001ddc:	400204b8 	.word	0x400204b8
 8001de0:	58025408 	.word	0x58025408
 8001de4:	5802541c 	.word	0x5802541c
 8001de8:	58025430 	.word	0x58025430
 8001dec:	58025444 	.word	0x58025444
 8001df0:	58025458 	.word	0x58025458
 8001df4:	5802546c 	.word	0x5802546c
 8001df8:	58025480 	.word	0x58025480
 8001dfc:	58025494 	.word	0x58025494

08001e00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e237      	b.n	8002282 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e22c      	b.n	8002282 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_DMA_Abort_IT+0x1a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04a      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5b      	ldr	r2, [pc, #364]	; (8001fa4 <HAL_DMA_Abort_IT+0x1a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a59      	ldr	r2, [pc, #356]	; (8001fa8 <HAL_DMA_Abort_IT+0x1a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d040      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_DMA_Abort_IT+0x1ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03b      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d036      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02c      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_DMA_Abort_IT+0x1bc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_DMA_Abort_IT+0x1c0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_DMA_Abort_IT+0x1c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_DMA_Abort_IT+0x1c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_DMA_Abort_IT+0x1cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <HAL_DMA_Abort_IT+0x1d0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_DMA_Abort_IT+0x1d4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_DMA_Abort_IT+0x1d8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <HAL_DMA_Abort_IT+0x1dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_DMA_Abort_IT+0xcc>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_DMA_Abort_IT+0xce>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8086 	beq.w	8001fe0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_DMA_Abort_IT+0x1a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <HAL_DMA_Abort_IT+0x1a4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d045      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_DMA_Abort_IT+0x1a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <HAL_DMA_Abort_IT+0x1ac>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d03b      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02c      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_DMA_Abort_IT+0x1bc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d027      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_DMA_Abort_IT+0x1c0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_DMA_Abort_IT+0x1c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01d      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_DMA_Abort_IT+0x1c8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d018      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_DMA_Abort_IT+0x1cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_DMA_Abort_IT+0x1d0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_DMA_Abort_IT+0x1d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_DMA_Abort_IT+0x1d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x17c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_DMA_Abort_IT+0x1dc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <HAL_DMA_Abort_IT+0x18e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e178      	b.n	8002280 <HAL_DMA_Abort_IT+0x480>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e16f      	b.n	8002280 <HAL_DMA_Abort_IT+0x480>
 8001fa0:	40020010 	.word	0x40020010
 8001fa4:	40020028 	.word	0x40020028
 8001fa8:	40020040 	.word	0x40020040
 8001fac:	40020058 	.word	0x40020058
 8001fb0:	40020070 	.word	0x40020070
 8001fb4:	40020088 	.word	0x40020088
 8001fb8:	400200a0 	.word	0x400200a0
 8001fbc:	400200b8 	.word	0x400200b8
 8001fc0:	40020410 	.word	0x40020410
 8001fc4:	40020428 	.word	0x40020428
 8001fc8:	40020440 	.word	0x40020440
 8001fcc:	40020458 	.word	0x40020458
 8001fd0:	40020470 	.word	0x40020470
 8001fd4:	40020488 	.word	0x40020488
 8001fd8:	400204a0 	.word	0x400204a0
 8001fdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 020e 	bic.w	r2, r2, #14
 8001fee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <HAL_DMA_Abort_IT+0x3a8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6b      	ldr	r2, [pc, #428]	; (80021ac <HAL_DMA_Abort_IT+0x3ac>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d045      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <HAL_DMA_Abort_IT+0x3b0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d040      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <HAL_DMA_Abort_IT+0x3b4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d03b      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a66      	ldr	r2, [pc, #408]	; (80021b8 <HAL_DMA_Abort_IT+0x3b8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d036      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_DMA_Abort_IT+0x3bc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d031      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a63      	ldr	r2, [pc, #396]	; (80021c0 <HAL_DMA_Abort_IT+0x3c0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02c      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a62      	ldr	r2, [pc, #392]	; (80021c4 <HAL_DMA_Abort_IT+0x3c4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d027      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_DMA_Abort_IT+0x3c8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d022      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5f      	ldr	r2, [pc, #380]	; (80021cc <HAL_DMA_Abort_IT+0x3cc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01d      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_DMA_Abort_IT+0x3d0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a5c      	ldr	r2, [pc, #368]	; (80021d4 <HAL_DMA_Abort_IT+0x3d4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_DMA_Abort_IT+0x3d8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a59      	ldr	r2, [pc, #356]	; (80021dc <HAL_DMA_Abort_IT+0x3dc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_DMA_Abort_IT+0x3e0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_DMA_Abort_IT+0x290>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_DMA_Abort_IT+0x3e4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <HAL_DMA_Abort_IT+0x2a2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e007      	b.n	80020b2 <HAL_DMA_Abort_IT+0x2b2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	; (80021a8 <HAL_DMA_Abort_IT+0x3a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d072      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <HAL_DMA_Abort_IT+0x3ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d06d      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a39      	ldr	r2, [pc, #228]	; (80021b0 <HAL_DMA_Abort_IT+0x3b0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d068      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <HAL_DMA_Abort_IT+0x3b4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d063      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <HAL_DMA_Abort_IT+0x3b8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a34      	ldr	r2, [pc, #208]	; (80021bc <HAL_DMA_Abort_IT+0x3bc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d059      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <HAL_DMA_Abort_IT+0x3c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d054      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_DMA_Abort_IT+0x3c4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <HAL_DMA_Abort_IT+0x3c8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <HAL_DMA_Abort_IT+0x3cc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_DMA_Abort_IT+0x3d0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <HAL_DMA_Abort_IT+0x3d4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <HAL_DMA_Abort_IT+0x3d8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	; (80021dc <HAL_DMA_Abort_IT+0x3dc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_DMA_Abort_IT+0x3e0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <HAL_DMA_Abort_IT+0x3e4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_DMA_Abort_IT+0x3e8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_DMA_Abort_IT+0x3ec>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_DMA_Abort_IT+0x3f0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_DMA_Abort_IT+0x3f4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_DMA_Abort_IT+0x3f8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_DMA_Abort_IT+0x3fc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_DMA_Abort_IT+0x400>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x3a2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_DMA_Abort_IT+0x404>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d132      	bne.n	8002208 <HAL_DMA_Abort_IT+0x408>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e031      	b.n	800220a <HAL_DMA_Abort_IT+0x40a>
 80021a6:	bf00      	nop
 80021a8:	40020010 	.word	0x40020010
 80021ac:	40020028 	.word	0x40020028
 80021b0:	40020040 	.word	0x40020040
 80021b4:	40020058 	.word	0x40020058
 80021b8:	40020070 	.word	0x40020070
 80021bc:	40020088 	.word	0x40020088
 80021c0:	400200a0 	.word	0x400200a0
 80021c4:	400200b8 	.word	0x400200b8
 80021c8:	40020410 	.word	0x40020410
 80021cc:	40020428 	.word	0x40020428
 80021d0:	40020440 	.word	0x40020440
 80021d4:	40020458 	.word	0x40020458
 80021d8:	40020470 	.word	0x40020470
 80021dc:	40020488 	.word	0x40020488
 80021e0:	400204a0 	.word	0x400204a0
 80021e4:	400204b8 	.word	0x400204b8
 80021e8:	58025408 	.word	0x58025408
 80021ec:	5802541c 	.word	0x5802541c
 80021f0:	58025430 	.word	0x58025430
 80021f4:	58025444 	.word	0x58025444
 80021f8:	58025458 	.word	0x58025458
 80021fc:	5802546c 	.word	0x5802546c
 8002200:	58025480 	.word	0x58025480
 8002204:	58025494 	.word	0x58025494
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d028      	beq.n	8002260 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2201      	movs	r2, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800223c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002254:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800225e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop

0800228c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0cf      	b.n	800243e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2223      	movs	r2, #35	; 0x23
 80022ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fd71 	bl	8000d98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_ETH_Init+0x1bc>)
 80022b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022bc:	4a62      	ldr	r2, [pc, #392]	; (8002448 <HAL_ETH_Init+0x1bc>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_ETH_Init+0x1bc>)
 80022c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7a1b      	ldrb	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff f94d 	bl	800157c <HAL_SYSCFG_ETHInterfaceSelect>
 80022e2:	e003      	b.n	80022ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80022e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80022e8:	f7ff f948 	bl	800157c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_ETH_Init+0x1c0>)
 80022ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff f8fc 	bl	8001504 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800230e:	e011      	b.n	8002334 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002310:	f7ff f8f8 	bl	8001504 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800231e:	d909      	bls.n	8002334 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2204      	movs	r2, #4
 8002324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	22e0      	movs	r2, #224	; 0xe0
 800232c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e084      	b.n	800243e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e4      	bne.n	8002310 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f886 	bl	8002458 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800234c:	f001 fea8 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8002350:	4603      	mov	r3, r0
 8002352:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <HAL_ETH_Init+0x1c4>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3a01      	subs	r2, #1
 8002360:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa71 	bl	800284c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002376:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002386:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	22e0      	movs	r2, #224	; 0xe0
 80023a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e049      	b.n	800243e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80023b6:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_ETH_Init+0x1c8>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6952      	ldr	r2, [r2, #20]
 80023be:	0051      	lsls	r1, r2, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fad9 	bl	8002986 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fb1f 	bl	8002a18 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	3305      	adds	r3, #5
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021a      	lsls	r2, r3, #8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	3303      	adds	r3, #3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	061a      	lsls	r2, r3, #24
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3302      	adds	r3, #2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002418:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002426:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2210      	movs	r2, #16
 8002438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400
 800244c:	58000400 	.word	0x58000400
 8002450:	431bde83 	.word	0x431bde83
 8002454:	ffff8001 	.word	0xffff8001

08002458 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002468:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002470:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002472:	f001 fe15 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8002476:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4a1e      	ldr	r2, [pc, #120]	; (80024f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d908      	bls.n	8002492 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d804      	bhi.n	8002492 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e027      	b.n	80024e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d908      	bls.n	80024ac <HAL_ETH_SetMDIOClockRange+0x54>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d204      	bcs.n	80024ac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e01a      	b.n	80024e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d303      	bcc.n	80024bc <HAL_ETH_SetMDIOClockRange+0x64>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d911      	bls.n	80024e0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d908      	bls.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_ETH_SetMDIOClockRange+0xac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d804      	bhi.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e005      	b.n	80024e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e000      	b.n	80024e2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	01312cff 	.word	0x01312cff
 80024f8:	02160ebf 	.word	0x02160ebf
 80024fc:	03938700 	.word	0x03938700
 8002500:	05f5e0ff 	.word	0x05f5e0ff
 8002504:	08f0d17f 	.word	0x08f0d17f

08002508 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800251a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002522:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	7b1b      	ldrb	r3, [r3, #12]
 8002528:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800252a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7b5b      	ldrb	r3, [r3, #13]
 8002530:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002532:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	7b9b      	ldrb	r3, [r3, #14]
 8002538:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800253a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7bdb      	ldrb	r3, [r3, #15]
 8002540:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002542:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	7c12      	ldrb	r2, [r2, #16]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d102      	bne.n	8002552 <ETH_SetMACConfig+0x4a>
 800254c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0x4c>
 8002552:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002554:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	7c52      	ldrb	r2, [r2, #17]
 800255a:	2a00      	cmp	r2, #0
 800255c:	d102      	bne.n	8002564 <ETH_SetMACConfig+0x5c>
 800255e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002562:	e000      	b.n	8002566 <ETH_SetMACConfig+0x5e>
 8002564:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002566:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7c9b      	ldrb	r3, [r3, #18]
 800256c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800256e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002574:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800257a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	7f1b      	ldrb	r3, [r3, #28]
 8002580:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7f5b      	ldrb	r3, [r3, #29]
 8002588:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800258a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	7f92      	ldrb	r2, [r2, #30]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x92>
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x94>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800259c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7fdb      	ldrb	r3, [r3, #31]
 80025a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d102      	bne.n	80025b6 <ETH_SetMACConfig+0xae>
 80025b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b4:	e000      	b.n	80025b8 <ETH_SetMACConfig+0xb0>
 80025b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80025c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b56      	ldr	r3, [pc, #344]	; (8002734 <ETH_SetMACConfig+0x22c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	430b      	orrs	r3, r1
 80025e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002606:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002608:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002610:	2a00      	cmp	r2, #0
 8002612:	d102      	bne.n	800261a <ETH_SetMACConfig+0x112>
 8002614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002618:	e000      	b.n	800261c <ETH_SetMACConfig+0x114>
 800261a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800261c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4b42      	ldr	r3, [pc, #264]	; (8002738 <ETH_SetMACConfig+0x230>)
 800262e:	4013      	ands	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	430b      	orrs	r3, r1
 8002638:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002640:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <ETH_SetMACConfig+0x234>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	430b      	orrs	r3, r1
 800265c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002664:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800266a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002672:	2a00      	cmp	r2, #0
 8002674:	d101      	bne.n	800267a <ETH_SetMACConfig+0x172>
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	e000      	b.n	800267c <ETH_SetMACConfig+0x174>
 800267a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800267c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002682:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800268e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	430b      	orrs	r3, r1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f023 0103 	bic.w	r1, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80026d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d101      	bne.n	80026f6 <ETH_SetMACConfig+0x1ee>
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	e000      	b.n	80026f8 <ETH_SetMACConfig+0x1f0>
 80026f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002700:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800270a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002718:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	430a      	orrs	r2, r1
 8002724:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	00048083 	.word	0x00048083
 8002738:	c0f88000 	.word	0xc0f88000
 800273c:	fffffef0 	.word	0xfffffef0

08002740 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b38      	ldr	r3, [pc, #224]	; (8002838 <ETH_SetDMAConfig+0xf8>)
 8002756:	4013      	ands	r3, r2
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	6811      	ldr	r1, [r2, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002766:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002772:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7b1b      	ldrb	r3, [r3, #12]
 8002778:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <ETH_SetDMAConfig+0xfc>)
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	430b      	orrs	r3, r1
 8002794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002798:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7b5b      	ldrb	r3, [r3, #13]
 800279e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <ETH_SetDMAConfig+0x100>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	430b      	orrs	r3, r1
 80027c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	7d1b      	ldrb	r3, [r3, #20]
 80027d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7f5b      	ldrb	r3, [r3, #29]
 80027d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <ETH_SetDMAConfig+0x104>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7f1b      	ldrb	r3, [r3, #28]
 8002802:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <ETH_SetDMAConfig+0x108>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	430b      	orrs	r3, r1
 8002824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002828:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	ffff87fd 	.word	0xffff87fd
 800283c:	ffff2ffe 	.word	0xffff2ffe
 8002840:	fffec000 	.word	0xfffec000
 8002844:	ffc0efef 	.word	0xffc0efef
 8002848:	7fc0ffff 	.word	0x7fc0ffff

0800284c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a4      	sub	sp, #144	; 0x90
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800285a:	2300      	movs	r3, #0
 800285c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002894:	2300      	movs	r3, #0
 8002896:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80028a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028c6:	2300      	movs	r3, #0
 80028c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028ce:	2300      	movs	r3, #0
 80028d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028e4:	2320      	movs	r3, #32
 80028e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002926:	2300      	movs	r3, #0
 8002928:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fde6 	bl	8002508 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002940:	2301      	movs	r3, #1
 8002942:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002956:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800295a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002964:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800296c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fee1 	bl	8002740 <ETH_SetDMAConfig>
}
 800297e:	bf00      	nop
 8002980:	3790      	adds	r7, #144	; 0x90
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e01d      	b.n	80029d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	3206      	adds	r2, #6
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3301      	adds	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d9de      	bls.n	8002994 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	461a      	mov	r2, r3
 80029e6:	2303      	movs	r3, #3
 80029e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e023      	b.n	8002a6e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6919      	ldr	r1, [r3, #16]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	3212      	adds	r2, #18
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d9d8      	bls.n	8002a26 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ae2:	4b89      	ldr	r3, [pc, #548]	; (8002d08 <HAL_GPIO_Init+0x234>)
 8002ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ae6:	e194      	b.n	8002e12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8186 	beq.w	8002e0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d005      	beq.n	8002b18 <HAL_GPIO_Init+0x44>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d130      	bne.n	8002b7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4e:	2201      	movs	r2, #1
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0201 	and.w	r2, r3, #1
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d017      	beq.n	8002bb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d123      	bne.n	8002c0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	08da      	lsrs	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3208      	adds	r2, #8
 8002bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	69b9      	ldr	r1, [r7, #24]
 8002c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0203 	and.w	r2, r3, #3
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80e0 	beq.w	8002e0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_GPIO_Init+0x238>)
 8002c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c52:	4a2e      	ldr	r2, [pc, #184]	; (8002d0c <HAL_GPIO_Init+0x238>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_GPIO_Init+0x238>)
 8002c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6a:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <HAL_GPIO_Init+0x23c>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_GPIO_Init+0x240>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d052      	beq.n	8002d3c <HAL_GPIO_Init+0x268>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_GPIO_Init+0x244>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d031      	beq.n	8002d02 <HAL_GPIO_Init+0x22e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_GPIO_Init+0x248>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d02b      	beq.n	8002cfe <HAL_GPIO_Init+0x22a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_GPIO_Init+0x24c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d025      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_GPIO_Init+0x250>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01f      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_GPIO_Init+0x254>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_GPIO_Init+0x258>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <HAL_GPIO_Init+0x25c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00d      	beq.n	8002cea <HAL_GPIO_Init+0x216>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_GPIO_Init+0x260>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_GPIO_Init+0x212>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_GPIO_Init+0x264>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_GPIO_Init+0x20e>
 8002cde:	2309      	movs	r3, #9
 8002ce0:	e02d      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	e02b      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	e029      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e027      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e025      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e023      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e021      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e01f      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e01d      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01b      	b.n	8002d3e <HAL_GPIO_Init+0x26a>
 8002d06:	bf00      	nop
 8002d08:	58000080 	.word	0x58000080
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	58000400 	.word	0x58000400
 8002d14:	58020000 	.word	0x58020000
 8002d18:	58020400 	.word	0x58020400
 8002d1c:	58020800 	.word	0x58020800
 8002d20:	58020c00 	.word	0x58020c00
 8002d24:	58021000 	.word	0x58021000
 8002d28:	58021400 	.word	0x58021400
 8002d2c:	58021800 	.word	0x58021800
 8002d30:	58021c00 	.word	0x58021c00
 8002d34:	58022000 	.word	0x58022000
 8002d38:	58022400 	.word	0x58022400
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	f002 0203 	and.w	r2, r2, #3
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	4093      	lsls	r3, r2
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d4e:	4938      	ldr	r1, [pc, #224]	; (8002e30 <HAL_GPIO_Init+0x35c>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f47f ae63 	bne.w	8002ae8 <HAL_GPIO_Init+0x14>
  }
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3724      	adds	r7, #36	; 0x24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	58000400 	.word	0x58000400

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e50:	e003      	b.n	8002e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	041a      	lsls	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	b08f      	sub	sp, #60	; 0x3c
 8002e6a:	af0a      	add	r7, sp, #40	; 0x28
 8002e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e116      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f936 	bl	8001104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f005 fc10 	bl	80086dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	687e      	ldr	r6, [r7, #4]
 8002ec4:	466d      	mov	r5, sp
 8002ec6:	f106 0410 	add.w	r4, r6, #16
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eda:	1d33      	adds	r3, r6, #4
 8002edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f005 fb8e 	bl	8008600 <USB_CoreInit>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0d7      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 fbfe 	bl	80086fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e04a      	b.n	8002f9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	333d      	adds	r3, #61	; 0x3d
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	333c      	adds	r3, #60	; 0x3c
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3356      	adds	r3, #86	; 0x56
 8002f44:	4602      	mov	r2, r0
 8002f46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3340      	adds	r3, #64	; 0x40
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3344      	adds	r3, #68	; 0x44
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3348      	adds	r3, #72	; 0x48
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334c      	adds	r3, #76	; 0x4c
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3af      	bcc.n	8002f08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e044      	b.n	8003038 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	3301      	adds	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3b5      	bcc.n	8002fae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	687e      	ldr	r6, [r7, #4]
 800304a:	466d      	mov	r5, sp
 800304c:	f106 0410 	add.w	r4, r6, #16
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003060:	1d33      	adds	r3, r6, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	f005 fb97 	bl	8008798 <USB_DevInit>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e014      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f80b 	bl	80030b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 fd55 	bl	8008b4e <USB_DevDisconnect>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	10000003 	.word	0x10000003

080030f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_PWREx_ConfigSupply+0x70>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d00a      	beq.n	8003122 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_PWREx_ConfigSupply+0x70>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e01f      	b.n	800315e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e01d      	b.n	800315e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_PWREx_ConfigSupply+0x70>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 0207 	bic.w	r2, r3, #7
 800312a:	490f      	ldr	r1, [pc, #60]	; (8003168 <HAL_PWREx_ConfigSupply+0x70>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4313      	orrs	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003132:	f7fe f9e7 	bl	8001504 <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003138:	e009      	b.n	800314e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800313a:	f7fe f9e3 	bl	8001504 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003148:	d901      	bls.n	800314e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e007      	b.n	800315e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_PWREx_ConfigSupply+0x70>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	d1ee      	bne.n	800313a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	58024800 	.word	0x58024800

0800316c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	58024800 	.word	0x58024800

0800318c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f000 bc48 	b.w	8003a30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8088 	beq.w	80032be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b99      	ldr	r3, [pc, #612]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b8:	4b96      	ldr	r3, [pc, #600]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d007      	beq.n	80031d4 <HAL_RCC_OscConfig+0x48>
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d111      	bne.n	80031ee <HAL_RCC_OscConfig+0x62>
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d10c      	bne.n	80031ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b8f      	ldr	r3, [pc, #572]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d06d      	beq.n	80032bc <HAL_RCC_OscConfig+0x130>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d169      	bne.n	80032bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f000 bc21 	b.w	8003a30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x7a>
 80031f8:	4b86      	ldr	r3, [pc, #536]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a85      	ldr	r2, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0xd8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x9c>
 800320e:	4b81      	ldr	r3, [pc, #516]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a80      	ldr	r2, [pc, #512]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b7e      	ldr	r3, [pc, #504]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7d      	ldr	r2, [pc, #500]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xd8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0xc0>
 8003232:	4b78      	ldr	r3, [pc, #480]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a77      	ldr	r2, [pc, #476]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b75      	ldr	r3, [pc, #468]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a74      	ldr	r2, [pc, #464]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xd8>
 800324c:	4b71      	ldr	r3, [pc, #452]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a70      	ldr	r2, [pc, #448]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b6e      	ldr	r3, [pc, #440]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6d      	ldr	r2, [pc, #436]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe f94a 	bl	8001504 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe f946 	bl	8001504 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e3d4      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe f936 	bl	8001504 <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe f932 	bl	8001504 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e3c0      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ae:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x110>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80ca 	beq.w	8003460 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032cc:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032d6:	4b4f      	ldr	r3, [pc, #316]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_RCC_OscConfig+0x166>
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b18      	cmp	r3, #24
 80032e6:	d156      	bne.n	8003396 <HAL_RCC_OscConfig+0x20a>
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d151      	bne.n	8003396 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f2:	4b48      	ldr	r3, [pc, #288]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e392      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800330a:	4b42      	ldr	r3, [pc, #264]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0219 	bic.w	r2, r3, #25
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	493f      	ldr	r1, [pc, #252]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f8f2 	bl	8001504 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fe f8ee 	bl	8001504 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e37c      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	f7fe f90f 	bl	8001564 <HAL_GetREVID>
 8003346:	4603      	mov	r3, r0
 8003348:	f241 0203 	movw	r2, #4099	; 0x1003
 800334c:	4293      	cmp	r3, r2
 800334e:	d817      	bhi.n	8003380 <HAL_RCC_OscConfig+0x1f4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d108      	bne.n	800336a <HAL_RCC_OscConfig+0x1de>
 8003358:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003360:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003366:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	e07a      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	4926      	ldr	r1, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337e:	e06f      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	4921      	ldr	r1, [pc, #132]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	e064      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d047      	beq.n	800342e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0219 	bic.w	r2, r3, #25
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	491a      	ldr	r1, [pc, #104]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe f8a8 	bl	8001504 <HAL_GetTick>
 80033b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fe f8a4 	bl	8001504 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e332      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	f7fe f8c5 	bl	8001564 <HAL_GetREVID>
 80033da:	4603      	mov	r3, r0
 80033dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d819      	bhi.n	8003418 <HAL_RCC_OscConfig+0x28c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d108      	bne.n	80033fe <HAL_RCC_OscConfig+0x272>
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033f4:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	e030      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	031b      	lsls	r3, r3, #12
 800340c:	4901      	ldr	r1, [pc, #4]	; (8003414 <HAL_RCC_OscConfig+0x288>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
 8003412:	e025      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
 8003414:	58024400 	.word	0x58024400
 8003418:	4b9a      	ldr	r3, [pc, #616]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4997      	ldr	r1, [pc, #604]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e018      	b.n	8003460 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342e:	4b95      	ldr	r3, [pc, #596]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a94      	ldr	r2, [pc, #592]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f863 	bl	8001504 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe f85f 	bl	8001504 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e2ed      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003454:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a9 	beq.w	80035c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003476:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d007      	beq.n	8003494 <HAL_RCC_OscConfig+0x308>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b18      	cmp	r3, #24
 8003488:	d13a      	bne.n	8003500 <HAL_RCC_OscConfig+0x374>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d135      	bne.n	8003500 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003494:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x320>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e2c1      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ac:	f7fe f85a 	bl	8001564 <HAL_GetREVID>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d817      	bhi.n	80034ea <HAL_RCC_OscConfig+0x35e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x348>
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034ca:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034d2:	e075      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d4:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	4968      	ldr	r1, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e8:	e06a      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ea:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	4962      	ldr	r1, [pc, #392]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034fe:	e05f      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d042      	beq.n	800358e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003508:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd fff6 	bl	8001504 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800351c:	f7fd fff2 	bl	8001504 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e280      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800352e:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800353a:	f7fe f813 	bl	8001564 <HAL_GetREVID>
 800353e:	4603      	mov	r3, r0
 8003540:	f241 0203 	movw	r2, #4099	; 0x1003
 8003544:	4293      	cmp	r3, r2
 8003546:	d817      	bhi.n	8003578 <HAL_RCC_OscConfig+0x3ec>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d108      	bne.n	8003562 <HAL_RCC_OscConfig+0x3d6>
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800355a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800355e:	6053      	str	r3, [r2, #4]
 8003560:	e02e      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
 8003562:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	4944      	ldr	r1, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e023      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	493f      	ldr	r1, [pc, #252]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	60cb      	str	r3, [r1, #12]
 800358c:	e018      	b.n	80035c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd ffb3 	bl	8001504 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035a2:	f7fd ffaf 	bl	8001504 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e23d      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035b4:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d036      	beq.n	800363a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fd ff90 	bl	8001504 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fd ff8c 	bl	8001504 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e21a      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x45c>
 8003606:	e018      	b.n	800363a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fd ff76 	bl	8001504 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fd ff72 	bl	8001504 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e200      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d039      	beq.n	80036ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01c      	beq.n	8003688 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800365a:	f7fd ff53 	bl	8001504 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003662:	f7fd ff4f 	bl	8001504 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1dd      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x4d6>
 8003680:	e01b      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
 8003682:	bf00      	nop
 8003684:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003688:	4b9b      	ldr	r3, [pc, #620]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a9a      	ldr	r2, [pc, #616]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800368e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003692:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003694:	f7fd ff36 	bl	8001504 <HAL_GetTick>
 8003698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fd ff32 	bl	8001504 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1c0      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036ae:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8081 	beq.w	80037ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_OscConfig+0x770>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a8b      	ldr	r2, [pc, #556]	; (80038fc <HAL_RCC_OscConfig+0x770>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d4:	f7fd ff16 	bl	8001504 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7fd ff12 	bl	8001504 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e1a0      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ee:	4b83      	ldr	r3, [pc, #524]	; (80038fc <HAL_RCC_OscConfig+0x770>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0x584>
 8003702:	4b7d      	ldr	r3, [pc, #500]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a7c      	ldr	r2, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e02d      	b.n	800376c <HAL_RCC_OscConfig+0x5e0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x5a6>
 8003718:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a76      	ldr	r2, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b74      	ldr	r3, [pc, #464]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a73      	ldr	r2, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800372a:	f023 0304 	bic.w	r3, r3, #4
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x5e0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x5c8>
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b6c      	ldr	r3, [pc, #432]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a6b      	ldr	r2, [pc, #428]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0x5e0>
 8003754:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a67      	ldr	r2, [pc, #412]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a64      	ldr	r2, [pc, #400]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd fec6 	bl	8001504 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fd fec2 	bl	8001504 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e14e      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ee      	beq.n	800377c <HAL_RCC_OscConfig+0x5f0>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd feb0 	bl	8001504 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd feac 	bl	8001504 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e138      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037be:	4b4e      	ldr	r3, [pc, #312]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 812d 	beq.w	8003a2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037dc:	2b18      	cmp	r3, #24
 80037de:	f000 80bd 	beq.w	800395c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f040 809e 	bne.w	8003928 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80037f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fe84 	bl	8001504 <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fe80 	bl	8001504 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e10e      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x774>)
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	430a      	orrs	r2, r1
 8003832:	4931      	ldr	r1, [pc, #196]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	628b      	str	r3, [r1, #40]	; 0x28
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	3b01      	subs	r3, #1
 800383e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	3b01      	subs	r3, #1
 8003848:	025b      	lsls	r3, r3, #9
 800384a:	b29b      	uxth	r3, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	3b01      	subs	r3, #1
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003868:	4923      	ldr	r1, [pc, #140]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800386a:	4313      	orrs	r3, r2
 800386c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800387c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCC_OscConfig+0x778>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003886:	00d2      	lsls	r2, r2, #3
 8003888:	491b      	ldr	r1, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 020c 	bic.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4917      	ldr	r1, [pc, #92]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f023 0202 	bic.w	r2, r3, #2
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	4912      	ldr	r1, [pc, #72]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fd fe09 	bl	8001504 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038f4:	e011      	b.n	800391a <HAL_RCC_OscConfig+0x78e>
 80038f6:	bf00      	nop
 80038f8:	58024400 	.word	0x58024400
 80038fc:	58024800 	.word	0x58024800
 8003900:	fffffc0c 	.word	0xfffffc0c
 8003904:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fd fdfc 	bl	8001504 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e08a      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x77c>
 8003926:	e082      	b.n	8003a2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 800392e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fd fde6 	bl	8001504 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fde2 	bl	8001504 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e070      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x7b0>
 800395a:	e068      	b.n	8003a2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003962:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b01      	cmp	r3, #1
 800396e:	d031      	beq.n	80039d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d12a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d122      	bne.n	80039d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0a5b      	lsrs	r3, r3, #9
 80039a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	0e1b      	lsrs	r3, r3, #24
 80039c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e02b      	b.n	8003a30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d01f      	beq.n	8003a2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fa:	f7fd fd83 	bl	8001504 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a00:	bf00      	nop
 8003a02:	f7fd fd7f 	bl	8001504 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d0f9      	beq.n	8003a02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_OscConfig+0x8b0>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a1a:	00d2      	lsls	r2, r2, #3
 8003a1c:	4906      	ldr	r1, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_RCC_OscConfig+0x8ac>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	ffff0007 	.word	0xffff0007

08003a40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e19c      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b8a      	ldr	r3, [pc, #552]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d910      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 020f 	bic.w	r2, r3, #15
 8003a6a:	4985      	ldr	r1, [pc, #532]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e184      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d908      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aa0:	4b78      	ldr	r3, [pc, #480]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4975      	ldr	r1, [pc, #468]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d908      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	496a      	ldr	r1, [pc, #424]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d908      	bls.n	8003b0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	495e      	ldr	r1, [pc, #376]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d908      	bls.n	8003b3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b2a:	4b56      	ldr	r3, [pc, #344]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4953      	ldr	r1, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d908      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f023 020f 	bic.w	r2, r3, #15
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4947      	ldr	r1, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d055      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b76:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4940      	ldr	r1, [pc, #256]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0f6      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0ea      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc0:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0de      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0d6      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f023 0207 	bic.w	r2, r3, #7
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4925      	ldr	r1, [pc, #148]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf2:	f7fd fc87 	bl	8001504 <HAL_GetTick>
 8003bf6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfa:	f7fd fc83 	bl	8001504 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0be      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d1eb      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d208      	bcs.n	8003c50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x244>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d214      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 020f 	bic.w	r2, r3, #15
 8003c66:	4906      	ldr	r1, [pc, #24]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_RCC_ClockConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e086      	b.n	8003d8e <HAL_RCC_ClockConfig+0x34e>
 8003c80:	52002000 	.word	0x52002000
 8003c84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d208      	bcs.n	8003cb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4939      	ldr	r1, [pc, #228]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d010      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d208      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	492e      	ldr	r1, [pc, #184]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d208      	bcs.n	8003d12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	4922      	ldr	r1, [pc, #136]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d010      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d208      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4917      	ldr	r1, [pc, #92]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d40:	f000 f834 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	4912      	ldr	r1, [pc, #72]	; (8003d9c <HAL_RCC_ClockConfig+0x35c>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_RCC_ClockConfig+0x358>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <HAL_RCC_ClockConfig+0x35c>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_RCC_ClockConfig+0x360>)
 8003d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <HAL_RCC_ClockConfig+0x364>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x368>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fb74 	bl	8001470 <HAL_InitTick>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	08008ccc 	.word	0x08008ccc
 8003da0:	24000018 	.word	0x24000018
 8003da4:	24000014 	.word	0x24000014
 8003da8:	2400001c 	.word	0x2400001c

08003dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db2:	4bb3      	ldr	r3, [pc, #716]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dba:	2b18      	cmp	r3, #24
 8003dbc:	f200 8155 	bhi.w	800406a <HAL_RCC_GetSysClockFreq+0x2be>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	0800406b 	.word	0x0800406b
 8003dd0:	0800406b 	.word	0x0800406b
 8003dd4:	0800406b 	.word	0x0800406b
 8003dd8:	0800406b 	.word	0x0800406b
 8003ddc:	0800406b 	.word	0x0800406b
 8003de0:	0800406b 	.word	0x0800406b
 8003de4:	0800406b 	.word	0x0800406b
 8003de8:	08003e53 	.word	0x08003e53
 8003dec:	0800406b 	.word	0x0800406b
 8003df0:	0800406b 	.word	0x0800406b
 8003df4:	0800406b 	.word	0x0800406b
 8003df8:	0800406b 	.word	0x0800406b
 8003dfc:	0800406b 	.word	0x0800406b
 8003e00:	0800406b 	.word	0x0800406b
 8003e04:	0800406b 	.word	0x0800406b
 8003e08:	08003e59 	.word	0x08003e59
 8003e0c:	0800406b 	.word	0x0800406b
 8003e10:	0800406b 	.word	0x0800406b
 8003e14:	0800406b 	.word	0x0800406b
 8003e18:	0800406b 	.word	0x0800406b
 8003e1c:	0800406b 	.word	0x0800406b
 8003e20:	0800406b 	.word	0x0800406b
 8003e24:	0800406b 	.word	0x0800406b
 8003e28:	08003e5f 	.word	0x08003e5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e2c:	4b94      	ldr	r3, [pc, #592]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e38:	4b91      	ldr	r3, [pc, #580]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	4a90      	ldr	r2, [pc, #576]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e4a:	e111      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e4c:	4b8d      	ldr	r3, [pc, #564]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e4e:	61bb      	str	r3, [r7, #24]
      break;
 8003e50:	e10e      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e52:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e54:	61bb      	str	r3, [r7, #24]
      break;
 8003e56:	e10b      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e58:	4b8c      	ldr	r3, [pc, #560]	; (800408c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e5a:	61bb      	str	r3, [r7, #24]
      break;
 8003e5c:	e108      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e5e:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e68:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e74:	4b82      	ldr	r3, [pc, #520]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e7e:	4b80      	ldr	r3, [pc, #512]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	08db      	lsrs	r3, r3, #3
 8003e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80e1 	beq.w	8004064 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	f000 8083 	beq.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x204>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f200 80a1 	bhi.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x248>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x114>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d056      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ebe:	e099      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02d      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ecc:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	4a6b      	ldr	r2, [pc, #428]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b62      	ldr	r3, [pc, #392]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f26:	e087      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f6a:	e065      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b40      	ldr	r3, [pc, #256]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fae:	e043      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800409c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc2:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ff2:	e021      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004016:	ed97 6a02 	vldr	s12, [r7, #8]
 800401a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004090 <HAL_RCC_GetSysClockFreq+0x2e4>
 800401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004036:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	0a5b      	lsrs	r3, r3, #9
 800403e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004042:	3301      	adds	r3, #1
 8004044:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004050:	edd7 6a07 	vldr	s13, [r7, #28]
 8004054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405c:	ee17 3a90 	vmov	r3, s15
 8004060:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004062:	e005      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
      break;
 8004068:	e002      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800406c:	61bb      	str	r3, [r7, #24]
      break;
 800406e:	bf00      	nop
  }

  return sysclockfreq;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
 8004084:	03d09000 	.word	0x03d09000
 8004088:	003d0900 	.word	0x003d0900
 800408c:	007a1200 	.word	0x007a1200
 8004090:	46000000 	.word	0x46000000
 8004094:	4c742400 	.word	0x4c742400
 8004098:	4a742400 	.word	0x4a742400
 800409c:	4af42400 	.word	0x4af42400

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040a6:	f7ff fe81 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	490f      	ldr	r1, [pc, #60]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80040b8:	5ccb      	ldrb	r3, [r1, r3]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80040dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	58024400 	.word	0x58024400
 80040f4:	08008ccc 	.word	0x08008ccc
 80040f8:	24000018 	.word	0x24000018
 80040fc:	24000014 	.word	0x24000014

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004104:	f7ff ffcc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	58024400 	.word	0x58024400
 8004128:	08008ccc 	.word	0x08008ccc

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004130:	f7ff ffb6 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	58024400 	.word	0x58024400
 8004154:	08008ccc 	.word	0x08008ccc

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b0ca      	sub	sp, #296	; 0x128
 800415e:	af00      	add	r7, sp, #0
 8004160:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800417c:	2500      	movs	r5, #0
 800417e:	ea54 0305 	orrs.w	r3, r4, r5
 8004182:	d049      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800418e:	d02f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004194:	d828      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800419a:	d01a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800419c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a0:	d822      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d007      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041ac:	e01c      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ae:	4bb8      	ldr	r3, [pc, #736]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	4ab7      	ldr	r2, [pc, #732]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ba:	e01a      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	3308      	adds	r3, #8
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fc8f 	bl	8005ae8 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041d0:	e00f      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d6:	3328      	adds	r3, #40	; 0x28
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 fd36 	bl	8005c4c <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041e6:	e004      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041fa:	4ba5      	ldr	r3, [pc, #660]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004208:	4aa1      	ldr	r2, [pc, #644]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420a:	430b      	orrs	r3, r1
 800420c:	6513      	str	r3, [r2, #80]	; 0x50
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004224:	f04f 0900 	mov.w	r9, #0
 8004228:	ea58 0309 	orrs.w	r3, r8, r9
 800422c:	d047      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	2b04      	cmp	r3, #4
 8004236:	d82a      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004255 	.word	0x08004255
 8004244:	08004263 	.word	0x08004263
 8004248:	08004279 	.word	0x08004279
 800424c:	08004297 	.word	0x08004297
 8004250:	08004297 	.word	0x08004297
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a8d      	ldr	r2, [pc, #564]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004260:	e01a      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	3308      	adds	r3, #8
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f001 fc3c 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004276:	e00f      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	3328      	adds	r3, #40	; 0x28
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fce3 	bl	8005c4c <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a0:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	f023 0107 	bic.w	r1, r3, #7
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	4a78      	ldr	r2, [pc, #480]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6513      	str	r3, [r2, #80]	; 0x50
 80042b4:	e003      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80042ca:	f04f 0b00 	mov.w	fp, #0
 80042ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80042d2:	d04c      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d030      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d829      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042e6:	2bc0      	cmp	r3, #192	; 0xc0
 80042e8:	d02d      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042ea:	2bc0      	cmp	r3, #192	; 0xc0
 80042ec:	d825      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042ee:	2b80      	cmp	r3, #128	; 0x80
 80042f0:	d018      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d821      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d007      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80042fe:	e01c      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a62      	ldr	r2, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800430c:	e01c      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	3308      	adds	r3, #8
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fbe6 	bl	8005ae8 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	3328      	adds	r3, #40	; 0x28
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fc8d 	bl	8005c4c <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004360:	430b      	orrs	r3, r1
 8004362:	6513      	str	r3, [r2, #80]	; 0x50
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800437a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004384:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d053      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800439a:	d035      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800439c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043a0:	d82e      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043a6:	d031      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80043a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ac:	d828      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d01a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b8:	d822      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c2:	d007      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043c4:	e01c      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	4a31      	ldr	r2, [pc, #196]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e01c      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	3308      	adds	r3, #8
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fb83 	bl	8005ae8 <RCCEx_PLL2_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043e8:	e011      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ee:	3328      	adds	r3, #40	; 0x28
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 fc2a 	bl	8005c4c <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043fe:	e006      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004406:	e002      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800440c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004428:	430b      	orrs	r3, r1
 800442a:	6593      	str	r3, [r2, #88]	; 0x58
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004442:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800444c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d056      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800445e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004462:	d038      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004468:	d831      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800446a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800446e:	d034      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004474:	d82b      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800447a:	d01d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800447c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004480:	d825      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800448c:	e01f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800448e:	bf00      	nop
 8004490:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4ba2      	ldr	r3, [pc, #648]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4aa1      	ldr	r2, [pc, #644]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a0:	e01c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	3308      	adds	r3, #8
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fb1c 	bl	8005ae8 <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044bc:	3328      	adds	r3, #40	; 0x28
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fbc3 	bl	8005c4c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044e4:	4b8e      	ldr	r3, [pc, #568]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044f4:	4a8a      	ldr	r2, [pc, #552]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800451a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d03a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	2b30      	cmp	r3, #48	; 0x30
 800452c:	d01f      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800452e:	2b30      	cmp	r3, #48	; 0x30
 8004530:	d819      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004532:	2b20      	cmp	r3, #32
 8004534:	d00c      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d815      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d019      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800453e:	2b10      	cmp	r3, #16
 8004540:	d111      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004542:	4b77      	ldr	r3, [pc, #476]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	4a76      	ldr	r2, [pc, #472]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800454e:	e011      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	3308      	adds	r3, #8
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f001 fac5 	bl	8005ae8 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	4a65      	ldr	r2, [pc, #404]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800458c:	430b      	orrs	r3, r1
 800458e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80045a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d051      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c4:	d035      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ca:	d82e      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045d0:	d031      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045d6:	d828      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045dc:	d01a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e2:	d822      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d007      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045ee:	e01c      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045fc:	e01c      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fa6e 	bl	8005ae8 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004618:	3328      	adds	r3, #40	; 0x28
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fb15 	bl	8005c4c <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004640:	4b37      	ldr	r3, [pc, #220]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	4a34      	ldr	r2, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6513      	str	r3, [r2, #80]	; 0x50
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800466a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004674:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d056      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004688:	d033      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800468a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800468e:	d82c      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004694:	d02f      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800469a:	d826      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800469c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a0:	d02b      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a6:	d820      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ac:	d012      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80046ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b2:	d81a      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d022      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d115      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	3308      	adds	r3, #8
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fa0e 	bl	8005ae8 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046d2:	e015      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	3328      	adds	r3, #40	; 0x28
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 fab5 	bl	8005c4c <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046f2:	bf00      	nop
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004716:	4a02      	ldr	r2, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6513      	str	r3, [r2, #80]	; 0x50
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004728:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004742:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d055      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004758:	d033      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800475a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800475e:	d82c      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d02f      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d826      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800476c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004770:	d02b      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004776:	d820      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477c:	d012      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800477e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004782:	d81a      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d022      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478c:	d115      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004792:	3308      	adds	r3, #8
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f9a6 	bl	8005ae8 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047a2:	e015      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	3328      	adds	r3, #40	; 0x28
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fa4d 	bl	8005c4c <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047b8:	e00a      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047c2:	bf00      	nop
 80047c4:	e004      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047d8:	4ba3      	ldr	r3, [pc, #652]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047e8:	4a9f      	ldr	r2, [pc, #636]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6593      	str	r3, [r2, #88]	; 0x58
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800480e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d037      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004822:	d00e      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d816      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800482e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004832:	d111      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4b8c      	ldr	r3, [pc, #560]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a8b      	ldr	r2, [pc, #556]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004840:	e00f      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004846:	3308      	adds	r3, #8
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f94c 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800486a:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a7b      	ldr	r2, [pc, #492]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800487a:	430b      	orrs	r3, r1
 800487c:	6513      	str	r3, [r2, #80]	; 0x50
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800489e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d039      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d81c      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	080048c9 	.word	0x080048c9
 80048c0:	080048d7 	.word	0x080048d7
 80048c4:	080048f5 	.word	0x080048f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c8:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a66      	ldr	r2, [pc, #408]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048d4:	e00f      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	3308      	adds	r3, #8
 80048dc:	2102      	movs	r1, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f902 	bl	8005ae8 <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048fe:	4b5a      	ldr	r3, [pc, #360]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	f023 0103 	bic.w	r1, r3, #3
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	4a56      	ldr	r2, [pc, #344]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800490e:	430b      	orrs	r3, r1
 8004910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800491c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004932:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004936:	460b      	mov	r3, r1
 8004938:	4313      	orrs	r3, r2
 800493a:	f000 809f 	beq.w	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4a      	ldr	r2, [pc, #296]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494a:	f7fc fddb 	bl	8001504 <HAL_GetTick>
 800494e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004952:	e00b      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fc fdd6 	bl	8001504 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d903      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800496a:	e005      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800496c:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ed      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497c:	2b00      	cmp	r3, #0
 800497e:	d179      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800498c:	4053      	eors	r3, r2
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ae:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a2d      	ldr	r2, [pc, #180]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049ba:	4a2b      	ldr	r2, [pc, #172]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d118      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fc fd98 	bl	8001504 <HAL_GetTick>
 80049d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d8:	e00d      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fc fd93 	bl	8001504 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d903      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0eb      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d129      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d10e      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004a1c:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a2c:	091a      	lsrs	r2, r3, #4
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6113      	str	r3, [r2, #16]
 8004a38:	e005      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a44:	6113      	str	r3, [r2, #16]
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5c:	e00e      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004a66:	e009      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	58024800 	.word	0x58024800
 8004a70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f002 0301 	and.w	r3, r2, #1
 8004a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f000 8089 	beq.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa4:	2b28      	cmp	r3, #40	; 0x28
 8004aa6:	d86b      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004b89 	.word	0x08004b89
 8004ab4:	08004b81 	.word	0x08004b81
 8004ab8:	08004b81 	.word	0x08004b81
 8004abc:	08004b81 	.word	0x08004b81
 8004ac0:	08004b81 	.word	0x08004b81
 8004ac4:	08004b81 	.word	0x08004b81
 8004ac8:	08004b81 	.word	0x08004b81
 8004acc:	08004b81 	.word	0x08004b81
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004b81 	.word	0x08004b81
 8004ad8:	08004b81 	.word	0x08004b81
 8004adc:	08004b81 	.word	0x08004b81
 8004ae0:	08004b81 	.word	0x08004b81
 8004ae4:	08004b81 	.word	0x08004b81
 8004ae8:	08004b81 	.word	0x08004b81
 8004aec:	08004b81 	.word	0x08004b81
 8004af0:	08004b6b 	.word	0x08004b6b
 8004af4:	08004b81 	.word	0x08004b81
 8004af8:	08004b81 	.word	0x08004b81
 8004afc:	08004b81 	.word	0x08004b81
 8004b00:	08004b81 	.word	0x08004b81
 8004b04:	08004b81 	.word	0x08004b81
 8004b08:	08004b81 	.word	0x08004b81
 8004b0c:	08004b81 	.word	0x08004b81
 8004b10:	08004b89 	.word	0x08004b89
 8004b14:	08004b81 	.word	0x08004b81
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004b81 	.word	0x08004b81
 8004b20:	08004b81 	.word	0x08004b81
 8004b24:	08004b81 	.word	0x08004b81
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b81 	.word	0x08004b81
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b81 	.word	0x08004b81
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004b81 	.word	0x08004b81
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b89 	.word	0x08004b89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b58:	3308      	adds	r3, #8
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 ffc3 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b68:	e00f      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	3328      	adds	r3, #40	; 0x28
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f86a 	bl	8005c4c <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b92:	4bbf      	ldr	r3, [pc, #764]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba0:	4abb      	ldr	r2, [pc, #748]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ba6:	e003      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 0302 	and.w	r3, r2, #2
 8004bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d041      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d824      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004bf9 	.word	0x08004bf9
 8004be8:	08004c0f 	.word	0x08004c0f
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c2d 	.word	0x08004c2d
 8004bf4:	08004c2d 	.word	0x08004c2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff71 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e00f      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	3328      	adds	r3, #40	; 0x28
 8004c14:	2101      	movs	r1, #1
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f818 	bl	8005c4c <RCCEx_PLL3_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c22:	e004      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c36:	4b96      	ldr	r3, [pc, #600]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f023 0107 	bic.w	r1, r3, #7
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c44:	4a92      	ldr	r2, [pc, #584]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c46:	430b      	orrs	r3, r1
 8004c48:	6553      	str	r3, [r2, #84]	; 0x54
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f002 0304 	and.w	r3, r2, #4
 8004c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4313      	orrs	r3, r2
 8004c72:	d044      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d825      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004cd5 	.word	0x08004cd5
 8004c8c:	08004ca1 	.word	0x08004ca1
 8004c90:	08004cb7 	.word	0x08004cb7
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004cd5 	.word	0x08004cd5
 8004c9c:	08004cd5 	.word	0x08004cd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 ff1d 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e00f      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cba:	3328      	adds	r3, #40	; 0x28
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ffc4 	bl	8005c4c <RCCEx_PLL3_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cca:	e004      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	f023 0107 	bic.w	r1, r3, #7
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cee:	4a68      	ldr	r2, [pc, #416]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f002 0320 	and.w	r3, r2, #32
 8004d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d055      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d2a:	d033      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d30:	d82c      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d02f      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d826      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d42:	d02b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d48:	d820      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4e:	d012      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d54:	d81a      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d022      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d5e:	d115      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	3308      	adds	r3, #8
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 febd 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d74:	e015      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7a:	3328      	adds	r3, #40	; 0x28
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ff64 	bl	8005c4c <RCCEx_PLL3_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d92:	e006      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d94:	bf00      	nop
 8004d96:	e004      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d98:	bf00      	nop
 8004d9a:	e002      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d9c:	bf00      	nop
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004daa:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a35      	ldr	r2, [pc, #212]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6553      	str	r3, [r2, #84]	; 0x54
 8004dc0:	e003      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004de0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4313      	orrs	r3, r2
 8004de8:	d058      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004df6:	d033      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004df8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dfc:	d82c      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d02f      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e08:	d826      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e0e:	d02b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e14:	d820      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d81a      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d022      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d115      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	3308      	adds	r3, #8
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fe57 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e40:	e015      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e46:	3328      	adds	r3, #40	; 0x28
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fefe 	bl	8005c4c <RCCEx_PLL3_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e56:	e00a      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e5e:	e006      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e60:	bf00      	nop
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10e      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e86:	4a02      	ldr	r2, [pc, #8]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8c:	e006      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d055      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ec4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ec8:	d033      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004eca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ece:	d82c      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d02f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d826      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004edc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ee0:	d02b      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ee2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ee6:	d820      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eec:	d012      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef2:	d81a      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d022      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d115      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f02:	3308      	adds	r3, #8
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fdee 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f12:	e015      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f18:	3328      	adds	r3, #40	; 0x28
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fe95 	bl	8005c4c <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f28:	e00a      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f30:	e006      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f32:	bf00      	nop
 8004f34:	e004      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f48:	4ba1      	ldr	r3, [pc, #644]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f58:	4a9d      	ldr	r2, [pc, #628]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f002 0308 	and.w	r3, r2, #8
 8004f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d01e      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	3328      	adds	r3, #40	; 0x28
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fe54 	bl	8005c4c <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004fb0:	4b87      	ldr	r3, [pc, #540]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc0:	4a83      	ldr	r2, [pc, #524]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f002 0310 	and.w	r3, r2, #16
 8004fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fdc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d01e      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff2:	d10c      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	3328      	adds	r3, #40	; 0x28
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fe25 	bl	8005c4c <RCCEx_PLL3_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800500e:	4b70      	ldr	r3, [pc, #448]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501e:	4a6c      	ldr	r2, [pc, #432]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800503a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800503e:	460b      	mov	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	d03e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800504c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005050:	d022      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005056:	d81b      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d00b      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005062:	e015      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	3308      	adds	r3, #8
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fd3b 	bl	8005ae8 <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005078:	e00f      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	3328      	adds	r3, #40	; 0x28
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fde2 	bl	8005c4c <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a2:	4b4b      	ldr	r3, [pc, #300]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050b2:	4a47      	ldr	r2, [pc, #284]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6593      	str	r3, [r2, #88]	; 0x58
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80050ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d0:	2300      	movs	r3, #0
 80050d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80050d8:	460b      	mov	r3, r1
 80050da:	4313      	orrs	r3, r2
 80050dc:	d03b      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ea:	d01f      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80050ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f0:	d818      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80050f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80050f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fc:	d007      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80050fe:	e011      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005112:	3328      	adds	r3, #40	; 0x28
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fd98 	bl	8005c4c <RCCEx_PLL3_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005122:	e004      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6553      	str	r3, [r2, #84]	; 0x54
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005162:	673b      	str	r3, [r7, #112]	; 0x70
 8005164:	2300      	movs	r3, #0
 8005166:	677b      	str	r3, [r7, #116]	; 0x74
 8005168:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800516c:	460b      	mov	r3, r1
 800516e:	4313      	orrs	r3, r2
 8005170:	d034      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d007      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005182:	e011      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800518a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005190:	e00e      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005196:	3308      	adds	r3, #8
 8005198:	2102      	movs	r1, #2
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fca4 	bl	8005ae8 <RCCEx_PLL2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c6:	4a02      	ldr	r2, [pc, #8]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80051e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ea:	2300      	movs	r3, #0
 80051ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80051f2:	460b      	mov	r3, r1
 80051f4:	4313      	orrs	r3, r2
 80051f6:	d00c      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	2102      	movs	r1, #2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fd23 	bl	8005c4c <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800521e:	663b      	str	r3, [r7, #96]	; 0x60
 8005220:	2300      	movs	r3, #0
 8005222:	667b      	str	r3, [r7, #100]	; 0x64
 8005224:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d038      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800523a:	d018      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800523c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005240:	d811      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005246:	d014      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524c:	d80b      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d106      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4bc3      	ldr	r3, [pc, #780]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4ac2      	ldr	r2, [pc, #776]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005264:	e008      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800526c:	e004      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800526e:	bf00      	nop
 8005270:	e002      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005272:	bf00      	nop
 8005274:	e000      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005280:	4bb9      	ldr	r3, [pc, #740]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005290:	4ab5      	ldr	r2, [pc, #724]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6553      	str	r3, [r2, #84]	; 0x54
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80052ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ae:	2300      	movs	r3, #0
 80052b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052bc:	4baa      	ldr	r3, [pc, #680]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	4aa7      	ldr	r2, [pc, #668]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
 80052de:	2300      	movs	r3, #0
 80052e0:	657b      	str	r3, [r7, #84]	; 0x54
 80052e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80052ec:	4b9e      	ldr	r3, [pc, #632]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052fc:	4a9a      	ldr	r2, [pc, #616]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052fe:	430b      	orrs	r3, r1
 8005300:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005310:	2300      	movs	r3, #0
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005318:	460b      	mov	r3, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800531e:	4b92      	ldr	r3, [pc, #584]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	4a8e      	ldr	r2, [pc, #568]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532e:	430b      	orrs	r3, r1
 8005330:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800533e:	643b      	str	r3, [r7, #64]	; 0x40
 8005340:	2300      	movs	r3, #0
 8005342:	647b      	str	r3, [r7, #68]	; 0x44
 8005344:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d00e      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800534e:	4b86      	ldr	r3, [pc, #536]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4a85      	ldr	r2, [pc, #532]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005358:	6113      	str	r3, [r2, #16]
 800535a:	4b83      	ldr	r3, [pc, #524]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800535c:	6919      	ldr	r1, [r3, #16]
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005366:	4a80      	ldr	r2, [pc, #512]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005378:	63bb      	str	r3, [r7, #56]	; 0x38
 800537a:	2300      	movs	r3, #0
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005388:	4b77      	ldr	r3, [pc, #476]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	4a74      	ldr	r2, [pc, #464]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005398:	430b      	orrs	r3, r1
 800539a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 80053aa:	2300      	movs	r3, #0
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
 80053ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b8:	4b6b      	ldr	r3, [pc, #428]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c8:	4a67      	ldr	r2, [pc, #412]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	2100      	movs	r1, #0
 80053d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80053e4:	460b      	mov	r3, r1
 80053e6:	4313      	orrs	r3, r2
 80053e8:	d011      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	3308      	adds	r3, #8
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb78 	bl	8005ae8 <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800540a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	2100      	movs	r1, #0
 8005418:	6239      	str	r1, [r7, #32]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d011      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	3308      	adds	r3, #8
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fb58 	bl	8005ae8 <RCCEx_PLL2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800543e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800544a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	2100      	movs	r1, #0
 8005458:	61b9      	str	r1, [r7, #24]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005464:	460b      	mov	r3, r1
 8005466:	4313      	orrs	r3, r2
 8005468:	d011      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546e:	3308      	adds	r3, #8
 8005470:	2102      	movs	r1, #2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fb38 	bl	8005ae8 <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800548a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	2100      	movs	r1, #0
 8005498:	6139      	str	r1, [r7, #16]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d011      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	3328      	adds	r3, #40	; 0x28
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fbca 	bl	8005c4c <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80054be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	2100      	movs	r1, #0
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054e4:	460b      	mov	r3, r1
 80054e6:	4313      	orrs	r3, r2
 80054e8:	d011      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	3328      	adds	r3, #40	; 0x28
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fbaa 	bl	8005c4c <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800550a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	2100      	movs	r1, #0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d011      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552e:	3328      	adds	r3, #40	; 0x28
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb8a 	bl	8005c4c <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800554e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
}
 800555c:	4618      	mov	r0, r3
 800555e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005562:	46bd      	mov	sp, r7
 8005564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005568:	58024400 	.word	0x58024400

0800556c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005570:	f7fe fd96 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4904      	ldr	r1, [pc, #16]	; (8005594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	58024400 	.word	0x58024400
 8005594:	08008ccc 	.word	0x08008ccc

08005598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055a0:	4ba1      	ldr	r3, [pc, #644]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80055aa:	4b9f      	ldr	r3, [pc, #636]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	0b1b      	lsrs	r3, r3, #12
 80055b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055b6:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80055c2:	4b99      	ldr	r3, [pc, #612]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8111 	beq.w	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f000 8083 	beq.w	80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f200 80a1 	bhi.w	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d056      	beq.n	80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005602:	e099      	b.n	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02d      	beq.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005610:	4b85      	ldr	r3, [pc, #532]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	4a84      	ldr	r2, [pc, #528]	; (800582c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800566a:	e087      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ae:	e065      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	4b59      	ldr	r3, [pc, #356]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056f2:	e043      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b48      	ldr	r3, [pc, #288]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005736:	e021      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a03 	vldr	s12, [r7, #12]
 800575e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800577a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	0a5b      	lsrs	r3, r3, #9
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005796:	edd7 6a07 	vldr	s13, [r7, #28]
 800579a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a2:	ee17 2a90 	vmov	r2, s15
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d0:	ee17 2a90 	vmov	r2, s15
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	0e1b      	lsrs	r3, r3, #24
 80057de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fe:	ee17 2a90 	vmov	r2, s15
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005806:	e008      	b.n	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	03d09000 	.word	0x03d09000
 8005830:	46000000 	.word	0x46000000
 8005834:	4c742400 	.word	0x4c742400
 8005838:	4a742400 	.word	0x4a742400
 800583c:	4af42400 	.word	0x4af42400

08005840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005848:	4ba1      	ldr	r3, [pc, #644]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005852:	4b9f      	ldr	r3, [pc, #636]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	0d1b      	lsrs	r3, r3, #20
 8005858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800585e:	4b9c      	ldr	r3, [pc, #624]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800586a:	4b99      	ldr	r3, [pc, #612]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8111 	beq.w	8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8083 	beq.w	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f200 80a1 	bhi.w	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d056      	beq.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058aa:	e099      	b.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b8:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a84      	ldr	r2, [pc, #528]	; (8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005912:	e087      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b6a      	ldr	r3, [pc, #424]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005956:	e065      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b59      	ldr	r3, [pc, #356]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599a:	e043      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b48      	ldr	r3, [pc, #288]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059de:	e021      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b37      	ldr	r3, [pc, #220]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005a24:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 2a90 	vmov	r2, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a52:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a78:	ee17 2a90 	vmov	r2, s15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 2a90 	vmov	r2, s15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	03d09000 	.word	0x03d09000
 8005ad8:	46000000 	.word	0x46000000
 8005adc:	4c742400 	.word	0x4c742400
 8005ae0:	4a742400 	.word	0x4a742400
 8005ae4:	4af42400 	.word	0x4af42400

08005ae8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d101      	bne.n	8005b06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e099      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b06:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b12:	f7fb fcf7 	bl	8001504 <HAL_GetTick>
 8005b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b1a:	f7fb fcf3 	bl	8001504 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e086      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b2c:	4b45      	ldr	r3, [pc, #276]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f0      	bne.n	8005b1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b38:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	493f      	ldr	r1, [pc, #252]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	025b      	lsls	r3, r3, #9
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b7c:	4931      	ldr	r1, [pc, #196]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b82:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	492d      	ldr	r1, [pc, #180]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b94:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	f023 0220 	bic.w	r2, r3, #32
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	4928      	ldr	r1, [pc, #160]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ba6:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bac:	f023 0310 	bic.w	r3, r3, #16
 8005bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bb2:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <RCCEx_PLL2_Config+0x160>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	69d2      	ldr	r2, [r2, #28]
 8005bbe:	00d2      	lsls	r2, r2, #3
 8005bc0:	4920      	ldr	r1, [pc, #128]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	f043 0310 	orr.w	r3, r3, #16
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005be4:	e00f      	b.n	8005c06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d106      	bne.n	8005bfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bf8:	e005      	b.n	8005c06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c12:	f7fb fc77 	bl	8001504 <HAL_GetTick>
 8005c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c18:	e008      	b.n	8005c2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c1a:	f7fb fc73 	bl	8001504 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f0      	beq.n	8005c1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	58024400 	.word	0x58024400
 8005c48:	ffff0007 	.word	0xffff0007

08005c4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c5a:	4b53      	ldr	r3, [pc, #332]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d101      	bne.n	8005c6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e099      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a4e      	ldr	r2, [pc, #312]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c76:	f7fb fc45 	bl	8001504 <HAL_GetTick>
 8005c7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c7c:	e008      	b.n	8005c90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c7e:	f7fb fc41 	bl	8001504 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e086      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c90:	4b45      	ldr	r3, [pc, #276]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f0      	bne.n	8005c7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c9c:	4b42      	ldr	r3, [pc, #264]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	051b      	lsls	r3, r3, #20
 8005caa:	493f      	ldr	r1, [pc, #252]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	628b      	str	r3, [r1, #40]	; 0x28
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	025b      	lsls	r3, r3, #9
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ce0:	4931      	ldr	r1, [pc, #196]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ce6:	4b30      	ldr	r3, [pc, #192]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	492d      	ldr	r1, [pc, #180]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	4928      	ldr	r1, [pc, #160]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d0a:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <RCCEx_PLL3_Config+0x160>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	69d2      	ldr	r2, [r2, #28]
 8005d22:	00d2      	lsls	r2, r2, #3
 8005d24:	4920      	ldr	r1, [pc, #128]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d2a:	4b1f      	ldr	r3, [pc, #124]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d48:	e00f      	b.n	8005d6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d50:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d5c:	e005      	b.n	8005d6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a11      	ldr	r2, [pc, #68]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d76:	f7fb fbc5 	bl	8001504 <HAL_GetTick>
 8005d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d7c:	e008      	b.n	8005d90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d7e:	f7fb fbc1 	bl	8001504 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e006      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400
 8005dac:	ffff0007 	.word	0xffff0007

08005db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e042      	b.n	8005e48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fb f8ad 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2224      	movs	r2, #36	; 0x24
 8005dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fce0 	bl	80067b8 <UART_SetConfig>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e022      	b.n	8005e48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fa3c 	bl	8007288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fac3 	bl	80073cc <UART_CheckIdleState>
 8005e46:	4603      	mov	r3, r0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d17b      	bne.n	8005f62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_UART_Transmit+0x26>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e074      	b.n	8005f64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2221      	movs	r2, #33	; 0x21
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e8a:	f7fb fb3b 	bl	8001504 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea8:	d108      	bne.n	8005ebc <HAL_UART_Transmit+0x6c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e003      	b.n	8005ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ec4:	e030      	b.n	8005f28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2180      	movs	r1, #128	; 0x80
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f001 fb25 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e03d      	b.n	8005f64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	3302      	adds	r3, #2
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	e007      	b.n	8005f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1c8      	bne.n	8005ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2140      	movs	r1, #64	; 0x40
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f001 faee 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e006      	b.n	8005f64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d137      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Receive_IT+0x24>
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e030      	b.n	8005ff6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_UART_Receive_IT+0x94>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01f      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d018      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fb00 	bl	80075f0 <UART_Start_Receive_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	e000      	b.n	8005ff6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3728      	adds	r7, #40	; 0x28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	58000c00 	.word	0x58000c00

08006004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b0ba      	sub	sp, #232	; 0xe8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800602a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800602e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006032:	4013      	ands	r3, r2
 8006034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d11b      	bne.n	8006078 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d015      	beq.n	8006078 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8377 	beq.w	800675c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
      }
      return;
 8006076:	e371      	b.n	800675c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8123 	beq.w	80062c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006082:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006086:	4b8d      	ldr	r3, [pc, #564]	; (80062bc <HAL_UART_IRQHandler+0x2b8>)
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800608e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006092:	4b8b      	ldr	r3, [pc, #556]	; (80062c0 <HAL_UART_IRQHandler+0x2bc>)
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 8116 	beq.w	80062c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d011      	beq.n	80060cc <HAL_UART_IRQHandler+0xc8>
 80060a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2201      	movs	r2, #1
 80060ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d011      	beq.n	80060fc <HAL_UART_IRQHandler+0xf8>
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_UART_IRQHandler+0x128>
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2204      	movs	r2, #4
 800611a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f043 0202 	orr.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006144:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006148:	4b5c      	ldr	r3, [pc, #368]	; (80062bc <HAL_UART_IRQHandler+0x2b8>)
 800614a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f043 0208 	orr.w	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_UART_IRQHandler+0x196>
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00c      	beq.n	800619a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 82dd 	beq.w	8006760 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d013      	beq.n	80061da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b40      	cmp	r3, #64	; 0x40
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d054      	beq.n	80062a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fb18 	bl	8007834 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d146      	bne.n	80062a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800622c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800623e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800624a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d9      	bne.n	8006212 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626e:	4a15      	ldr	r2, [pc, #84]	; (80062c4 <HAL_UART_IRQHandler+0x2c0>)
 8006270:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006278:	4618      	mov	r0, r3
 800627a:	f7fb fdc1 	bl	8001e00 <HAL_DMA_Abort_IT>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d019      	beq.n	80062b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006292:	4610      	mov	r0, r2
 8006294:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006296:	e00f      	b.n	80062b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa77 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629e:	e00b      	b.n	80062b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa73 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a6:	e007      	b.n	80062b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa6f 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80062b6:	e253      	b.n	8006760 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	bf00      	nop
    return;
 80062ba:	e251      	b.n	8006760 <HAL_UART_IRQHandler+0x75c>
 80062bc:	10000001 	.word	0x10000001
 80062c0:	04000120 	.word	0x04000120
 80062c4:	08007901 	.word	0x08007901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f040 81e7 	bne.w	80066a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 81e0 	beq.w	80066a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 81d9 	beq.w	80066a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	f040 8151 	bne.w	80065a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a96      	ldr	r2, [pc, #600]	; (8006568 <HAL_UART_IRQHandler+0x564>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d068      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a93      	ldr	r2, [pc, #588]	; (800656c <HAL_UART_IRQHandler+0x568>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d061      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a91      	ldr	r2, [pc, #580]	; (8006570 <HAL_UART_IRQHandler+0x56c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d05a      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a8e      	ldr	r2, [pc, #568]	; (8006574 <HAL_UART_IRQHandler+0x570>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d053      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a8c      	ldr	r2, [pc, #560]	; (8006578 <HAL_UART_IRQHandler+0x574>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d04c      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a89      	ldr	r2, [pc, #548]	; (800657c <HAL_UART_IRQHandler+0x578>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a87      	ldr	r2, [pc, #540]	; (8006580 <HAL_UART_IRQHandler+0x57c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d03e      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a84      	ldr	r2, [pc, #528]	; (8006584 <HAL_UART_IRQHandler+0x580>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d037      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a82      	ldr	r2, [pc, #520]	; (8006588 <HAL_UART_IRQHandler+0x584>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d030      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7f      	ldr	r2, [pc, #508]	; (800658c <HAL_UART_IRQHandler+0x588>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d029      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a7d      	ldr	r2, [pc, #500]	; (8006590 <HAL_UART_IRQHandler+0x58c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a7a      	ldr	r2, [pc, #488]	; (8006594 <HAL_UART_IRQHandler+0x590>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01b      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a78      	ldr	r2, [pc, #480]	; (8006598 <HAL_UART_IRQHandler+0x594>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d014      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a75      	ldr	r2, [pc, #468]	; (800659c <HAL_UART_IRQHandler+0x598>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00d      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a73      	ldr	r2, [pc, #460]	; (80065a0 <HAL_UART_IRQHandler+0x59c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d006      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a70      	ldr	r2, [pc, #448]	; (80065a4 <HAL_UART_IRQHandler+0x5a0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d106      	bne.n	80063f4 <HAL_UART_IRQHandler+0x3f0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	e005      	b.n	8006400 <HAL_UART_IRQHandler+0x3fc>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 81ab 	beq.w	8006764 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006418:	429a      	cmp	r2, r3
 800641a:	f080 81a3 	bcs.w	8006764 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006434:	f000 8087 	beq.w	8006546 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800644c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800646e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800647a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1da      	bne.n	8006438 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e1      	bne.n	8006482 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e3      	bne.n	80064be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006514:	f023 0310 	bic.w	r3, r3, #16
 8006518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006526:	65bb      	str	r3, [r7, #88]	; 0x58
 8006528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800652c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e4      	bne.n	8006504 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb f93f 	bl	80017c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006558:	b29b      	uxth	r3, r3
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	b29b      	uxth	r3, r3
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f91d 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006566:	e0fd      	b.n	8006764 <HAL_UART_IRQHandler+0x760>
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80cf 	beq.w	8006768 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80065ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80ca 	beq.w	8006768 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f6:	647b      	str	r3, [r7, #68]	; 0x44
 80065f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e4      	bne.n	80065d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	623b      	str	r3, [r7, #32]
   return(result);
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	4b55      	ldr	r3, [pc, #340]	; (8006774 <HAL_UART_IRQHandler+0x770>)
 800661e:	4013      	ands	r3, r2
 8006620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800662e:	633a      	str	r2, [r7, #48]	; 0x30
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e3      	bne.n	800660a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	60fb      	str	r3, [r7, #12]
   return(result);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0310 	bic.w	r3, r3, #16
 800666a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	617b      	str	r3, [r7, #20]
   return(result);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e4      	bne.n	8006656 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006692:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f881 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800669e:	e063      	b.n	8006768 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <HAL_UART_IRQHandler+0x6c6>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fe7a 	bl	80083bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c8:	e051      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d014      	beq.n	8006700 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d03a      	beq.n	800676c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
    }
    return;
 80066fe:	e035      	b.n	800676c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <HAL_UART_IRQHandler+0x71c>
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f907 	bl	800792c <UART_EndTransmit_IT>
    return;
 800671e:	e026      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <HAL_UART_IRQHandler+0x73c>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fe53 	bl	80083e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673e:	e016      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <HAL_UART_IRQHandler+0x76a>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	2b00      	cmp	r3, #0
 8006752:	da0c      	bge.n	800676e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fe3b 	bl	80083d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800675a:	e008      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
      return;
 800675c:	bf00      	nop
 800675e:	e006      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
    return;
 8006760:	bf00      	nop
 8006762:	e004      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
      return;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
      return;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_UART_IRQHandler+0x76a>
    return;
 800676c:	bf00      	nop
  }
}
 800676e:	37e8      	adds	r7, #232	; 0xe8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	effffffe 	.word	0xeffffffe

08006778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067bc:	b092      	sub	sp, #72	; 0x48
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	431a      	orrs	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	4313      	orrs	r3, r2
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4bbe      	ldr	r3, [pc, #760]	; (8006ae0 <UART_SetConfig+0x328>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4ab3      	ldr	r2, [pc, #716]	; (8006ae4 <UART_SetConfig+0x32c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006820:	4313      	orrs	r3, r2
 8006822:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	4baf      	ldr	r3, [pc, #700]	; (8006ae8 <UART_SetConfig+0x330>)
 800682c:	4013      	ands	r3, r2
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006834:	430b      	orrs	r3, r1
 8006836:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	f023 010f 	bic.w	r1, r3, #15
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4aa6      	ldr	r2, [pc, #664]	; (8006aec <UART_SetConfig+0x334>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d177      	bne.n	8006948 <UART_SetConfig+0x190>
 8006858:	4ba5      	ldr	r3, [pc, #660]	; (8006af0 <UART_SetConfig+0x338>)
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006860:	2b28      	cmp	r3, #40	; 0x28
 8006862:	d86d      	bhi.n	8006940 <UART_SetConfig+0x188>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0xb4>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006911 	.word	0x08006911
 8006870:	08006941 	.word	0x08006941
 8006874:	08006941 	.word	0x08006941
 8006878:	08006941 	.word	0x08006941
 800687c:	08006941 	.word	0x08006941
 8006880:	08006941 	.word	0x08006941
 8006884:	08006941 	.word	0x08006941
 8006888:	08006941 	.word	0x08006941
 800688c:	08006919 	.word	0x08006919
 8006890:	08006941 	.word	0x08006941
 8006894:	08006941 	.word	0x08006941
 8006898:	08006941 	.word	0x08006941
 800689c:	08006941 	.word	0x08006941
 80068a0:	08006941 	.word	0x08006941
 80068a4:	08006941 	.word	0x08006941
 80068a8:	08006941 	.word	0x08006941
 80068ac:	08006921 	.word	0x08006921
 80068b0:	08006941 	.word	0x08006941
 80068b4:	08006941 	.word	0x08006941
 80068b8:	08006941 	.word	0x08006941
 80068bc:	08006941 	.word	0x08006941
 80068c0:	08006941 	.word	0x08006941
 80068c4:	08006941 	.word	0x08006941
 80068c8:	08006941 	.word	0x08006941
 80068cc:	08006929 	.word	0x08006929
 80068d0:	08006941 	.word	0x08006941
 80068d4:	08006941 	.word	0x08006941
 80068d8:	08006941 	.word	0x08006941
 80068dc:	08006941 	.word	0x08006941
 80068e0:	08006941 	.word	0x08006941
 80068e4:	08006941 	.word	0x08006941
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006941 	.word	0x08006941
 80068f4:	08006941 	.word	0x08006941
 80068f8:	08006941 	.word	0x08006941
 80068fc:	08006941 	.word	0x08006941
 8006900:	08006941 	.word	0x08006941
 8006904:	08006941 	.word	0x08006941
 8006908:	08006941 	.word	0x08006941
 800690c:	08006939 	.word	0x08006939
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e222      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006918:	2304      	movs	r3, #4
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e21e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006920:	2308      	movs	r3, #8
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e21a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006928:	2310      	movs	r3, #16
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e216      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006930:	2320      	movs	r3, #32
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e212      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e20e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e20a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a69      	ldr	r2, [pc, #420]	; (8006af4 <UART_SetConfig+0x33c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d130      	bne.n	80069b4 <UART_SetConfig+0x1fc>
 8006952:	4b67      	ldr	r3, [pc, #412]	; (8006af0 <UART_SetConfig+0x338>)
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b05      	cmp	r3, #5
 800695c:	d826      	bhi.n	80069ac <UART_SetConfig+0x1f4>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0x1ac>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	0800697d 	.word	0x0800697d
 8006968:	08006985 	.word	0x08006985
 800696c:	0800698d 	.word	0x0800698d
 8006970:	08006995 	.word	0x08006995
 8006974:	0800699d 	.word	0x0800699d
 8006978:	080069a5 	.word	0x080069a5
 800697c:	2300      	movs	r3, #0
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e1ec      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006984:	2304      	movs	r3, #4
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e1e8      	b.n	8006d5e <UART_SetConfig+0x5a6>
 800698c:	2308      	movs	r3, #8
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e1e4      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006994:	2310      	movs	r3, #16
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e1e0      	b.n	8006d5e <UART_SetConfig+0x5a6>
 800699c:	2320      	movs	r3, #32
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e1dc      	b.n	8006d5e <UART_SetConfig+0x5a6>
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e1d8      	b.n	8006d5e <UART_SetConfig+0x5a6>
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e1d4      	b.n	8006d5e <UART_SetConfig+0x5a6>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4f      	ldr	r2, [pc, #316]	; (8006af8 <UART_SetConfig+0x340>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d130      	bne.n	8006a20 <UART_SetConfig+0x268>
 80069be:	4b4c      	ldr	r3, [pc, #304]	; (8006af0 <UART_SetConfig+0x338>)
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d826      	bhi.n	8006a18 <UART_SetConfig+0x260>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0x218>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e9 	.word	0x080069e9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069f9 	.word	0x080069f9
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ee:	e1b6      	b.n	8006d5e <UART_SetConfig+0x5a6>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f6:	e1b2      	b.n	8006d5e <UART_SetConfig+0x5a6>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fe:	e1ae      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e1aa      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0e:	e1a6      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e1a2      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e19e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a35      	ldr	r2, [pc, #212]	; (8006afc <UART_SetConfig+0x344>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d130      	bne.n	8006a8c <UART_SetConfig+0x2d4>
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <UART_SetConfig+0x338>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d826      	bhi.n	8006a84 <UART_SetConfig+0x2cc>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x284>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a55 	.word	0x08006a55
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	08006a65 	.word	0x08006a65
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5a:	e180      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a62:	e17c      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a64:	2308      	movs	r3, #8
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e178      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e174      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a74:	2320      	movs	r3, #32
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e170      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a7c:	2340      	movs	r3, #64	; 0x40
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e16c      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a84:	2380      	movs	r3, #128	; 0x80
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e168      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <UART_SetConfig+0x348>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d142      	bne.n	8006b1c <UART_SetConfig+0x364>
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <UART_SetConfig+0x338>)
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d838      	bhi.n	8006b14 <UART_SetConfig+0x35c>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x2f0>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006b05 	.word	0x08006b05
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac6:	e14a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ace:	e146      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e142      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ade:	e13e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ae0:	cfff69f3 	.word	0xcfff69f3
 8006ae4:	58000c00 	.word	0x58000c00
 8006ae8:	11fff4ff 	.word	0x11fff4ff
 8006aec:	40011000 	.word	0x40011000
 8006af0:	58024400 	.word	0x58024400
 8006af4:	40004400 	.word	0x40004400
 8006af8:	40004800 	.word	0x40004800
 8006afc:	40004c00 	.word	0x40004c00
 8006b00:	40005000 	.word	0x40005000
 8006b04:	2320      	movs	r3, #32
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e128      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e124      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e120      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4acb      	ldr	r2, [pc, #812]	; (8006e50 <UART_SetConfig+0x698>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d176      	bne.n	8006c14 <UART_SetConfig+0x45c>
 8006b26:	4bcb      	ldr	r3, [pc, #812]	; (8006e54 <UART_SetConfig+0x69c>)
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2e:	2b28      	cmp	r3, #40	; 0x28
 8006b30:	d86c      	bhi.n	8006c0c <UART_SetConfig+0x454>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x380>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006bdd 	.word	0x08006bdd
 8006b3c:	08006c0d 	.word	0x08006c0d
 8006b40:	08006c0d 	.word	0x08006c0d
 8006b44:	08006c0d 	.word	0x08006c0d
 8006b48:	08006c0d 	.word	0x08006c0d
 8006b4c:	08006c0d 	.word	0x08006c0d
 8006b50:	08006c0d 	.word	0x08006c0d
 8006b54:	08006c0d 	.word	0x08006c0d
 8006b58:	08006be5 	.word	0x08006be5
 8006b5c:	08006c0d 	.word	0x08006c0d
 8006b60:	08006c0d 	.word	0x08006c0d
 8006b64:	08006c0d 	.word	0x08006c0d
 8006b68:	08006c0d 	.word	0x08006c0d
 8006b6c:	08006c0d 	.word	0x08006c0d
 8006b70:	08006c0d 	.word	0x08006c0d
 8006b74:	08006c0d 	.word	0x08006c0d
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006c0d 	.word	0x08006c0d
 8006b80:	08006c0d 	.word	0x08006c0d
 8006b84:	08006c0d 	.word	0x08006c0d
 8006b88:	08006c0d 	.word	0x08006c0d
 8006b8c:	08006c0d 	.word	0x08006c0d
 8006b90:	08006c0d 	.word	0x08006c0d
 8006b94:	08006c0d 	.word	0x08006c0d
 8006b98:	08006bf5 	.word	0x08006bf5
 8006b9c:	08006c0d 	.word	0x08006c0d
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	08006c0d 	.word	0x08006c0d
 8006bb4:	08006c0d 	.word	0x08006c0d
 8006bb8:	08006bfd 	.word	0x08006bfd
 8006bbc:	08006c0d 	.word	0x08006c0d
 8006bc0:	08006c0d 	.word	0x08006c0d
 8006bc4:	08006c0d 	.word	0x08006c0d
 8006bc8:	08006c0d 	.word	0x08006c0d
 8006bcc:	08006c0d 	.word	0x08006c0d
 8006bd0:	08006c0d 	.word	0x08006c0d
 8006bd4:	08006c0d 	.word	0x08006c0d
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e0bc      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006be4:	2304      	movs	r3, #4
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e0b8      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006bec:	2308      	movs	r3, #8
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e0b4      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e0b0      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e0ac      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c04:	2340      	movs	r3, #64	; 0x40
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e0a8      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e0a4      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a8f      	ldr	r2, [pc, #572]	; (8006e58 <UART_SetConfig+0x6a0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d130      	bne.n	8006c80 <UART_SetConfig+0x4c8>
 8006c1e:	4b8d      	ldr	r3, [pc, #564]	; (8006e54 <UART_SetConfig+0x69c>)
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	2b05      	cmp	r3, #5
 8006c28:	d826      	bhi.n	8006c78 <UART_SetConfig+0x4c0>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x478>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c49 	.word	0x08006c49
 8006c34:	08006c51 	.word	0x08006c51
 8006c38:	08006c59 	.word	0x08006c59
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4e:	e086      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c50:	2304      	movs	r3, #4
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e082      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e07e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c60:	2310      	movs	r3, #16
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e07a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e076      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e072      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e06e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a75      	ldr	r2, [pc, #468]	; (8006e5c <UART_SetConfig+0x6a4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d130      	bne.n	8006cec <UART_SetConfig+0x534>
 8006c8a:	4b72      	ldr	r3, [pc, #456]	; (8006e54 <UART_SetConfig+0x69c>)
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d826      	bhi.n	8006ce4 <UART_SetConfig+0x52c>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0x4e4>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cb5 	.word	0x08006cb5
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	08006cc5 	.word	0x08006cc5
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cba:	e050      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e04c      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e048      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e044      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e040      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e03c      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e038      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5b      	ldr	r2, [pc, #364]	; (8006e60 <UART_SetConfig+0x6a8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d130      	bne.n	8006d58 <UART_SetConfig+0x5a0>
 8006cf6:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <UART_SetConfig+0x69c>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d826      	bhi.n	8006d50 <UART_SetConfig+0x598>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x550>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d31 	.word	0x08006d31
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	2302      	movs	r3, #2
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e01a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e016      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e012      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e00e      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e00a      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e006      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e002      	b.n	8006d5e <UART_SetConfig+0x5a6>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a3f      	ldr	r2, [pc, #252]	; (8006e60 <UART_SetConfig+0x6a8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	f040 80f8 	bne.w	8006f5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	dc46      	bgt.n	8006e00 <UART_SetConfig+0x648>
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f2c0 8082 	blt.w	8006e7c <UART_SetConfig+0x6c4>
 8006d78:	3b02      	subs	r3, #2
 8006d7a:	2b1e      	cmp	r3, #30
 8006d7c:	d87e      	bhi.n	8006e7c <UART_SetConfig+0x6c4>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x5cc>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006e07 	.word	0x08006e07
 8006d88:	08006e7d 	.word	0x08006e7d
 8006d8c:	08006e0f 	.word	0x08006e0f
 8006d90:	08006e7d 	.word	0x08006e7d
 8006d94:	08006e7d 	.word	0x08006e7d
 8006d98:	08006e7d 	.word	0x08006e7d
 8006d9c:	08006e1f 	.word	0x08006e1f
 8006da0:	08006e7d 	.word	0x08006e7d
 8006da4:	08006e7d 	.word	0x08006e7d
 8006da8:	08006e7d 	.word	0x08006e7d
 8006dac:	08006e7d 	.word	0x08006e7d
 8006db0:	08006e7d 	.word	0x08006e7d
 8006db4:	08006e7d 	.word	0x08006e7d
 8006db8:	08006e7d 	.word	0x08006e7d
 8006dbc:	08006e2f 	.word	0x08006e2f
 8006dc0:	08006e7d 	.word	0x08006e7d
 8006dc4:	08006e7d 	.word	0x08006e7d
 8006dc8:	08006e7d 	.word	0x08006e7d
 8006dcc:	08006e7d 	.word	0x08006e7d
 8006dd0:	08006e7d 	.word	0x08006e7d
 8006dd4:	08006e7d 	.word	0x08006e7d
 8006dd8:	08006e7d 	.word	0x08006e7d
 8006ddc:	08006e7d 	.word	0x08006e7d
 8006de0:	08006e7d 	.word	0x08006e7d
 8006de4:	08006e7d 	.word	0x08006e7d
 8006de8:	08006e7d 	.word	0x08006e7d
 8006dec:	08006e7d 	.word	0x08006e7d
 8006df0:	08006e7d 	.word	0x08006e7d
 8006df4:	08006e7d 	.word	0x08006e7d
 8006df8:	08006e7d 	.word	0x08006e7d
 8006dfc:	08006e6f 	.word	0x08006e6f
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d037      	beq.n	8006e74 <UART_SetConfig+0x6bc>
 8006e04:	e03a      	b.n	8006e7c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e06:	f7fe fbb1 	bl	800556c <HAL_RCCEx_GetD3PCLK1Freq>
 8006e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e0c:	e03c      	b.n	8006e88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fbc0 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1c:	e034      	b.n	8006e88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fd0c 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2c:	e02c      	b.n	8006e88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <UART_SetConfig+0x69c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <UART_SetConfig+0x69c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	08db      	lsrs	r3, r3, #3
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <UART_SetConfig+0x6ac>)
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e4c:	e01c      	b.n	8006e88 <UART_SetConfig+0x6d0>
 8006e4e:	bf00      	nop
 8006e50:	40011400 	.word	0x40011400
 8006e54:	58024400 	.word	0x58024400
 8006e58:	40007800 	.word	0x40007800
 8006e5c:	40007c00 	.word	0x40007c00
 8006e60:	58000c00 	.word	0x58000c00
 8006e64:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b9d      	ldr	r3, [pc, #628]	; (80070e0 <UART_SetConfig+0x928>)
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6c:	e00c      	b.n	8006e88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e6e:	4b9d      	ldr	r3, [pc, #628]	; (80070e4 <UART_SetConfig+0x92c>)
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e72:	e009      	b.n	8006e88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e7a:	e005      	b.n	8006e88 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 81de 	beq.w	800724c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	4a94      	ldr	r2, [pc, #592]	; (80070e8 <UART_SetConfig+0x930>)
 8006e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d305      	bcc.n	8006ec0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d903      	bls.n	8006ec8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ec6:	e1c1      	b.n	800724c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eca:	2200      	movs	r2, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	60fa      	str	r2, [r7, #12]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	4a84      	ldr	r2, [pc, #528]	; (80070e8 <UART_SetConfig+0x930>)
 8006ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eea:	f7f9 f9fd 	bl	80002e8 <__aeabi_uldivmod>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	020b      	lsls	r3, r1, #8
 8006f00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f04:	0202      	lsls	r2, r0, #8
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	6849      	ldr	r1, [r1, #4]
 8006f0a:	0849      	lsrs	r1, r1, #1
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4605      	mov	r5, r0
 8006f12:	eb12 0804 	adds.w	r8, r2, r4
 8006f16:	eb43 0905 	adc.w	r9, r3, r5
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	469a      	mov	sl, r3
 8006f22:	4693      	mov	fp, r2
 8006f24:	4652      	mov	r2, sl
 8006f26:	465b      	mov	r3, fp
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 f9dc 	bl	80002e8 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3e:	d308      	bcc.n	8006f52 <UART_SetConfig+0x79a>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f46:	d204      	bcs.n	8006f52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	e17c      	b.n	800724c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f58:	e178      	b.n	800724c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f62:	f040 80c5 	bne.w	80070f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	dc48      	bgt.n	8007000 <UART_SetConfig+0x848>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db7b      	blt.n	800706a <UART_SetConfig+0x8b2>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d879      	bhi.n	800706a <UART_SetConfig+0x8b2>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x7c4>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08007007 	.word	0x08007007
 8006f80:	0800700f 	.word	0x0800700f
 8006f84:	0800706b 	.word	0x0800706b
 8006f88:	0800706b 	.word	0x0800706b
 8006f8c:	08007017 	.word	0x08007017
 8006f90:	0800706b 	.word	0x0800706b
 8006f94:	0800706b 	.word	0x0800706b
 8006f98:	0800706b 	.word	0x0800706b
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	0800706b 	.word	0x0800706b
 8006fa4:	0800706b 	.word	0x0800706b
 8006fa8:	0800706b 	.word	0x0800706b
 8006fac:	0800706b 	.word	0x0800706b
 8006fb0:	0800706b 	.word	0x0800706b
 8006fb4:	0800706b 	.word	0x0800706b
 8006fb8:	0800706b 	.word	0x0800706b
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	0800706b 	.word	0x0800706b
 8006fc4:	0800706b 	.word	0x0800706b
 8006fc8:	0800706b 	.word	0x0800706b
 8006fcc:	0800706b 	.word	0x0800706b
 8006fd0:	0800706b 	.word	0x0800706b
 8006fd4:	0800706b 	.word	0x0800706b
 8006fd8:	0800706b 	.word	0x0800706b
 8006fdc:	0800706b 	.word	0x0800706b
 8006fe0:	0800706b 	.word	0x0800706b
 8006fe4:	0800706b 	.word	0x0800706b
 8006fe8:	0800706b 	.word	0x0800706b
 8006fec:	0800706b 	.word	0x0800706b
 8006ff0:	0800706b 	.word	0x0800706b
 8006ff4:	0800706b 	.word	0x0800706b
 8006ff8:	0800706b 	.word	0x0800706b
 8006ffc:	0800705d 	.word	0x0800705d
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d02e      	beq.n	8007062 <UART_SetConfig+0x8aa>
 8007004:	e031      	b.n	800706a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007006:	f7fd f87b 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 800700a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800700c:	e033      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700e:	f7fd f88d 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8007012:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007014:	e02f      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fabc 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007024:	e027      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007026:	f107 0318 	add.w	r3, r7, #24
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fc08 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007034:	e01f      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007036:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <UART_SetConfig+0x934>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007042:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <UART_SetConfig+0x934>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	08db      	lsrs	r3, r3, #3
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	4a24      	ldr	r2, [pc, #144]	; (80070e0 <UART_SetConfig+0x928>)
 800704e:	fa22 f303 	lsr.w	r3, r2, r3
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007054:	e00f      	b.n	8007076 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007056:	4b22      	ldr	r3, [pc, #136]	; (80070e0 <UART_SetConfig+0x928>)
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705a:	e00c      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800705c:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <UART_SetConfig+0x92c>)
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007060:	e009      	b.n	8007076 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007068:	e005      	b.n	8007076 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80e7 	beq.w	800724c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <UART_SetConfig+0x930>)
 8007084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007088:	461a      	mov	r2, r3
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007090:	005a      	lsls	r2, r3, #1
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	441a      	add	r2, r3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d916      	bls.n	80070d8 <UART_SetConfig+0x920>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b0:	d212      	bcs.n	80070d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f023 030f 	bic.w	r3, r3, #15
 80070ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070ca:	4313      	orrs	r3, r2
 80070cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	e0b9      	b.n	800724c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070de:	e0b5      	b.n	800724c <UART_SetConfig+0xa94>
 80070e0:	03d09000 	.word	0x03d09000
 80070e4:	003d0900 	.word	0x003d0900
 80070e8:	08008cdc 	.word	0x08008cdc
 80070ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80070f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	dc49      	bgt.n	800718c <UART_SetConfig+0x9d4>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	db7c      	blt.n	80071f6 <UART_SetConfig+0xa3e>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d87a      	bhi.n	80071f6 <UART_SetConfig+0xa3e>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x950>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	08007193 	.word	0x08007193
 800710c:	0800719b 	.word	0x0800719b
 8007110:	080071f7 	.word	0x080071f7
 8007114:	080071f7 	.word	0x080071f7
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071f7 	.word	0x080071f7
 8007120:	080071f7 	.word	0x080071f7
 8007124:	080071f7 	.word	0x080071f7
 8007128:	080071b3 	.word	0x080071b3
 800712c:	080071f7 	.word	0x080071f7
 8007130:	080071f7 	.word	0x080071f7
 8007134:	080071f7 	.word	0x080071f7
 8007138:	080071f7 	.word	0x080071f7
 800713c:	080071f7 	.word	0x080071f7
 8007140:	080071f7 	.word	0x080071f7
 8007144:	080071f7 	.word	0x080071f7
 8007148:	080071c3 	.word	0x080071c3
 800714c:	080071f7 	.word	0x080071f7
 8007150:	080071f7 	.word	0x080071f7
 8007154:	080071f7 	.word	0x080071f7
 8007158:	080071f7 	.word	0x080071f7
 800715c:	080071f7 	.word	0x080071f7
 8007160:	080071f7 	.word	0x080071f7
 8007164:	080071f7 	.word	0x080071f7
 8007168:	080071f7 	.word	0x080071f7
 800716c:	080071f7 	.word	0x080071f7
 8007170:	080071f7 	.word	0x080071f7
 8007174:	080071f7 	.word	0x080071f7
 8007178:	080071f7 	.word	0x080071f7
 800717c:	080071f7 	.word	0x080071f7
 8007180:	080071f7 	.word	0x080071f7
 8007184:	080071f7 	.word	0x080071f7
 8007188:	080071e9 	.word	0x080071e9
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d02e      	beq.n	80071ee <UART_SetConfig+0xa36>
 8007190:	e031      	b.n	80071f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007192:	f7fc ffb5 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8007196:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007198:	e033      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800719a:	f7fc ffc7 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 800719e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071a0:	e02f      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe f9f6 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b0:	e027      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b2:	f107 0318 	add.w	r3, r7, #24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fb42 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c0:	e01f      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c2:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <UART_SetConfig+0xac0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071ce:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <UART_SetConfig+0xac0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	08db      	lsrs	r3, r3, #3
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	4a28      	ldr	r2, [pc, #160]	; (800727c <UART_SetConfig+0xac4>)
 80071da:	fa22 f303 	lsr.w	r3, r2, r3
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071e0:	e00f      	b.n	8007202 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80071e2:	4b26      	ldr	r3, [pc, #152]	; (800727c <UART_SetConfig+0xac4>)
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e00c      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <UART_SetConfig+0xac8>)
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ec:	e009      	b.n	8007202 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f4:	e005      	b.n	8007202 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007200:	bf00      	nop
    }

    if (pclk != 0U)
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d021      	beq.n	800724c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <UART_SetConfig+0xacc>)
 800720e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007212:	461a      	mov	r2, r3
 8007214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007216:	fbb3 f2f2 	udiv	r2, r3, r2
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	085b      	lsrs	r3, r3, #1
 8007220:	441a      	add	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d909      	bls.n	8007246 <UART_SetConfig+0xa8e>
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007238:	d205      	bcs.n	8007246 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	b29a      	uxth	r2, r3
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60da      	str	r2, [r3, #12]
 8007244:	e002      	b.n	800724c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2201      	movs	r2, #1
 8007250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2201      	movs	r2, #1
 8007258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2200      	movs	r2, #0
 8007260:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007268:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800726c:	4618      	mov	r0, r3
 800726e:	3748      	adds	r7, #72	; 0x48
 8007270:	46bd      	mov	sp, r7
 8007272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007276:	bf00      	nop
 8007278:	58024400 	.word	0x58024400
 800727c:	03d09000 	.word	0x03d09000
 8007280:	003d0900 	.word	0x003d0900
 8007284:	08008cdc 	.word	0x08008cdc

08007288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01a      	beq.n	800739e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007386:	d10a      	bne.n	800739e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
  }
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b098      	sub	sp, #96	; 0x60
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073dc:	f7fa f892 	bl	8001504 <HAL_GetTick>
 80073e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d12f      	bne.n	8007450 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f88e 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d022      	beq.n	8007450 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741e:	653b      	str	r3, [r7, #80]	; 0x50
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	647b      	str	r3, [r7, #68]	; 0x44
 800742a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800742e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e063      	b.n	8007518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d149      	bne.n	80074f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007466:	2200      	movs	r2, #0
 8007468:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f857 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d03c      	beq.n	80074f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	623b      	str	r3, [r7, #32]
   return(result);
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
 8007498:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800749c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ca:	61fa      	str	r2, [r7, #28]
 80074cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	69b9      	ldr	r1, [r7, #24]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	617b      	str	r3, [r7, #20]
   return(result);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e5      	bne.n	80074aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e012      	b.n	8007518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3758      	adds	r7, #88	; 0x58
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007530:	e049      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d045      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7f9 ffe3 	bl	8001504 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <UART_WaitOnFlagUntilTimeout+0x30>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e048      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d031      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b08      	cmp	r3, #8
 800756e:	d110      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2208      	movs	r2, #8
 8007576:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f95b 	bl	8007834 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2208      	movs	r2, #8
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e029      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a0:	d111      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f941 	bl	8007834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e00f      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d0a6      	beq.n	8007532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b0a3      	sub	sp, #140	; 0x8c
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d10e      	bne.n	8007642 <UART_Start_Receive_IT+0x52>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <UART_Start_Receive_IT+0x48>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007632:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007636:	e02d      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	22ff      	movs	r2, #255	; 0xff
 800763c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007640:	e028      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10d      	bne.n	8007666 <UART_Start_Receive_IT+0x76>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <UART_Start_Receive_IT+0x6c>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800765a:	e01b      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	227f      	movs	r2, #127	; 0x7f
 8007660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007664:	e016      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766e:	d10d      	bne.n	800768c <UART_Start_Receive_IT+0x9c>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <UART_Start_Receive_IT+0x92>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	227f      	movs	r2, #127	; 0x7f
 800767c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007680:	e008      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	223f      	movs	r2, #63	; 0x3f
 8007686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800768a:	e003      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2222      	movs	r2, #34	; 0x22
 80076a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80076c8:	673a      	str	r2, [r7, #112]	; 0x70
 80076ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80076ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80076d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e3      	bne.n	80076a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e4:	d14f      	bne.n	8007786 <UART_Start_Receive_IT+0x196>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d349      	bcc.n	8007786 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	d107      	bne.n	800770c <UART_Start_Receive_IT+0x11c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a47      	ldr	r2, [pc, #284]	; (8007824 <UART_Start_Receive_IT+0x234>)
 8007708:	675a      	str	r2, [r3, #116]	; 0x74
 800770a:	e002      	b.n	8007712 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a46      	ldr	r2, [pc, #280]	; (8007828 <UART_Start_Receive_IT+0x238>)
 8007710:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01a      	beq.n	8007750 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800773c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800774a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e4      	bne.n	800771a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007770:	64ba      	str	r2, [r7, #72]	; 0x48
 8007772:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800777e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_Start_Receive_IT+0x160>
 8007784:	e046      	b.n	8007814 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778e:	d107      	bne.n	80077a0 <UART_Start_Receive_IT+0x1b0>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a24      	ldr	r2, [pc, #144]	; (800782c <UART_Start_Receive_IT+0x23c>)
 800779c:	675a      	str	r2, [r3, #116]	; 0x74
 800779e:	e002      	b.n	80077a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a23      	ldr	r2, [pc, #140]	; (8007830 <UART_Start_Receive_IT+0x240>)
 80077a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077c2:	677b      	str	r3, [r7, #116]	; 0x74
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
 80077ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_Start_Receive_IT+0x1be>
 80077e0:	e018      	b.n	8007814 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f043 0320 	orr.w	r3, r3, #32
 80077f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	61bb      	str	r3, [r7, #24]
   return(result);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	378c      	adds	r7, #140	; 0x8c
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	08008055 	.word	0x08008055
 8007828:	08007cf5 	.word	0x08007cf5
 800782c:	08007b3d 	.word	0x08007b3d
 8007830:	08007985 	.word	0x08007985

08007834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b095      	sub	sp, #84	; 0x54
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785a:	643b      	str	r3, [r7, #64]	; 0x40
 800785c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e6      	bne.n	800783c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	61fb      	str	r3, [r7, #28]
   return(result);
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <UART_EndRxTransfer+0xc8>)
 8007882:	4013      	ands	r3, r2
 8007884:	64bb      	str	r3, [r7, #72]	; 0x48
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3308      	adds	r3, #8
 800788c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e5      	bne.n	800786e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d118      	bne.n	80078dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	647b      	str	r3, [r7, #68]	; 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	613b      	str	r3, [r7, #16]
   return(result);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078f0:	bf00      	nop
 80078f2:	3754      	adds	r7, #84	; 0x54
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	effffffe 	.word	0xeffffffe

08007900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7fe ff34 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	60bb      	str	r3, [r7, #8]
   return(result);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007948:	61fb      	str	r3, [r7, #28]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	613b      	str	r3, [r7, #16]
   return(result);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7fe feff 	bl	8006778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797a:	bf00      	nop
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b09c      	sub	sp, #112	; 0x70
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007992:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799c:	2b22      	cmp	r3, #34	; 0x22
 800799e:	f040 80be 	bne.w	8007b1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80079b0:	b2d9      	uxtb	r1, r3
 80079b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079bc:	400a      	ands	r2, r1
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 80a1 	bne.w	8007b2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	667b      	str	r3, [r7, #100]	; 0x64
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a33      	ldr	r2, [pc, #204]	; (8007b38 <UART_RxISR_8BIT+0x1b4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01f      	beq.n	8007ab0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a92:	663b      	str	r3, [r7, #96]	; 0x60
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d12e      	bne.n	8007b16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0310 	bic.w	r3, r3, #16
 8007ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007adc:	61fb      	str	r3, [r7, #28]
 8007ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	69b9      	ldr	r1, [r7, #24]
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d103      	bne.n	8007b06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2210      	movs	r2, #16
 8007b04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fe fe46 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b14:	e00b      	b.n	8007b2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7f9 f8d4 	bl	8000cc4 <HAL_UART_RxCpltCallback>
}
 8007b1c:	e007      	b.n	8007b2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0208 	orr.w	r2, r2, #8
 8007b2c:	619a      	str	r2, [r3, #24]
}
 8007b2e:	bf00      	nop
 8007b30:	3770      	adds	r7, #112	; 0x70
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	58000c00 	.word	0x58000c00

08007b3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b09c      	sub	sp, #112	; 0x70
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b54:	2b22      	cmp	r3, #34	; 0x22
 8007b56:	f040 80be 	bne.w	8007cd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b72:	4013      	ands	r3, r2
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 80a1 	bne.w	8007ce6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e6      	bne.n	8007ba4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f023 0301 	bic.w	r3, r3, #1
 8007bec:	663b      	str	r3, [r7, #96]	; 0x60
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bf6:	643a      	str	r2, [r7, #64]	; 0x40
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e5      	bne.n	8007bd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a33      	ldr	r2, [pc, #204]	; (8007cf0 <UART_RxISR_16BIT+0x1b4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d01f      	beq.n	8007c68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d12e      	bne.n	8007cce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f023 0310 	bic.w	r3, r3, #16
 8007c8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6979      	ldr	r1, [r7, #20]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d103      	bne.n	8007cbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2210      	movs	r2, #16
 8007cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fe fd6a 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ccc:	e00b      	b.n	8007ce6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7f8 fff8 	bl	8000cc4 <HAL_UART_RxCpltCallback>
}
 8007cd4:	e007      	b.n	8007ce6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	619a      	str	r2, [r3, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	3770      	adds	r7, #112	; 0x70
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	58000c00 	.word	0x58000c00

08007cf4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0ac      	sub	sp, #176	; 0xb0
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d2a:	2b22      	cmp	r3, #34	; 0x22
 8007d2c:	f040 8180 	bne.w	8008030 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d36:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d3a:	e123      	b.n	8007f84 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007d4a:	b2d9      	uxtb	r1, r3
 8007d4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	400a      	ands	r2, r1
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d053      	beq.n	8007e36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d011      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de4:	f043 0204 	orr.w	r2, r3, #4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	f043 0202 	orr.w	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fe fcaf 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 80a0 	bne.w	8007f84 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e68:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007e6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e4      	bne.n	8007e44 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e8c:	4b6e      	ldr	r3, [pc, #440]	; (8008048 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e9e:	66ba      	str	r2, [r7, #104]	; 0x68
 8007ea0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007ea4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e3      	bne.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a60      	ldr	r2, [pc, #384]	; (800804c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d021      	beq.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01a      	beq.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f00:	657b      	str	r3, [r7, #84]	; 0x54
 8007f02:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d130      	bne.n	8007f7e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	f023 0310 	bic.w	r3, r3, #16
 8007f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f44:	643b      	str	r3, [r7, #64]	; 0x40
 8007f46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e4      	bne.n	8007f22 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d103      	bne.n	8007f6e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fe fc12 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
 8007f7c:	e002      	b.n	8007f84 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7f8 fea0 	bl	8000cc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f47f aed1 	bne.w	8007d3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d049      	beq.n	8008040 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d242      	bcs.n	8008040 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e3      	bne.n	8007fba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ff6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	60bb      	str	r3, [r7, #8]
   return(result);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f043 0320 	orr.w	r3, r3, #32
 800800c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e4      	bne.n	8007ff8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800802e:	e007      	b.n	8008040 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0208 	orr.w	r2, r2, #8
 800803e:	619a      	str	r2, [r3, #24]
}
 8008040:	bf00      	nop
 8008042:	37b0      	adds	r7, #176	; 0xb0
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	effffffe 	.word	0xeffffffe
 800804c:	58000c00 	.word	0x58000c00
 8008050:	08007985 	.word	0x08007985

08008054 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0ae      	sub	sp, #184	; 0xb8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008062:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800808a:	2b22      	cmp	r3, #34	; 0x22
 800808c:	f040 8184 	bne.w	8008398 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008096:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800809a:	e127      	b.n	80082ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80080ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80080b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80080b6:	4013      	ands	r3, r2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c4:	1c9a      	adds	r2, r3, #2
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d053      	beq.n	800819a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d011      	beq.n	8008122 <UART_RxISR_16BIT_FIFOEN+0xce>
 80080fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2201      	movs	r2, #1
 8008110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008118:	f043 0201 	orr.w	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800812e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2202      	movs	r2, #2
 8008140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008148:	f043 0204 	orr.w	r2, r3, #4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d011      	beq.n	8008182 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800815e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2204      	movs	r2, #4
 8008170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	f043 0202 	orr.w	r2, r3, #2
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fe fafd 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80a2 	bne.w	80082ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e2      	bne.n	80081a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081f4:	4b6e      	ldr	r3, [pc, #440]	; (80083b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800820c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a60      	ldr	r2, [pc, #384]	; (80083b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d021      	beq.n	800827c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01a      	beq.n	800827c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800825a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008268:	65bb      	str	r3, [r7, #88]	; 0x58
 800826a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800826e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e4      	bne.n	8008246 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d130      	bne.n	80082e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082ac:	647b      	str	r3, [r7, #68]	; 0x44
 80082ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d103      	bne.n	80082d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2210      	movs	r2, #16
 80082d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fe fa5e 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
 80082e4:	e002      	b.n	80082ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f8 fcec 	bl	8000cc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80082f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aecd 	bne.w	800809c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008308:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800830c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008310:	2b00      	cmp	r3, #0
 8008312:	d049      	beq.n	80083a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800831a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800831e:	429a      	cmp	r2, r3
 8008320:	d242      	bcs.n	80083a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	623b      	str	r3, [r7, #32]
   return(result);
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008346:	633a      	str	r2, [r7, #48]	; 0x30
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a16      	ldr	r2, [pc, #88]	; (80083b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800835e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	60fb      	str	r3, [r7, #12]
   return(result);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	617b      	str	r3, [r7, #20]
   return(result);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e4      	bne.n	8008360 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008396:	e007      	b.n	80083a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	619a      	str	r2, [r3, #24]
}
 80083a8:	bf00      	nop
 80083aa:	37b8      	adds	r7, #184	; 0xb8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	effffffe 	.word	0xeffffffe
 80083b4:	58000c00 	.word	0x58000c00
 80083b8:	08007b3d 	.word	0x08007b3d

080083bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_UARTEx_DisableFifoMode+0x16>
 800840a:	2302      	movs	r3, #2
 800840c:	e027      	b.n	800845e <HAL_UARTEx_DisableFifoMode+0x66>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2224      	movs	r2, #36	; 0x24
 800841a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800843c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800847a:	2b01      	cmp	r3, #1
 800847c:	d101      	bne.n	8008482 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800847e:	2302      	movs	r3, #2
 8008480:	e02d      	b.n	80084de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2224      	movs	r2, #36	; 0x24
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0201 	bic.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f850 	bl	8008564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e02d      	b.n	800855a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2224      	movs	r2, #36	; 0x24
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f812 	bl	8008564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008570:	2b00      	cmp	r3, #0
 8008572:	d108      	bne.n	8008586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008584:	e031      	b.n	80085ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008586:	2310      	movs	r3, #16
 8008588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800858a:	2310      	movs	r3, #16
 800858c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	0e5b      	lsrs	r3, r3, #25
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	0f5b      	lsrs	r3, r3, #29
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	7b3a      	ldrb	r2, [r7, #12]
 80085b2:	4911      	ldr	r1, [pc, #68]	; (80085f8 <UARTEx_SetNbDataToProcess+0x94>)
 80085b4:	5c8a      	ldrb	r2, [r1, r2]
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ba:	7b3a      	ldrb	r2, [r7, #12]
 80085bc:	490f      	ldr	r1, [pc, #60]	; (80085fc <UARTEx_SetNbDataToProcess+0x98>)
 80085be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	7b7a      	ldrb	r2, [r7, #13]
 80085d0:	4909      	ldr	r1, [pc, #36]	; (80085f8 <UARTEx_SetNbDataToProcess+0x94>)
 80085d2:	5c8a      	ldrb	r2, [r1, r2]
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085d8:	7b7a      	ldrb	r2, [r7, #13]
 80085da:	4908      	ldr	r1, [pc, #32]	; (80085fc <UARTEx_SetNbDataToProcess+0x98>)
 80085dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085de:	fb93 f3f2 	sdiv	r3, r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	08008cf4 	.word	0x08008cf4
 80085fc:	08008cfc 	.word	0x08008cfc

08008600 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008600:	b084      	sub	sp, #16
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	f107 001c 	add.w	r0, r7, #28
 800860e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	2b01      	cmp	r3, #1
 8008616:	d120      	bne.n	800865a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <USB_CoreInit+0xd4>)
 800862a:	4013      	ands	r3, r2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800863c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863e:	2b01      	cmp	r3, #1
 8008640:	d105      	bne.n	800864e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 faac 	bl	8008bac <USB_CoreReset>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
 8008658:	e01a      	b.n	8008690 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 faa0 	bl	8008bac <USB_CoreReset>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	639a      	str	r2, [r3, #56]	; 0x38
 8008682:	e005      	b.n	8008690 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	2b01      	cmp	r3, #1
 8008694:	d116      	bne.n	80086c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869a:	b29a      	uxth	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <USB_CoreInit+0xd8>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f043 0206 	orr.w	r2, r3, #6
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086d0:	b004      	add	sp, #16
 80086d2:	4770      	bx	lr
 80086d4:	ffbdffbf 	.word	0xffbdffbf
 80086d8:	03ee0000 	.word	0x03ee0000

080086dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f023 0201 	bic.w	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d115      	bne.n	800874c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800872c:	2001      	movs	r0, #1
 800872e:	f7f8 fef5 	bl	800151c <HAL_Delay>
      ms++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa29 	bl	8008b90 <USB_GetMode>
 800873e:	4603      	mov	r3, r0
 8008740:	2b01      	cmp	r3, #1
 8008742:	d01e      	beq.n	8008782 <USB_SetCurrentMode+0x84>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b31      	cmp	r3, #49	; 0x31
 8008748:	d9f0      	bls.n	800872c <USB_SetCurrentMode+0x2e>
 800874a:	e01a      	b.n	8008782 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d115      	bne.n	800877e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800875e:	2001      	movs	r0, #1
 8008760:	f7f8 fedc 	bl	800151c <HAL_Delay>
      ms++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa10 	bl	8008b90 <USB_GetMode>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <USB_SetCurrentMode+0x84>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b31      	cmp	r3, #49	; 0x31
 800877a:	d9f0      	bls.n	800875e <USB_SetCurrentMode+0x60>
 800877c:	e001      	b.n	8008782 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e005      	b.n	800878e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b32      	cmp	r3, #50	; 0x32
 8008786:	d101      	bne.n	800878c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008798:	b084      	sub	sp, #16
 800879a:	b580      	push	{r7, lr}
 800879c:	b086      	sub	sp, #24
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	e009      	b.n	80087cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	3340      	adds	r3, #64	; 0x40
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b0e      	cmp	r3, #14
 80087d0:	d9f2      	bls.n	80087b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11c      	bne.n	8008812 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e6:	f043 0302 	orr.w	r3, r3, #2
 80087ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e005      	b.n	800881e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	4619      	mov	r1, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008838:	461a      	mov	r2, r3
 800883a:	680b      	ldr	r3, [r1, #0]
 800883c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10c      	bne.n	800885e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f965 	bl	8008b1c <USB_SetDevSpeed>
 8008852:	e008      	b.n	8008866 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008854:	2101      	movs	r1, #1
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f960 	bl	8008b1c <USB_SetDevSpeed>
 800885c:	e003      	b.n	8008866 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800885e:	2103      	movs	r1, #3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f95b 	bl	8008b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008866:	2110      	movs	r1, #16
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8f3 	bl	8008a54 <USB_FlushTxFifo>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f91f 	bl	8008abc <USB_FlushRxFifo>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888e:	461a      	mov	r2, r3
 8008890:	2300      	movs	r3, #0
 8008892:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	461a      	mov	r2, r3
 800889c:	2300      	movs	r3, #0
 800889e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a6:	461a      	mov	r2, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ac:	2300      	movs	r3, #0
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e043      	b.n	800893a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c8:	d118      	bne.n	80088fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	461a      	mov	r2, r3
 80088de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	e013      	b.n	800890e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e008      	b.n	800890e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	461a      	mov	r2, r3
 800892e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008932:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3301      	adds	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	429a      	cmp	r2, r3
 8008940:	d3b7      	bcc.n	80088b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008942:	2300      	movs	r3, #0
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	e043      	b.n	80089d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800895e:	d118      	bne.n	8008992 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008972:	461a      	mov	r2, r3
 8008974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	e013      	b.n	80089a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	461a      	mov	r2, r3
 800898a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	e008      	b.n	80089a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	461a      	mov	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b0:	461a      	mov	r2, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	461a      	mov	r2, r3
 80089c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3b7      	bcc.n	8008948 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f043 0210 	orr.w	r2, r3, #16
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <USB_DevInit+0x2b4>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f043 0208 	orr.w	r2, r3, #8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d105      	bne.n	8008a3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <USB_DevInit+0x2b8>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a48:	b004      	add	sp, #16
 8008a4a:	4770      	bx	lr
 8008a4c:	803c3800 	.word	0x803c3800
 8008a50:	40000004 	.word	0x40000004

08008a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <USB_FlushTxFifo+0x64>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e01b      	b.n	8008aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	daf2      	bge.n	8008a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	019b      	lsls	r3, r3, #6
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <USB_FlushTxFifo+0x64>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e006      	b.n	8008aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d0f0      	beq.n	8008a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	00030d40 	.word	0x00030d40

08008abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <USB_FlushRxFifo+0x5c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e018      	b.n	8008b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	daf2      	bge.n	8008ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2210      	movs	r2, #16
 8008aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <USB_FlushRxFifo+0x5c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d901      	bls.n	8008afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e006      	b.n	8008b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d0f0      	beq.n	8008aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	00030d40 	.word	0x00030d40

08008b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	68f9      	ldr	r1, [r7, #12]
 8008b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b68:	f023 0303 	bic.w	r3, r3, #3
 8008b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <USB_CoreReset+0x64>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d901      	bls.n	8008bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e01b      	b.n	8008c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	daf2      	bge.n	8008bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f043 0201 	orr.w	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <USB_CoreReset+0x64>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d901      	bls.n	8008bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e006      	b.n	8008c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d0f0      	beq.n	8008be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	00030d40 	.word	0x00030d40

08008c14 <memset>:
 8008c14:	4402      	add	r2, r0
 8008c16:	4603      	mov	r3, r0
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d100      	bne.n	8008c1e <memset+0xa>
 8008c1c:	4770      	bx	lr
 8008c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c22:	e7f9      	b.n	8008c18 <memset+0x4>

08008c24 <strstr>:
 8008c24:	780a      	ldrb	r2, [r1, #0]
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	b96a      	cbnz	r2, 8008c46 <strstr+0x22>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d109      	bne.n	8008c44 <strstr+0x20>
 8008c30:	460c      	mov	r4, r1
 8008c32:	4605      	mov	r5, r0
 8008c34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f6      	beq.n	8008c2a <strstr+0x6>
 8008c3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008c40:	429e      	cmp	r6, r3
 8008c42:	d0f7      	beq.n	8008c34 <strstr+0x10>
 8008c44:	3001      	adds	r0, #1
 8008c46:	7803      	ldrb	r3, [r0, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1ef      	bne.n	8008c2c <strstr+0x8>
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	e7ec      	b.n	8008c2a <strstr+0x6>

08008c50 <__libc_init_array>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4d0d      	ldr	r5, [pc, #52]	; (8008c88 <__libc_init_array+0x38>)
 8008c54:	4c0d      	ldr	r4, [pc, #52]	; (8008c8c <__libc_init_array+0x3c>)
 8008c56:	1b64      	subs	r4, r4, r5
 8008c58:	10a4      	asrs	r4, r4, #2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	42a6      	cmp	r6, r4
 8008c5e:	d109      	bne.n	8008c74 <__libc_init_array+0x24>
 8008c60:	4d0b      	ldr	r5, [pc, #44]	; (8008c90 <__libc_init_array+0x40>)
 8008c62:	4c0c      	ldr	r4, [pc, #48]	; (8008c94 <__libc_init_array+0x44>)
 8008c64:	f000 f818 	bl	8008c98 <_init>
 8008c68:	1b64      	subs	r4, r4, r5
 8008c6a:	10a4      	asrs	r4, r4, #2
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	d105      	bne.n	8008c7e <__libc_init_array+0x2e>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c78:	4798      	blx	r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	e7ee      	b.n	8008c5c <__libc_init_array+0xc>
 8008c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c82:	4798      	blx	r3
 8008c84:	3601      	adds	r6, #1
 8008c86:	e7f2      	b.n	8008c6e <__libc_init_array+0x1e>
 8008c88:	08008d0c 	.word	0x08008d0c
 8008c8c:	08008d0c 	.word	0x08008d0c
 8008c90:	08008d0c 	.word	0x08008d0c
 8008c94:	08008d10 	.word	0x08008d10

08008c98 <_init>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr

08008ca4 <_fini>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr
